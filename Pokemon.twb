<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20233.23.1227.1336                               -->
<workbook original-version='18.1' source-build='2023.3.1 (20233.23.1227.1336)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <ParameterAction />
    <_.fcp.ParameterActionClearSelection.true...ParameterActionClearSelection />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
        <calculation class='tableau' formula='&quot;WATER&quot;' />
        <members>
          <member value='&quot;BUG&quot;' />
          <member value='&quot;DARK&quot;' />
          <member value='&quot;DRAGON&quot;' />
          <member value='&quot;ELECTRIC&quot;' />
          <member value='&quot;FAIRY&quot;' />
          <member value='&quot;FIGHTING&quot;' />
          <member value='&quot;FIRE&quot;' />
          <member value='&quot;FLYING&quot;' />
          <member value='&quot;GHOST&quot;' />
          <member value='&quot;GRASS&quot;' />
          <member value='&quot;GROUND&quot;' />
          <member value='&quot;ICE&quot;' />
          <member value='&quot;NORMAL&quot;' />
          <member value='&quot;POISON&quot;' />
          <member value='&quot;PSYCHIC&quot;' />
          <member value='&quot;ROCK&quot;' />
          <member value='&quot;STEEL&quot;' />
          <member value='&quot;WATER&quot;' />
        </members>
      </column>
      <column caption='Parameter 3-Base total' datatype='integer' name='[Parameter 2-HP (copy)_172262734001377281]' param-domain-type='range' role='measure' type='quantitative' value='175'>
        <calculation class='tableau' formula='175' />
        <range max='780' min='175' />
      </column>
      <column caption='Parameter 2-HP' datatype='integer' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='1'>
        <calculation class='tableau' formula='1' />
        <range max='255' min='1' />
      </column>
      <column caption='Parameter 5-defense' datatype='integer' name='[Parameter 3-Base total (copy) (copy)_172262734001598467]' param-domain-type='range' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <range max='230' min='5' />
      </column>
      <column caption='Parameter 4-attack' datatype='integer' name='[Parameter 3-Base total (copy)_172262734001582082]' param-domain-type='range' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <range max='190' min='5' />
      </column>
      <column alias='Dark' caption='Parameter-Tipul pokemonului adversar' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Against Dark&quot;'>
        <calculation class='tableau' formula='&quot;Against Dark&quot;' />
        <aliases>
          <alias key='&quot;Against Bug&quot;' value='Bug' />
          <alias key='&quot;Against Dark&quot;' value='Dark' />
          <alias key='&quot;Against Dragon&quot;' value='Dragon' />
          <alias key='&quot;Against Electric&quot;' value='Electric' />
          <alias key='&quot;Against Fairy&quot;' value='Fairy' />
          <alias key='&quot;Against Fighting&quot;' value='Fighting' />
          <alias key='&quot;Against Fire&quot;' value='Fire' />
          <alias key='&quot;Against Flying&quot;' value='Flying' />
          <alias key='&quot;Against Ghost&quot;' value='Ghost' />
          <alias key='&quot;Against Grass&quot;' value='Grass' />
          <alias key='&quot;Against Ground&quot;' value='Ground' />
          <alias key='&quot;Against Ice&quot;' value='Ice' />
          <alias key='&quot;Against Normal&quot;' value='Normal' />
          <alias key='&quot;Against Poison&quot;' value='Poison' />
          <alias key='&quot;Against Psyhic&quot;' value='Psyhic' />
          <alias key='&quot;Against Rock&quot;' value='Rock' />
          <alias key='&quot;Against Steel&quot;' value='Steel' />
          <alias key='&quot;Against Water&quot;' value='Water' />
        </aliases>
        <members>
          <member alias='Dark' value='&quot;Against Dark&quot;' />
          <member alias='Dragon' value='&quot;Against Dragon&quot;' />
          <member alias='Electric' value='&quot;Against Electric&quot;' />
          <member alias='Fairy' value='&quot;Against Fairy&quot;' />
          <member alias='Fighting' value='&quot;Against Fighting&quot;' />
          <member alias='Fire' value='&quot;Against Fire&quot;' />
          <member alias='Flying' value='&quot;Against Flying&quot;' />
          <member alias='Ghost' value='&quot;Against Ghost&quot;' />
          <member alias='Grass' value='&quot;Against Grass&quot;' />
          <member alias='Ground' value='&quot;Against Ground&quot;' />
          <member alias='Ice' value='&quot;Against Ice&quot;' />
          <member alias='Normal' value='&quot;Against Normal&quot;' />
          <member alias='Poison' value='&quot;Against Poison&quot;' />
          <member alias='Psyhic' value='&quot;Against Psyhic&quot;' />
          <member alias='Rock' value='&quot;Against Rock&quot;' />
          <member alias='Steel' value='&quot;Against Steel&quot;' />
          <member alias='Bug' value='&quot;Against Bug&quot;' />
          <member alias='Water' value='&quot;Against Water&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='PokemonKaggle+ (pokemon)' inline='true' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='pokemon' name='excel-direct.07d3o4t18yj9jn1688h4w06spb6v'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Dumbri/Desktop/Pokemon Tableau/pokemon.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='Evolution' table='[Evolution$]' type='table'>
          <columns gridOrigin='A1:E391:no:A1:E391:0' header='yes' outcome='2'>
            <column datatype='string' name='Evolving from' ordinal='0' />
            <column datatype='string' name='Evolving to' ordinal='1' />
            <column datatype='integer' name='Level' ordinal='2' />
            <column datatype='string' name='Condition' ordinal='3' />
            <column datatype='string' name='Evolution Type' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='PokemonKaggle' table='[PokemonKaggle$]' type='table'>
            <columns gridOrigin='A1:AN1034:no:A1:AN1034:0' header='yes' outcome='2'>
              <column datatype='integer' name='pokedex_number' ordinal='0' />
              <column datatype='string' name='name' ordinal='1' />
              <column datatype='integer' name='generation' ordinal='2' />
              <column datatype='string' name='classfication' ordinal='3' />
              <column datatype='string' name='abilities' ordinal='4' />
              <column datatype='real' name='height_m' ordinal='5' />
              <column datatype='real' name='weight_kg' ordinal='6' />
              <column datatype='string' name='type1' ordinal='7' />
              <column datatype='string' name='type2' ordinal='8' />
              <column datatype='integer' name='base_total' ordinal='9' />
              <column datatype='integer' name='hp' ordinal='10' />
              <column datatype='integer' name='attack' ordinal='11' />
              <column datatype='integer' name='defense' ordinal='12' />
              <column datatype='integer' name='sp_attack' ordinal='13' />
              <column datatype='integer' name='sp_defense' ordinal='14' />
              <column datatype='integer' name='speed' ordinal='15' />
              <column datatype='real' name='against_bug' ordinal='16' />
              <column datatype='real' name='against_dark' ordinal='17' />
              <column datatype='real' name='against_dragon' ordinal='18' />
              <column datatype='real' name='against_electric' ordinal='19' />
              <column datatype='real' name='against_fairy' ordinal='20' />
              <column datatype='real' name='against_fighting' ordinal='21' />
              <column datatype='real' name='against_fire' ordinal='22' />
              <column datatype='real' name='against_flying' ordinal='23' />
              <column datatype='real' name='against_ghost' ordinal='24' />
              <column datatype='real' name='against_grass' ordinal='25' />
              <column datatype='real' name='against_ground' ordinal='26' />
              <column datatype='real' name='against_ice' ordinal='27' />
              <column datatype='real' name='against_normal' ordinal='28' />
              <column datatype='real' name='against_poison' ordinal='29' />
              <column datatype='real' name='against_psychic' ordinal='30' />
              <column datatype='real' name='against_rock' ordinal='31' />
              <column datatype='real' name='against_steel' ordinal='32' />
              <column datatype='real' name='against_water' ordinal='33' />
              <column datatype='integer' name='capture_rate' ordinal='34' />
              <column datatype='integer' name='base_egg_steps' ordinal='35' />
              <column datatype='integer' name='base_happiness' ordinal='36' />
              <column datatype='integer' name='is_legendary' ordinal='37' />
              <column datatype='integer' name='is_mythical' ordinal='38' />
              <column datatype='integer' name='is_mega' ordinal='39' />
            </columns>
          </relation>
          <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='Evolution' table='[Evolution$]' type='table'>
            <columns gridOrigin='A1:E391:no:A1:E391:0' header='yes' outcome='2'>
              <column datatype='string' name='Evolving from' ordinal='0' />
              <column datatype='string' name='Evolving to' ordinal='1' />
              <column datatype='integer' name='Level' ordinal='2' />
              <column datatype='string' name='Condition' ordinal='3' />
              <column datatype='string' name='Evolution Type' ordinal='4' />
            </columns>
          </relation>
          <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='Moves' table='[Moves$]' type='table'>
            <columns gridOrigin='A1:I608:no:A1:I608:0' header='yes' outcome='2'>
              <column datatype='string' name='Name' ordinal='0' />
              <column datatype='string' name='Type' ordinal='1' />
              <column datatype='string' name='Cat.' ordinal='2' />
              <column datatype='integer' name='Power' ordinal='3' />
              <column datatype='string' name='Acc.' ordinal='4' />
              <column datatype='integer' name='PP' ordinal='5' />
              <column datatype='string' name='TM' ordinal='6' />
              <column datatype='string' name='Effect' ordinal='7' />
              <column datatype='integer' name='Prob. (%)' ordinal='8' />
            </columns>
          </relation>
          <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='TypeChart' table='[TypeChart$]' type='table'>
            <columns gridOrigin='A1:D325:no:A1:D325:0' header='yes' outcome='6'>
              <column datatype='string' name='Attack' ordinal='0' />
              <column datatype='string' name='Defense' ordinal='1' />
              <column datatype='string' name='Effectiveness' ordinal='2' />
              <column datatype='real' name='Multiplier' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:AN1034:no:A1:AN1034:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Evolution]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E391:no:A1:E391:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Moves]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:I608:no:A1:I608:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[TypeChart]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D325:no:A1:D325:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pokedex_number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[pokedex_number]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>pokedex_number</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>name</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>generation</remote-name>
            <remote-type>20</remote-type>
            <local-name>[generation]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>generation</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>classfication</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classfication]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>classfication</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>abilities</remote-name>
            <remote-type>130</remote-type>
            <local-name>[abilities]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>abilities</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>height_m</remote-name>
            <remote-type>5</remote-type>
            <local-name>[height_m]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>height_m</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weight_kg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[weight_kg]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>weight_kg</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type1]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>type1</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type2]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>type2</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>base_total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[base_total]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>base_total</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[hp]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>hp</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>attack</remote-name>
            <remote-type>20</remote-type>
            <local-name>[attack]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>attack</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>defense</remote-name>
            <remote-type>20</remote-type>
            <local-name>[defense]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>defense</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sp_attack</remote-name>
            <remote-type>20</remote-type>
            <local-name>[sp_attack]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>sp_attack</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sp_defense</remote-name>
            <remote-type>20</remote-type>
            <local-name>[sp_defense]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>sp_defense</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>speed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[speed]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>speed</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_bug</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_bug]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_bug</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_dark</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_dark]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_dark</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_dragon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_dragon]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_dragon</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_electric</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_electric]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_electric</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_fairy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_fairy]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_fairy</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_fighting</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_fighting]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_fighting</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_fire</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_fire]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_fire</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_flying</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_flying]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_flying</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_ghost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_ghost]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_ghost</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_grass</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_grass]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_grass</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_ground</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_ground]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_ground</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_ice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_ice]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_ice</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_normal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_normal]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_normal</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_poison</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_poison]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_poison</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_psychic</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_psychic]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_psychic</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_rock</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_rock]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_rock</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_steel</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_steel]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_steel</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>against_water</remote-name>
            <remote-type>5</remote-type>
            <local-name>[against_water]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>against_water</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>capture_rate</remote-name>
            <remote-type>20</remote-type>
            <local-name>[capture_rate]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>capture_rate</remote-alias>
            <ordinal>34</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>base_egg_steps</remote-name>
            <remote-type>20</remote-type>
            <local-name>[base_egg_steps]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>base_egg_steps</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>base_happiness</remote-name>
            <remote-type>20</remote-type>
            <local-name>[base_happiness]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>base_happiness</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_legendary</remote-name>
            <remote-type>20</remote-type>
            <local-name>[is_legendary]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>is_legendary</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_mythical</remote-name>
            <remote-type>20</remote-type>
            <local-name>[is_mythical]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>is_mythical</remote-alias>
            <ordinal>38</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_mega</remote-name>
            <remote-type>20</remote-type>
            <local-name>[is_mega]</local-name>
            <parent-name>[PokemonKaggle]</parent-name>
            <remote-alias>is_mega</remote-alias>
            <ordinal>39</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Evolving from</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Evolving from]</local-name>
            <parent-name>[Evolution]</parent-name>
            <remote-alias>Evolving from</remote-alias>
            <ordinal>40</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Evolution_E8409251CCD0417485CDFE45F288091D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Evolving to</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Evolving to]</local-name>
            <parent-name>[Evolution]</parent-name>
            <remote-alias>Evolving to</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Evolution_E8409251CCD0417485CDFE45F288091D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Level</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Level]</local-name>
            <parent-name>[Evolution]</parent-name>
            <remote-alias>Level</remote-alias>
            <ordinal>42</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Evolution_E8409251CCD0417485CDFE45F288091D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Condition</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Condition]</local-name>
            <parent-name>[Evolution]</parent-name>
            <remote-alias>Condition</remote-alias>
            <ordinal>43</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Evolution_E8409251CCD0417485CDFE45F288091D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Evolution Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Evolution Type]</local-name>
            <parent-name>[Evolution]</parent-name>
            <remote-alias>Evolution Type</remote-alias>
            <ordinal>44</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Evolution_E8409251CCD0417485CDFE45F288091D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Name]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Name</remote-alias>
            <ordinal>45</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Type]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Type</remote-alias>
            <ordinal>46</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cat.</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Cat.]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Cat.</remote-alias>
            <ordinal>47</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Power</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Power]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Power</remote-alias>
            <ordinal>48</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Acc.</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Acc.]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Acc.</remote-alias>
            <ordinal>49</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PP]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>PP</remote-alias>
            <ordinal>50</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TM</remote-name>
            <remote-type>130</remote-type>
            <local-name>[TM]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>TM</remote-alias>
            <ordinal>51</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Effect</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Effect]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Effect</remote-alias>
            <ordinal>52</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prob. (%)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Prob. (%)]</local-name>
            <parent-name>[Moves]</parent-name>
            <remote-alias>Prob. (%)</remote-alias>
            <ordinal>53</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Attack</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Attack]</local-name>
            <parent-name>[TypeChart]</parent-name>
            <remote-alias>Attack</remote-alias>
            <ordinal>54</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TypeChart_5B56C448A809435FB99409AD19A20FFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Defense</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Defense]</local-name>
            <parent-name>[TypeChart]</parent-name>
            <remote-alias>Defense</remote-alias>
            <ordinal>55</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TypeChart_5B56C448A809435FB99409AD19A20FFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Effectiveness</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Effectiveness]</local-name>
            <parent-name>[TypeChart]</parent-name>
            <remote-alias>Effectiveness</remote-alias>
            <ordinal>56</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TypeChart_5B56C448A809435FB99409AD19A20FFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multiplier</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Multiplier]</local-name>
            <parent-name>[TypeChart]</parent-name>
            <remote-alias>Multiplier</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TypeChart_5B56C448A809435FB99409AD19A20FFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Attack1' datatype='string' name='[Attack]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ZN(SUM([attack])) - LOOKUP(ZN(SUM([attack])), -1)'>
          <table-calc ordering-type='Columns' />
        </calculation>
      </column>
      <column datatype='integer' name='[Calculation2]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ZN(COUNTD([name])) - LOOKUP(ZN(COUNTD([name])), -1)'>
          <table-calc ordering-type='Columns' />
        </calculation>
      </column>
      <column caption='IMC' datatype='real' name='[Calculation_172262733980717056]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[weight_kg] / POWER([height_m], 2)' />
      </column>
      <column caption='Calculation3' datatype='real' name='[Calculation_172262734025482244]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;BUG&quot; THEN [against_bug]&#13;&#10;WHEN &quot;DARK&quot; THEN [against_dark]&#13;&#10;WHEN &quot;NORMAL&quot; THEN [against_normal]&#13;&#10;WHEN &quot;STEEL&quot; THEN [against_steel]&#13;&#10;WHEN &quot;ICE&quot; THEN [against_ice]&#13;&#10;WHEN &quot;FLYING&quot; THEN [against_flying]&#13;&#10;WHEN &quot;GHOST&quot; THEN [against_ghost]&#13;&#10;WHEN &quot;DRAGON&quot; THEN [against_dragon]&#13;&#10;WHEN &quot;WATER&quot; THEN [against_water]&#13;&#10;WHEN &quot;GRASS&quot; THEN [against_grass]&#13;&#10;WHEN &quot;FAIRY&quot; THEN [against_fairy]&#13;&#10;WHEN &quot;POISON&quot; THEN [against_poison]&#13;&#10;WHEN &quot;ELECTRIC&quot; THEN [against_electric]&#13;&#10;WHEN &quot;ROCK&quot; THEN [against_rock]&#13;&#10;WHEN &quot;FIRE&quot; THEN [against_fire]&#13;&#10;WHEN &quot;GROUND&quot; THEN [against_ground]&#13;&#10;WHEN &quot;FIGHTING&quot; THEN [against_fighting]&#13;&#10;WHEN &quot;PSYCHIC&quot; THEN [against_psychic]&#13;&#10;&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Eficienta pokemonului' datatype='integer' name='[Calculation_1842816719652089856]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[attack]+[defense]+[speed]' />
      </column>
      <column caption='against total' datatype='real' name='[Calculation_1842816719799775248]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[against_bug]+[against_dark]+[against_dragon]+[against_electric]+[against_fairy]+[against_fighting]+[against_fire]+[against_flying]+[against_ghost]+[against_grass]+[against_ground]+[against_rock]+[against_ice]+[against_normal]+[against_poison]+[against_psychic]+[against_steel]+[against_water]' />
      </column>
      <column caption='Defense1' datatype='string' name='[Defense]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Level]' role='measure' type='quantitative' />
      <column datatype='real' name='[Multiplier]' role='measure' type='quantitative' />
      <column caption='Name1' datatype='string' name='[Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[PP]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Power]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Prob. (%)]' role='measure' type='quantitative' />
      <column datatype='string' name='[Type]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Evolution' datatype='table' name='[__tableau_internal_object_id__].[Evolution_E8409251CCD0417485CDFE45F288091D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Moves' datatype='table' name='[__tableau_internal_object_id__].[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='PokemonKaggle' datatype='table' name='[__tableau_internal_object_id__].[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='TypeChart' datatype='table' name='[__tableau_internal_object_id__].[TypeChart_5B56C448A809435FB99409AD19A20FFE]' role='measure' type='quantitative' />
      <column caption='Abilities' datatype='string' name='[abilities]' role='dimension' type='nominal' />
      <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
      <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
      <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
      <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
      <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
      <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
      <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
      <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
      <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
      <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
      <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
      <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
      <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
      <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
      <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
      <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
      <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
      <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
      <column caption='Attack' datatype='integer' default-format='n#,##0;-#,##0' name='[attack]' role='measure' type='quantitative' />
      <column caption='Base Egg Steps' datatype='integer' name='[base_egg_steps]' role='measure' type='quantitative' />
      <column caption='Base Happiness' datatype='integer' name='[base_happiness]' role='measure' type='quantitative' />
      <column caption='Base Total' datatype='integer' default-format='n#,##0;-#,##0' name='[base_total]' role='measure' type='quantitative' />
      <column caption='Capture Rate' datatype='integer' name='[capture_rate]' role='measure' type='quantitative' />
      <column caption='Classfication' datatype='string' name='[classfication]' role='dimension' type='nominal' />
      <column caption='Defense' datatype='integer' default-format='n#,##0;-#,##0' name='[defense]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
      <column caption='Height M' datatype='real' name='[height_m]' role='measure' type='quantitative' />
      <column caption='Hp' datatype='integer' default-format='n#,##0;-#,##0' name='[hp]' role='measure' type='quantitative' />
      <column caption='Is Legendary' datatype='integer' name='[is_legendary]' role='measure' type='quantitative' />
      <column caption='Is Mega' datatype='integer' name='[is_mega]' role='measure' type='quantitative' />
      <column caption='Is Mythical' datatype='integer' name='[is_mythical]' role='measure' type='quantitative' />
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
      <column caption='Pokedex Number' datatype='integer' name='[pokedex_number]' role='dimension' type='ordinal' />
      <column caption='Sp Attack' datatype='integer' name='[sp_attack]' role='measure' type='quantitative' />
      <column caption='Sp Defense' datatype='integer' name='[sp_defense]' role='measure' type='quantitative' />
      <column caption='Speed' datatype='integer' name='[speed]' role='measure' type='quantitative' />
      <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
      <column caption='Type2' datatype='string' name='[type2]' role='dimension' type='nominal' />
      <column caption='Weight Kg' datatype='real' name='[weight_kg]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[Evolution_E8409251CCD0417485CDFE45F288091D]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Evolution_E8409251CCD0417485CDFE45F288091D:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[PokemonKaggle_458F4924723D4193A71083A7C4FD713E]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:PokemonKaggle_458F4924723D4193A71083A7C4FD713E:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[TypeChart_5B56C448A809435FB99409AD19A20FFE]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:TypeChart_5B56C448A809435FB99409AD19A20FFE:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Power]' derivation='Avg' name='[avg:Power:qk]' pivot='key' type='quantitative' />
      <column-instance column='[base_total]' derivation='Avg' name='[avg:base_total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Power]' derivation='Sum' name='[cum:sum:Power:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' ordering-type='ColumnInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[cum:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='ColumnInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[diff:sum:Power:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='ColumnInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[diff:sum:Power:qk:4]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[diff:sum:Power:qk:6]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='PaneCol' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[diff:sum:Power:qk:7]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Pane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[diff:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
      <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
      <column-instance column='[Power]' derivation='Sum' name='[pcdf:sum:Power:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Pane' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcdf:sum:Power:qk:3]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Pane' type='PctDiff'>
          <address>
            <value>1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcdf:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='ColumnInPane' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcto:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcva:sum:Power:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='PaneCol' type='PctValue'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcva:sum:Power:qk:3]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='PctValue'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcva:sum:Power:qk:4]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='' ordering-type='Field' type='PctValue'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcva:sum:Power:qk:5]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='ColumnInPane' type='PctValue'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[pcva:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Pane' type='PctValue'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[rank:sum:Power:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' rank-options='Competition,Ascending' type='Rank' />
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[rank:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='ColumnInPane' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[Calculation_1842816719652089856]' derivation='Sum' name='[sum:Calculation_1842816719652089856:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Level]' derivation='Sum' name='[sum:Level:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multiplier]' derivation='Sum' name='[sum:Multiplier:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PP]' derivation='Sum' name='[sum:PP:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Power]' derivation='Sum' name='[sum:Power:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Prob. (%)]' derivation='Sum' name='[sum:Prob. (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_bug]' derivation='Sum' name='[sum:against_bug:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_dark]' derivation='Sum' name='[sum:against_dark:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_dragon]' derivation='Sum' name='[sum:against_dragon:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_electric]' derivation='Sum' name='[sum:against_electric:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_fairy]' derivation='Sum' name='[sum:against_fairy:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_fighting]' derivation='Sum' name='[sum:against_fighting:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_fire]' derivation='Sum' name='[sum:against_fire:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_flying]' derivation='Sum' name='[sum:against_flying:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_ghost]' derivation='Sum' name='[sum:against_ghost:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_grass]' derivation='Sum' name='[sum:against_grass:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_ground]' derivation='Sum' name='[sum:against_ground:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_ice]' derivation='Sum' name='[sum:against_ice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_normal]' derivation='Sum' name='[sum:against_normal:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_poison]' derivation='Sum' name='[sum:against_poison:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_psychic]' derivation='Sum' name='[sum:against_psychic:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_rock]' derivation='Sum' name='[sum:against_rock:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_steel]' derivation='Sum' name='[sum:against_steel:qk]' pivot='key' type='quantitative' />
      <column-instance column='[against_water]' derivation='Sum' name='[sum:against_water:qk]' pivot='key' type='quantitative' />
      <column-instance column='[attack]' derivation='Sum' name='[sum:attack:qk]' pivot='key' type='quantitative' />
      <column-instance column='[base_egg_steps]' derivation='Sum' name='[sum:base_egg_steps:qk]' pivot='key' type='quantitative' />
      <column-instance column='[base_happiness]' derivation='Sum' name='[sum:base_happiness:qk]' pivot='key' type='quantitative' />
      <column-instance column='[base_total]' derivation='Sum' name='[sum:base_total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[capture_rate]' derivation='Sum' name='[sum:capture_rate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[defense]' derivation='Sum' name='[sum:defense:qk]' pivot='key' type='quantitative' />
      <column-instance column='[generation]' derivation='Sum' name='[sum:generation:qk]' pivot='key' type='quantitative' />
      <column-instance column='[height_m]' derivation='Sum' name='[sum:height_m:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hp]' derivation='Sum' name='[sum:hp:qk]' pivot='key' type='quantitative' />
      <column-instance column='[is_legendary]' derivation='Sum' name='[sum:is_legendary:qk]' pivot='key' type='quantitative' />
      <column-instance column='[is_mega]' derivation='Sum' name='[sum:is_mega:qk]' pivot='key' type='quantitative' />
      <column-instance column='[is_mythical]' derivation='Sum' name='[sum:is_mythical:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sp_attack]' derivation='Sum' name='[sum:sp_attack:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sp_defense]' derivation='Sum' name='[sum:sp_defense:qk]' pivot='key' type='quantitative' />
      <column-instance column='[speed]' derivation='Sum' name='[sum:speed:qk]' pivot='key' type='quantitative' />
      <column-instance column='[weight_kg]' derivation='Sum' name='[sum:weight_kg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' />
      </column-instance>
      <column-instance column='[Power]' derivation='Sum' name='[win:sum:Power:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' from='-2' ordering-type='ColumnInPane' to='0' type='WindowTotal' window-options='IncludeCurrent' />
      </column-instance>
      <group caption='Action (Generation,Type1)' hidden='true' name='[Action (Generation,Type1)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[generation]' />
          <groupfilter function='level-members' level='[type1]' />
        </groupfilter>
      </group>
      <group caption='Action (Name)' hidden='true' name='[Action (Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[name]' />
        </groupfilter>
      </group>
      <group caption='Action (Name,Type1)' hidden='true' name='[Action (Name,Type1)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[name]' />
          <groupfilter function='level-members' level='[type1]' />
        </groupfilter>
      </group>
      <group caption='Action (Type)' hidden='true' name='[Action (Type)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Type]' />
        </groupfilter>
      </group>
      <group caption='Action (Type1)' hidden='true' name='[Action (Type1)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[type1]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Aegislash Shield Forme&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Alolan Rattata&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Arctovish&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Barraskewda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Blacephalon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Buizel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Castform Rainy Form&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chimchar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Comfey&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Crustle&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Delphox&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dracozolt&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dunsparce&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Electrode&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fearow&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fraxure&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Galarian Zen Mode Darmanitan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gliscor&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Graveler&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hatenna&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Honedge&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ivysaur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kingler&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Landorus Incarnate Forme&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Litten&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Magcargo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marill&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mega Camerupt&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mega Metagross&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Meltan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Minior Meteor Form&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Murkrow&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Numel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Palpitoad&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Pidgeot&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Poochyena&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Quilladin&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Reuniclus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Salazzle&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seedot&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Shroomish&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Skwovet&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Solgaleo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Steelix&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Swoobat&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thwackey&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tranquill&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Unfezant&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vikavolt&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Whimsicott&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Xurkitree&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zubat&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot; Lycanroc Dusk Form&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Alolan Grimer&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Appletun&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Azelf&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bellossom&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Braixen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Camerupt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Charmeleon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cleffa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cradily&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Darumaka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Diglett&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Drifloon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eevee&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eternatus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fletchling&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Galarian Linoone&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gible&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gorebyss&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gulpin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Herdier&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Illumise&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kakuna&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kricketune&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lickilicky&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lurantis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mandibuzz&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mega Alakazam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mega Kangaskhan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mega Steelix&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mightyena&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mr. Mime&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nihilego&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oricorio Pom-Pom Style&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Perrserker&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Plusle&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pumpkaboo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Regidrago&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Roserade&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Scolipede&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Shelgon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sizzlipede&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sneasler&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Squirtle&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Swablu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tentacool&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Torterra&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Type: Null&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Venomoth&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Walrein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wooloo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Zapdos&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Abra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Alolan Ninetales&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Arcanine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Baltoy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bibarel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bronzong&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Carracosta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chesnaught&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cobalion&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cresselia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Deerling&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Donphan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Druddigon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eldegoss&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Exploud&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Flygon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Galarian Standard Mode Darmanitan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Glalie&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gothorita&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gyarados&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hitmonlee&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Indeedee Male&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kecleon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kyogre&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lilligant&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Machamp&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mantyke&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mega Banette&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mega Lucario&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Meganium&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mime Jr.&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mudsdale&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Noctowl&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Overqwil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Phantump&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Poliwhirl&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pyroar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Registeel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Runerigus&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scyther&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Shieldon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Skitty&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Snorunt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Staravia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Swanna&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Thievul&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Toxel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tyrogue&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vibrava&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Weavile&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wynaut&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zeraora&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Alakazam&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Alomomola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aromatisse&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Basculin Red-Striped Form&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Blipbug&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burmy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Celebi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cinccino&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Corsola&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cufant&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;DeoxysAttack Forme&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dragonite&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dusclops&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Emolga&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ferroseed&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Froslass&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Garbodor&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Goldeen&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grimmsnarl&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hawlucha&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hoppip&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jirachi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Klefki&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Larvesta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lotad&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Magmortar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Masquerain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mega Gallade&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mega Pinsir&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mesprit&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Moltres&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Necrozma&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Oddish&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pansage&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pignite&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Porygon-Z&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Raikou&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ribombee&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sandshrew&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Serperior&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Silcoon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slowbro&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spectrier&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Stufful&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tangela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Togekiss&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tropius&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Urshifu Single Strike Style&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Volbeat&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;White Kyurem&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yanmega&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Zygarde Complete Forme&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Aerodactyl&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Alolan Sandshrew&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Arctozolt&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Basculegion female&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Black Kyurem&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bulbasaur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Castform Snowy Form&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chimecho&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Conkeldurr&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cryogonal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Deoxys Defense Forme&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dragalge&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Duosion&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Elekid&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Feebas&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Frillish&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Galarian Zigzagoon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gloom&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greedent&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hatterene&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hoopa Confined&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jangmo-o&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kirlia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Landorus Therian Forme&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Litwick&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Magearna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marowak&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mega Charizard X&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mega Mewtwo X&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Meowstic Female&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Minun&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Musharna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nuzleaf&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pancham&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pidgeotto&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Popplio&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qwilfish&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rhydon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samurott&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Seel&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Shuckle&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slaking&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Solosis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Steenee&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sylveon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timburr&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trapinch&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Unown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vileplume&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Whirlipede&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yamask&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zweilous&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Absol&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Alolan Persian&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Arceus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Banette&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bidoof&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bronzor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carvanha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chespin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cofagrigus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Croagunk&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Deino&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dottler&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dubwool&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Electabuzz&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Falinks&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Fomantis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Galarian Stunfisk&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Glameow&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gourgeist&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hakamo-o&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hitmontop&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Infernape&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Keldeo Ordinary Forme&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kyurem&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lillipup&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Machoke&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maractus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mega Beedrill&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mega Manectric&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Melmetal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mimikyu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Muk&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Noibat&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pachirisu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pheromosa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poliwrath&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pyukumuku&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Relicanth&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sableye&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Seadra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Shiftry&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Skorupi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Snover&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Starly&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Swellow&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Throh&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Toxicroak&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tyrunt&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Victini&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Weedle&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wyrdeer&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zigzagoon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Alolan Golem&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ampharos&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Avalugg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Beheeyem&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bouffalant&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Calyrex Ice Rider&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Charjabug&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Clefable&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Crabominable&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Darmanitan Zen Mode&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Diancie&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dreepy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eelektrik&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Espeon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Flareon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Galarian Corsola&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gengar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Goodra&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grubbin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Helioptile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hypno&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kabutops&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Krabby&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ledian&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lunala&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mamoswine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mega Aerodactyl&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mega Heracross&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mega Sharpedo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mienfoo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mothim&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nidorina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oricorio Baile Style&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pawniard&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pinsir&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Probopass&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rayquaza&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rookidee&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sceptile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shaymin Sky Forme&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sinistea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Smoochum&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Spoink&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sunkern&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tauros&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tornadus Therian Forme&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tympole&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vaporeon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wailmer&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wobbuffet&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ZamazentaCrowned Shield&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot; Lycanroc Midday Form&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alolan Marowak&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Applin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Azumarill&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bellsprout&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Braviary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Carbink&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chatot&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Clobbopus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cramorant&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dawn Wings Necrozma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ditto&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Drilbur&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eiscue Ice Face&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Excadrill&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Floatzel&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Galarian Ponyta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gigalith&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gossifleur&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gumshoos&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hippopotas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Impidimp&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kangaskhan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Krokorok&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lickitung&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Luvdisc&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Manectric&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mega Altaria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mega Latias&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mega Swampert&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Milcery&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mr. Rime&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nincada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oricorio Sensu Style&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Persian&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poipole&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pupitar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Regieleki&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rotom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Scorbunny&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Shellder&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Skarmory&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Snivy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Stakataka&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swadloon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tentacruel&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Totodile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Typhlosion&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venonat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wartortle&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wooper&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Zarude&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Alolan Exeggutor&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ambipom&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Audino&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Beautifly&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Boltund&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cacturne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chansey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Clawitzer&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cosmog&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Darkrai&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dhelmise&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dratini&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dustox&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Entei&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Flabebe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Furret&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gastrodon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Golisopod&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Grovyle&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Heatran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Huntail&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jynx&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Komala&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Leafeon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lugia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Makuhita&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mega Abomasnow&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mega Glalie&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mega Sceptile&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mew&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Morpeko Full Belly Mode&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nidorana female&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oranguru&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Passimian&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pincurchin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Primeape&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Raticate&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Roggenrola&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sawsbuck&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sharpedo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Simisage&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Slurpuff&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Spinda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Suicune&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tapu Koko&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Torkoal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turtonator&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vanillite&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vullaby&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Wishiwashi School Form&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zacian Hero of Many Battles&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Accelgor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Alolan Raichu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Archen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Barbaracle&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Binacle&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bruxish&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cascoon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chewtle&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Combee&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Crobat&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Delcatty&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Doublade&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ducklett&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Electivire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fan Rotom&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Foongus&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Galarian Weezing&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Glastrier&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Granbull&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Happiny&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ho-oh&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Inkay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Keldeo Resolute Forme&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lairon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Linoone&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Machop&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mareanie&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mega Blastoise&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mega Mawile&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Meloetta Aria Forme&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Minccino&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Munchlax&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Noivern&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Palkia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Phione&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Polteageist&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Quagsire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Remoraid&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Salamence&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Seaking&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Shiinotic&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Skrelp&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Snubbull&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Starmie&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Swinub&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Thudurus Incarnate Forme&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Toxtricity Amped Form&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ultra Necrozma&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Victreebel&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Weepinbell&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Xatu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zoroark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Alcremie&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Altaria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Aron&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bastiodon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Blissey&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Butterfree&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Celesteela&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cinderace&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Corviknight&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cursola&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dewgong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Drakloak&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dusk Mane Necrozma&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Empoleon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ferrothorn&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Frosmoth&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Garchomp&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Golduck&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Grookey&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Haxorus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Horsea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jolteon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Klink&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Larvitar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Loudred&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Magnemite&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mawile&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mega Garchomp&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mega Rayquaza&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Metagross&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Monferno&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nickit&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Omanyte&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pansear&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pikachu&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Primal Groudon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ralts&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rillaboom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sandslash&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Servine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Silicobra&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Slowking&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Spewpa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Stunfisk&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tangrowth&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Togepi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trubbish&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Urushifu Rapid Strike Style&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Volcanion&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Wigglytuff&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yungoos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Alolan Diglett&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Altered Forme Giratina&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Arrokuda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bayleef&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Blitzle&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Buzzwole&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Centiskorch&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Clamperl&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Corvisquire&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cutiefly&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dewott&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Drampa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dusknoir&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Enamorus Incarnate Forme&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Finneon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Frost Rotom&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gardevoir&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Golem&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Grotle&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Heat Rotom&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Houndoom&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Joltik&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Klinklang&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latias&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lucario&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Magneton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Medicham&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mega Gardevoir&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mega Sableye&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Metang&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Morelull&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nidoking&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Omastar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Paras&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pikipek&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Primal Kyogre&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rampardos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Riolu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sandygast&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Seviper&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Silvally&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Slowpoke&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Spheal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Stunky&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tapu Bulu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Togetic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trumbeak&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uxie&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Volcarona&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Wimpod&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yveltal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Alolan Geodude&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Amoonguss&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Aurorus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Beedrill&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bonsly&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Calyrex&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Charizard&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Claydol&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cottonee&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Darmanitan Standard Mode&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dialga&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Drednaw&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dwebble&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Escavalier&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Flapple&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gabite&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Genesect&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Golurk&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Growlithe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Heliolisk&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hydreigon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kabuto&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kommo-o&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Leavanny&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lumineon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malamar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mega Absol&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mega Gyarados&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mega Scizor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mewtwo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Morpeko Hangry Mode&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nidorana male&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Orbeetle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Patrat&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pineco&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Prinplup&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rattata&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rolycoly&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Scatterbug&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Shaymin Land Forme&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Simisear&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Smeargle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Spiritomb&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sunflora&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tapu Lele&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tornadus Incarnate Forme&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turtwig&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vanilluxe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vulpix&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;WishiwashiSolo Form&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zamazenta Hero of Many Battles&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Alolan Graveler&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Anorith&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Axew&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Beldum&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bounsweet&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Calyrex Shadow Rider&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Charmander&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Clefairy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Crabrawler&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dartrix&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Diggersby&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Drifblim&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Eelektross&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Espurr&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fletchinder&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Galarian Darumaka&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Geodude&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Goomy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Grumpig&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Heracross&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Igglybuff&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kadabra&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kricketot&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ledyba&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lunatone&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Manaphy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mega Aggron&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mega Houndoom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mega Slowbro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mienshao&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mow Rotom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nidorino&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oricorio Pa&apos;u Style&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pelipper&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Piplup&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Psyduck&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Regice&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Roselia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scizor&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Shedinja&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sirfetch&apos;d&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sneasel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spritzee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Surskit&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Teddiursa&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Torracat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tynamo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Venipede&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wailord&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Woobat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zangoose&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aggron&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Alolan Sandslash&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ariados&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Basculegion male&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Blastoise&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Buneary&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Castform Sunny Form&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chinchou&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Copperajah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cubchoo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Deoxys Normal Forme&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dragapult&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Duraludon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Elgyem&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fennekin&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Froakie&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gallade&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gogoat&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greninja&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hattrem&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hoopa Unbound&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jellicent&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Klang&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lanturn&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lombre&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Magikarp&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marshadow&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mega Charizard Y&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mega Mewtwo Y&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Meowstic Male&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Misdreavus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Naganadel&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Obstagoon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pangoro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pidgey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Porygon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Raboot&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rhyhorn&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sandaconda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Seismitoad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shuppet&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Slakoth&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Solrock&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Stonjourner&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Taillow&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tirtouga&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Treecko&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ursaluna&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Virizion&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Whiscash&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yamper&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zygarde 10\% Forme&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Aegislash Blade Forme&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Alolan Raticate&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Archeops&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Barboach&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bisharp&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Budew&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Castform&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chikorita&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Combusken&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croconaw&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Delibird&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dracovish&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dugtrio&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Electrike&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Farfetch&apos;d&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Forretress&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Galarian Yamask&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gligar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Grapploct&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hariyama&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Honchkrow&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Inteleon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kingdra&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lampent&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Litleo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Magby&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mareep&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mega Blaziken&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mega Medicham&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Meloetta Pirouette Forme&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Minior Core Form&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Munna&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nosepass&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Palossand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pichu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ponyta&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Quilava&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Reshiram&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Salandit&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sealeo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shinx&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Skuntank&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sobble&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Staryu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Swirlix&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Thundurus Therian Forme&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Toxtricity Low Key Form&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Umbreon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vigoroth&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Weezing&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Xerneas&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zorua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot; Lycanroc Midnight Form&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Alolan Meowth&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Araquanid&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Azurill&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bergmite&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Breloom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Carkol&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cherrim&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cloyster&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cranidos&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Decidueye&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dodrio&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Drizzile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Eiscue No Ice Face&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Exeggcute&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Floette&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Galarian Rapidash&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Girafarig&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gothita&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gurdurr&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hippowdon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Incineroar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Karrablast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Krookodile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liepard&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxio&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mankey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mega Ampharos&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mega Latios&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mega Tyranitar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Milotic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mudbray&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ninetales&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Origin Forme Giratina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Petilil&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Politoed&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Purrloin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Regigigas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rowlet&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Scrafty&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Shellos&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Skiddo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Snom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Stantler&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Swalot&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tepig&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Toucannon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tyranitar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Venusaur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wash Rotom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wormadam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Zebstrika&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Alolan Dugtrio&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Amaura&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Articuno&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Beartic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Boldore&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cacnea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chandelure&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Clauncher&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cosmoem&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyndaquil&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dewpider&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Drapion&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Duskull&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Enamorus Therian Forme&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Flaaffy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Furfrou&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gastly&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Golett&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Groudon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Heatmor&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Houndour&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jumpluff&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Koffing&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latios&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ludicolo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Magnezone&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Meditite&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mega Gengar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mega Salamence&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Metapod&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Morgrem&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nidoqueen&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Onix&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Parasect&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Piloswine&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Primarina&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rapidash&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rockruff&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sawk&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sewaddle&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Simipour&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Slugma&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Spinarak&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sudowoodo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tapu Fini&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Torchic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tsareena&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vanillish&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Voltorb&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Wingull&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zacian Crowned Sword&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aipom&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Alolan Vulpix&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armaldo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Basculin Blue-Striped Form&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Blaziken&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bunnelby&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Caterpie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chingling&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Corphish&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cubone&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Deoxys Speed Forme&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dragonair&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Durant&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Emboar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Feraligatr&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Frogadier&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Galvantula&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Golbat&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grimer&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Haunter&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hoothoot&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jigglypuff&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kleavor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lapras&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lopunny&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Magmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Marshtomp&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mega Diancie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mega Pidgeot&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Meowth&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mismagius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Natu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Octillery&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Panpour&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pidove&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Porygon2&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Raichu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rhyperior&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sandile&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sentret&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sigilyph&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sliggoo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spearow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stoutland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Talonflame&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Togedemaru&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Trevenant&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ursaring&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vivillon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Whismur&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yanma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zygarde 50\% Forme&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Abomasnow&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Alolan Muk&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Arbok&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bagon&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bewear&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brionne&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Carnivine&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cherubi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Coalossal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Crawdaunt&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dedenne&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Doduo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Drowzee&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ekans&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Exeggutor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Florges&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Galarian Slowpoke&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Glaceon&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gothitelle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guzzlord&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hitmonchan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Indeedee Female&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kartana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kubfu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lileep&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Luxray&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mantine&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mega Audino&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mega Lopunny&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mega Venusaur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Miltank&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mudkip&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ninjask&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oshawott&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Phanpy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Poliwag&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Purugly&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Regirock&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rufflet&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Scraggy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Shelmet&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Skiploom&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Snorlax&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Staraptor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Swampert&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Terrakion&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Toxapex&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tyrantrum&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Vespiquen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Watchog&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Wurmple&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Zekrom&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ghost:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:defense:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_bug:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_happiness:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Prob. (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[__tableau_internal_object_id__].[cnt:Evolution_E8409251CCD0417485CDFE45F288091D:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fairy:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:weight_kg:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_normal:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:hp:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_grass:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_1842816719652089856:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[__tableau_internal_object_id__].[cnt:Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fighting:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:attack:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_dark:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_total:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:sp_attack:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_steel:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Level:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[__tableau_internal_object_id__].[cnt:PokemonKaggle_458F4924723D4193A71083A7C4FD713E:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fire:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_poison:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:is_legendary:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_psychic:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:is_mega:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_water:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Multiplier:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cum:sum:Power:qk:2]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cum:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:sum:Power:qk:2]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:sum:Power:qk:4]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:sum:Power:qk:6]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:sum:Power:qk:7]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcdf:sum:Power:qk:2]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcdf:sum:Power:qk:3]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcdf:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcto:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcva:sum:Power:qk:2]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcva:sum:Power:qk:3]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcva:sum:Power:qk:4]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcva:sum:Power:qk:5]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcva:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[rank:sum:Power:qk:2]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[rank:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_egg_steps:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[win:sum:Power:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ground:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:generation:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[__tableau_internal_object_id__].[cnt:TypeChart_5B56C448A809435FB99409AD19A20FFE:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_flying:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_dragon:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:sp_defense:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[usr:Calculation1:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_rock:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:is_mythical:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ice:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:height_m:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_electric:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:capture_rate:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:speed:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:type1:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;GHOST&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;BUG&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;FAIRY&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;NORMAL&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;GRASS&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;FIGHTING&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;DARK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;STEEL&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;FIRE&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;POISON&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;PSYCHIC&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;WATER&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;GROUND&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;FLYING&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;DRAGON&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;ROCK&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ICE&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;ELECTRIC&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
          <calculation class='tableau' formula='&quot;WATER&quot;' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Evolution' id='Evolution_E8409251CCD0417485CDFE45F288091D'>
            <properties context=''>
              <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='Evolution' table='[Evolution$]' type='table'>
                <columns gridOrigin='A1:E391:no:A1:E391:0' header='yes' outcome='2'>
                  <column datatype='string' name='Evolving from' ordinal='0' />
                  <column datatype='string' name='Evolving to' ordinal='1' />
                  <column datatype='integer' name='Level' ordinal='2' />
                  <column datatype='string' name='Condition' ordinal='3' />
                  <column datatype='string' name='Evolution Type' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Moves' id='Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B'>
            <properties context=''>
              <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='Moves' table='[Moves$]' type='table'>
                <columns gridOrigin='A1:I608:no:A1:I608:0' header='yes' outcome='2'>
                  <column datatype='string' name='Name' ordinal='0' />
                  <column datatype='string' name='Type' ordinal='1' />
                  <column datatype='string' name='Cat.' ordinal='2' />
                  <column datatype='integer' name='Power' ordinal='3' />
                  <column datatype='string' name='Acc.' ordinal='4' />
                  <column datatype='integer' name='PP' ordinal='5' />
                  <column datatype='string' name='TM' ordinal='6' />
                  <column datatype='string' name='Effect' ordinal='7' />
                  <column datatype='integer' name='Prob. (%)' ordinal='8' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='PokemonKaggle' id='PokemonKaggle_458F4924723D4193A71083A7C4FD713E'>
            <properties context=''>
              <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='PokemonKaggle' table='[PokemonKaggle$]' type='table'>
                <columns gridOrigin='A1:AN1034:no:A1:AN1034:0' header='yes' outcome='2'>
                  <column datatype='integer' name='pokedex_number' ordinal='0' />
                  <column datatype='string' name='name' ordinal='1' />
                  <column datatype='integer' name='generation' ordinal='2' />
                  <column datatype='string' name='classfication' ordinal='3' />
                  <column datatype='string' name='abilities' ordinal='4' />
                  <column datatype='real' name='height_m' ordinal='5' />
                  <column datatype='real' name='weight_kg' ordinal='6' />
                  <column datatype='string' name='type1' ordinal='7' />
                  <column datatype='string' name='type2' ordinal='8' />
                  <column datatype='integer' name='base_total' ordinal='9' />
                  <column datatype='integer' name='hp' ordinal='10' />
                  <column datatype='integer' name='attack' ordinal='11' />
                  <column datatype='integer' name='defense' ordinal='12' />
                  <column datatype='integer' name='sp_attack' ordinal='13' />
                  <column datatype='integer' name='sp_defense' ordinal='14' />
                  <column datatype='integer' name='speed' ordinal='15' />
                  <column datatype='real' name='against_bug' ordinal='16' />
                  <column datatype='real' name='against_dark' ordinal='17' />
                  <column datatype='real' name='against_dragon' ordinal='18' />
                  <column datatype='real' name='against_electric' ordinal='19' />
                  <column datatype='real' name='against_fairy' ordinal='20' />
                  <column datatype='real' name='against_fighting' ordinal='21' />
                  <column datatype='real' name='against_fire' ordinal='22' />
                  <column datatype='real' name='against_flying' ordinal='23' />
                  <column datatype='real' name='against_ghost' ordinal='24' />
                  <column datatype='real' name='against_grass' ordinal='25' />
                  <column datatype='real' name='against_ground' ordinal='26' />
                  <column datatype='real' name='against_ice' ordinal='27' />
                  <column datatype='real' name='against_normal' ordinal='28' />
                  <column datatype='real' name='against_poison' ordinal='29' />
                  <column datatype='real' name='against_psychic' ordinal='30' />
                  <column datatype='real' name='against_rock' ordinal='31' />
                  <column datatype='real' name='against_steel' ordinal='32' />
                  <column datatype='real' name='against_water' ordinal='33' />
                  <column datatype='integer' name='capture_rate' ordinal='34' />
                  <column datatype='integer' name='base_egg_steps' ordinal='35' />
                  <column datatype='integer' name='base_happiness' ordinal='36' />
                  <column datatype='integer' name='is_legendary' ordinal='37' />
                  <column datatype='integer' name='is_mythical' ordinal='38' />
                  <column datatype='integer' name='is_mega' ordinal='39' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='TypeChart' id='TypeChart_5B56C448A809435FB99409AD19A20FFE'>
            <properties context=''>
              <relation connection='excel-direct.07d3o4t18yj9jn1688h4w06spb6v' name='TypeChart' table='[TypeChart$]' type='table'>
                <columns gridOrigin='A1:D325:no:A1:D325:0' header='yes' outcome='6'>
                  <column datatype='string' name='Attack' ordinal='0' />
                  <column datatype='string' name='Defense' ordinal='1' />
                  <column datatype='string' name='Effectiveness' ordinal='2' />
                  <column datatype='real' name='Multiplier' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[name]' />
              <expression op='[Evolving from]' />
            </expression>
            <first-end-point object-id='PokemonKaggle_458F4924723D4193A71083A7C4FD713E' />
            <second-end-point object-id='Evolution_E8409251CCD0417485CDFE45F288091D' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[name]' />
              <expression op='[Name]' />
            </expression>
            <first-end-point object-id='PokemonKaggle_458F4924723D4193A71083A7C4FD713E' />
            <second-end-point object-id='Moves_3A0F5370CBD848BE82F38E7A3AA2AA7B' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[type1]' />
              <expression op='[Attack]' />
            </expression>
            <first-end-point object-id='PokemonKaggle_458F4924723D4193A71083A7C4FD713E' />
            <second-end-point object-id='TypeChart_5B56C448A809435FB99409AD19A20FFE' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_3AADE7C2D9DF42A890F69C6A30203F35]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 7' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter1' name='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 6' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter2' name='[Action3_AE22801D31194B338369A29C2F28C700]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 12' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter3' name='[Action7_AC44CE5EBD7D4634ABEBF319606EDD78]'>
      <activation type='on-select' />
      <source dashboard='Dashboard 2 ' type='sheet' worksheet='Sheet 10 (3)' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Sheet 10 (2),Sheet 10 (3)' />
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 2 ' />
      </command>
    </action>
    <action caption='Filter4' name='[Action7_C4008625822943DBA8926A7952F0BE75]'>
      <activation type='on-select' />
      <source dashboard='Dashboard 2 ' type='sheet' worksheet='Sheet 10 (2)' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='Sheet 10 (3)' />
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 2 ' />
      </command>
    </action>
    <edit-parameter-action caption='Parameter1' name='[Action5_E7225FC67D7E48C38A68EA0F69243C4C]'>
      <activation type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' />
      <agg-type type='attr' />
      <_.fcp.ParameterActionClearSelection.true...clear-option type='assign-fixed-value' value='s:LROOT:' />
      <params>
        <param name='target-parameter' value='[Parameters].[Parameter 1]' />
      </params>
    </edit-parameter-action>
    <edit-parameter-action caption='Parameter2' name='[Action6_30083151497E48F280FDC8F725F4CFC1]'>
      <activation type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' worksheet='Sheet 8' />
      <agg-type type='attr' />
      <_.fcp.ParameterActionClearSelection.true...clear-option type='do-nothing' value='s:LROOT:' />
      <params>
        <param name='source-field' value='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]' />
        <param name='target-parameter' value='[Parameters].[Parameter 1]' />
      </params>
    </edit-parameter-action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>How efficient is the Pokemon type compared to other types?</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Attack1' datatype='string' name='[Attack]' role='dimension' type='nominal' />
            <column datatype='real' name='[Multiplier]' role='measure' type='quantitative' />
            <column-instance column='[Multiplier]' derivation='Avg' name='[avg:Multiplier:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Attack]' derivation='None' name='[none:Attack:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:Multiplier:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Attack:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{6FE2A6F8-E0EB-491E-A18C-EF864D4F6874}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'><![CDATA[Which Pokemon are most affected in a battle against an opponent of type <]]></run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>[Parameters].[Parameter 1]</run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>&gt;?</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
              <calculation class='tableau' formula='&quot;WATER&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Calculation3' datatype='real' name='[Calculation_172262734025482244]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;BUG&quot; THEN [against_bug]&#13;&#10;WHEN &quot;DARK&quot; THEN [against_dark]&#13;&#10;WHEN &quot;NORMAL&quot; THEN [against_normal]&#13;&#10;WHEN &quot;STEEL&quot; THEN [against_steel]&#13;&#10;WHEN &quot;ICE&quot; THEN [against_ice]&#13;&#10;WHEN &quot;FLYING&quot; THEN [against_flying]&#13;&#10;WHEN &quot;GHOST&quot; THEN [against_ghost]&#13;&#10;WHEN &quot;DRAGON&quot; THEN [against_dragon]&#13;&#10;WHEN &quot;WATER&quot; THEN [against_water]&#13;&#10;WHEN &quot;GRASS&quot; THEN [against_grass]&#13;&#10;WHEN &quot;FAIRY&quot; THEN [against_fairy]&#13;&#10;WHEN &quot;POISON&quot; THEN [against_poison]&#13;&#10;WHEN &quot;ELECTRIC&quot; THEN [against_electric]&#13;&#10;WHEN &quot;ROCK&quot; THEN [against_rock]&#13;&#10;WHEN &quot;FIRE&quot; THEN [against_fire]&#13;&#10;WHEN &quot;GROUND&quot; THEN [against_ground]&#13;&#10;WHEN &quot;FIGHTING&quot; THEN [against_fighting]&#13;&#10;WHEN &quot;PSYCHIC&quot; THEN [against_psychic]&#13;&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
            <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
            <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
            <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
            <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
            <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
            <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
            <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
            <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
            <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
            <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
            <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
            <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
            <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
            <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
            <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
            <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
            <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_172262734025482244]' derivation='Sum' name='[sum:Calculation_172262734025482244:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
            <groupfilter expression='SUM([Calculation_172262734025482244]) &gt; 1' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='member' level='[none:name:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='979' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{065E1D92-2D77-4935-ADF4-C986C138B7B0}' />
    </worksheet>
    <worksheet name='Sheet 10 (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'><![CDATA[What Pokemon are most effective in a battle against an opponent of type <]]></run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>[Parameters].[Parameter 1]</run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>&gt;?</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
              <calculation class='tableau' formula='&quot;WATER&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Calculation3' datatype='real' name='[Calculation_172262734025482244]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;BUG&quot; THEN [against_bug]&#13;&#10;WHEN &quot;DARK&quot; THEN [against_dark]&#13;&#10;WHEN &quot;NORMAL&quot; THEN [against_normal]&#13;&#10;WHEN &quot;STEEL&quot; THEN [against_steel]&#13;&#10;WHEN &quot;ICE&quot; THEN [against_ice]&#13;&#10;WHEN &quot;FLYING&quot; THEN [against_flying]&#13;&#10;WHEN &quot;GHOST&quot; THEN [against_ghost]&#13;&#10;WHEN &quot;DRAGON&quot; THEN [against_dragon]&#13;&#10;WHEN &quot;WATER&quot; THEN [against_water]&#13;&#10;WHEN &quot;GRASS&quot; THEN [against_grass]&#13;&#10;WHEN &quot;FAIRY&quot; THEN [against_fairy]&#13;&#10;WHEN &quot;POISON&quot; THEN [against_poison]&#13;&#10;WHEN &quot;ELECTRIC&quot; THEN [against_electric]&#13;&#10;WHEN &quot;ROCK&quot; THEN [against_rock]&#13;&#10;WHEN &quot;FIRE&quot; THEN [against_fire]&#13;&#10;WHEN &quot;GROUND&quot; THEN [against_ground]&#13;&#10;WHEN &quot;FIGHTING&quot; THEN [against_fighting]&#13;&#10;WHEN &quot;PSYCHIC&quot; THEN [against_psychic]&#13;&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
            <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
            <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
            <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
            <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
            <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
            <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
            <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
            <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
            <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
            <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
            <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
            <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
            <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
            <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
            <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
            <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
            <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_172262734025482244]' derivation='Sum' name='[sum:Calculation_172262734025482244:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
            <groupfilter expression='SUM([Calculation_172262734025482244]) &lt; 1.000 or sum([Calculation_172262734025482244])=0' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='979' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{ECDAE704-B189-4499-8CE3-2F044C2AA970}' />
    </worksheet>
    <worksheet name='Sheet 10 (3)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'><![CDATA[What Pokemon have 100% resistance against opponents of type <]]></run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>[Parameters].[Parameter 1]</run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>&gt;?</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
              <calculation class='tableau' formula='&quot;WATER&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Calculation3' datatype='real' name='[Calculation_172262734025482244]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;BUG&quot; THEN [against_bug]&#13;&#10;WHEN &quot;DARK&quot; THEN [against_dark]&#13;&#10;WHEN &quot;NORMAL&quot; THEN [against_normal]&#13;&#10;WHEN &quot;STEEL&quot; THEN [against_steel]&#13;&#10;WHEN &quot;ICE&quot; THEN [against_ice]&#13;&#10;WHEN &quot;FLYING&quot; THEN [against_flying]&#13;&#10;WHEN &quot;GHOST&quot; THEN [against_ghost]&#13;&#10;WHEN &quot;DRAGON&quot; THEN [against_dragon]&#13;&#10;WHEN &quot;WATER&quot; THEN [against_water]&#13;&#10;WHEN &quot;GRASS&quot; THEN [against_grass]&#13;&#10;WHEN &quot;FAIRY&quot; THEN [against_fairy]&#13;&#10;WHEN &quot;POISON&quot; THEN [against_poison]&#13;&#10;WHEN &quot;ELECTRIC&quot; THEN [against_electric]&#13;&#10;WHEN &quot;ROCK&quot; THEN [against_rock]&#13;&#10;WHEN &quot;FIRE&quot; THEN [against_fire]&#13;&#10;WHEN &quot;GROUND&quot; THEN [against_ground]&#13;&#10;WHEN &quot;FIGHTING&quot; THEN [against_fighting]&#13;&#10;WHEN &quot;PSYCHIC&quot; THEN [against_psychic]&#13;&#10;&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
            <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
            <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
            <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
            <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
            <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
            <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
            <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
            <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
            <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
            <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
            <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
            <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
            <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
            <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
            <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
            <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
            <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_172262734025482244]' derivation='Sum' name='[sum:Calculation_172262734025482244:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
            <groupfilter expression='sum([Calculation_172262734025482244])=0' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='979' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{8D9DC639-7929-4D17-AF5C-8055E3406C1F}' />
    </worksheet>
    <worksheet name='Sheet 11'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Pokemon with the highest values for Base Total, Defense, HP, and Attack, with selectable filters.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Parameter 3-Base total' datatype='integer' name='[Parameter 2-HP (copy)_172262734001377281]' param-domain-type='range' role='measure' type='quantitative' value='175'>
              <calculation class='tableau' formula='175' />
              <range max='780' min='175' />
            </column>
            <column caption='Parameter 2-HP' datatype='integer' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='1'>
              <calculation class='tableau' formula='1' />
              <range max='255' min='1' />
            </column>
            <column caption='Parameter 5-defense' datatype='integer' name='[Parameter 3-Base total (copy) (copy)_172262734001598467]' param-domain-type='range' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <range max='230' min='5' />
            </column>
            <column caption='Parameter 4-attack' datatype='integer' name='[Parameter 3-Base total (copy)_172262734001582082]' param-domain-type='range' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
              <range max='190' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Attack' datatype='integer' default-format='n#,##0;-#,##0' name='[attack]' role='measure' type='quantitative' />
            <column caption='Base Total' datatype='integer' default-format='n#,##0;-#,##0' name='[base_total]' role='measure' type='quantitative' />
            <column caption='Defense' datatype='integer' default-format='n#,##0;-#,##0' name='[defense]' role='measure' type='quantitative' />
            <column caption='Hp' datatype='integer' default-format='n#,##0;-#,##0' name='[hp]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[attack]' derivation='Sum' name='[sum:attack:qk]' pivot='key' type='quantitative' />
            <column-instance column='[base_total]' derivation='Sum' name='[sum:base_total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[defense]' derivation='Sum' name='[sum:defense:qk]' pivot='key' type='quantitative' />
            <column-instance column='[hp]' derivation='Sum' name='[sum:hp:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_total:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:defense:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:hp:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:attack:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_total:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:defense:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:hp:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:attack:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
            <groupfilter expression='SUM([hp]) &gt;=[Parameters].[Parameter 2] and &#13;&#10;sum([base_total])&gt;=[Parameters].[Parameter 2-HP (copy)_172262734001377281]&#13;&#10;and sum([attack]) &gt;= [Parameters].[Parameter 3-Base total (copy)_172262734001582082] and&#13;&#10;sum ([defense])&gt;=[Parameters].[Parameter 3-Base total (copy) (copy)_172262734001598467]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='level-members' level='[none:name:nk]' />
                <groupfilter function='member' level='[none:name:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' direction='DESC' using='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:base_total:qk]' />
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk] / [federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk])</rows>
        <cols>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{7F5ABE80-7E2E-4320-BFCD-829116DB93B1}' />
    </worksheet>
    <worksheet name='Sheet 12'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>The distribution of Pokémon types across each generation.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column-instance column='[name]' derivation='Count' name='[cnt:name:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[generation]' derivation='None' name='[none:generation:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name)]'>
            <groupfilter function='level-members' level='[name]' user:ui-action-filter='[Action1_3AADE7C2D9DF42A890F69C6A30203F35]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]'>
            <groupfilter function='level-members' level='[type1]' user:ui-action-filter='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]'>
            <groupfilter function='level-members' level='[none:generation:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]'>
            <groupfilter function='level-members' level='[none:type1:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name)]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:name:qk]</rows>
        <cols>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</cols>
      </table>
      <simple-id uuid='{331D57C0-7393-4DB0-8CA3-84E85A115828}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>The effectiveness of other types against the Pokemon</run>
            <run><![CDATA[ <[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
            <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
            <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
            <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
            <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
            <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
            <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
            <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
            <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
            <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
            <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
            <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
            <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
            <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
            <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
            <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
            <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
            <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[against_bug]' derivation='Sum' name='[sum:against_bug:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_dark]' derivation='Sum' name='[sum:against_dark:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_dragon]' derivation='Sum' name='[sum:against_dragon:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_electric]' derivation='Sum' name='[sum:against_electric:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_fairy]' derivation='Sum' name='[sum:against_fairy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_fighting]' derivation='Sum' name='[sum:against_fighting:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_fire]' derivation='Sum' name='[sum:against_fire:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_flying]' derivation='Sum' name='[sum:against_flying:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_ghost]' derivation='Sum' name='[sum:against_ghost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_grass]' derivation='Sum' name='[sum:against_grass:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_ground]' derivation='Sum' name='[sum:against_ground:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_ice]' derivation='Sum' name='[sum:against_ice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_normal]' derivation='Sum' name='[sum:against_normal:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_poison]' derivation='Sum' name='[sum:against_poison:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_psychic]' derivation='Sum' name='[sum:against_psychic:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_rock]' derivation='Sum' name='[sum:against_rock:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_steel]' derivation='Sum' name='[sum:against_steel:qk]' pivot='key' type='quantitative' />
            <column-instance column='[against_water]' derivation='Sum' name='[sum:against_water:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_bug:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_dark:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_dragon:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_electric:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fairy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fighting:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_fire:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_flying:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ghost:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_grass:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ground:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_ice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_normal:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_poison:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_psychic:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_rock:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_steel:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:against_water:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name,Type1)]'>
            <groupfilter function='reorder-dimensionality' user:ui-action-filter='[Action7_AC44CE5EBD7D4634ABEBF319606EDD78]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[type1]' member='&quot;ELECTRIC&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[name]' member='&quot;Heliolisk&quot;' />
                  <groupfilter function='member' level='[name]' member='&quot;Helioptile&quot;' />
                </groupfilter>
              </groupfilter>
              <order>
                <hierarchy name='[name]' />
                <hierarchy name='[type1]' />
              </order>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
            <groupfilter function='level-members' level='[none:name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name,Type1)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Multiple Values]' scope='rows' value='Value of Multiplier' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Multiple Values]</rows>
        <cols>([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk] / [federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{83B59B8D-CB5E-4475-A85A-29DC3BAC7A22}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>How many Pokemon of each type are there per generation, utilizing table calculations</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column-instance column='[name]' derivation='CountD' name='[ctd:name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[name]' derivation='CountD' name='[cum:ctd:name:qk:2]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-type='ColumnInPane' type='CumTotal' />
            </column-instance>
            <column-instance column='[name]' derivation='CountD' name='[diff:ctd:name:qk:4]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[generation]' ordering-type='Field' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[generation]' derivation='None' name='[none:generation:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[name]' derivation='CountD' name='[pcto:ctd:name:qk:10]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[type1]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[name]' derivation='CountD' name='[pcto:ctd:name:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='ColumnInPane' type='PctTotal' />
            </column-instance>
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[ctd:name:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cum:ctd:name:qk:2]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:ctd:name:qk:4]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcto:ctd:name:qk:10]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[ctd:name:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cum:ctd:name:qk:2]&quot;</bucket>
              <bucket>&quot;[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcto:ctd:name:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]'>
            <groupfilter function='level-members' level='[none:generation:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cum:ctd:name:qk:2]' value='N' />
            <format attr='text-format' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[ctd:name:qk]' value='N' />
            <format attr='text-format' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[diff:ctd:name:qk:4]' value='N' />
            <format attr='text-format' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcto:ctd:name:qk]' value='N' />
            <format attr='text-format' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[pcto:ctd:name:qk:10]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Multiple Values]' />
              <lod column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok] / [federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk])</rows>
        <cols>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{CDCACFD6-4BC3-42FA-A214-48785947DFA2}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Base total, average by Pokemon type, aggregate-level calculations.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column-instance column='[base_total]' derivation='Avg' name='[avg:base_total:qk]' pivot='key' type='quantitative' />
            <column caption='Base Total' datatype='integer' default-format='n#,##0;-#,##0' name='[base_total]' role='measure' type='quantitative' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <computed-sort column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' direction='DESC' using='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]' palette='orange_blue_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</rows>
        <cols>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]</cols>
      </table>
      <simple-id uuid='{836B53F5-30A0-4451-88FB-315E50F65D80}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Calculated field: total effectiveness against</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='against total' datatype='real' name='[Calculation_1842816719799775248]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[against_bug]+[against_dark]+[against_dragon]+[against_electric]+[against_fairy]+[against_fighting]+[against_fire]+[against_flying]+[against_ghost]+[against_grass]+[against_ground]+[against_rock]+[against_ice]+[against_normal]+[against_poison]+[against_psychic]+[against_steel]+[against_water]' />
            </column>
            <column caption='Against Bug' datatype='real' name='[against_bug]' role='measure' type='quantitative' />
            <column caption='Against Dark' datatype='real' name='[against_dark]' role='measure' type='quantitative' />
            <column caption='Against Dragon' datatype='real' name='[against_dragon]' role='measure' type='quantitative' />
            <column caption='Against Electric' datatype='real' name='[against_electric]' role='measure' type='quantitative' />
            <column caption='Against Fairy' datatype='real' name='[against_fairy]' role='measure' type='quantitative' />
            <column caption='Against Fighting' datatype='real' name='[against_fighting]' role='measure' type='quantitative' />
            <column caption='Against Fire' datatype='real' name='[against_fire]' role='measure' type='quantitative' />
            <column caption='Against Flying' datatype='real' name='[against_flying]' role='measure' type='quantitative' />
            <column caption='Against Ghost' datatype='real' name='[against_ghost]' role='measure' type='quantitative' />
            <column caption='Against Grass' datatype='real' name='[against_grass]' role='measure' type='quantitative' />
            <column caption='Against Ground' datatype='real' name='[against_ground]' role='measure' type='quantitative' />
            <column caption='Against Ice' datatype='real' name='[against_ice]' role='measure' type='quantitative' />
            <column caption='Against Normal' datatype='real' name='[against_normal]' role='measure' type='quantitative' />
            <column caption='Against Poison' datatype='real' name='[against_poison]' role='measure' type='quantitative' />
            <column caption='Against Psychic' datatype='real' name='[against_psychic]' role='measure' type='quantitative' />
            <column caption='Against Rock' datatype='real' name='[against_rock]' role='measure' type='quantitative' />
            <column caption='Against Steel' datatype='real' name='[against_steel]' role='measure' type='quantitative' />
            <column caption='Against Water' datatype='real' name='[against_water]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1842816719799775248]' derivation='Sum' name='[sum:Calculation_1842816719799775248:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]'>
            <groupfilter function='member' level='[none:type1:nk]' member='&quot;FLYING&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_1842816719799775248:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_1842816719799775248:qk]' scope='rows' value='Calculated field: total effectiveness against' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_1842816719799775248:qk]</rows>
        <cols>([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk] / [federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk])</cols>
      </table>
      <simple-id uuid='{7ADEDB61-0464-4CFA-B9D4-5A0F59599DC1}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Pokemon classification by type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column-instance column='[type1]' derivation='Count' name='[cnt:type1:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[type1]' derivation='None' name='[none:type1:nk]' pivot='key' type='nominal' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3_AE22801D31194B338369A29C2F28C700]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[generation]' />
              <groupfilter function='level-members' level='[type1]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name)]'>
            <groupfilter function='level-members' level='[name]' user:ui-action-filter='[Action1_3AADE7C2D9DF42A890F69C6A30203F35]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name)]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='980' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]' />
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{6E05365E-9B7C-4D4C-B09F-6AF8089A6725}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Pokemon Body Mass Index - calculated field and filter</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column caption='IMC' datatype='real' name='[Calculation_172262733980717056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[weight_kg] / POWER([height_m], 2)' />
            </column>
            <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
            <column caption='Height M' datatype='real' name='[height_m]' role='measure' type='quantitative' />
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
            <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_172262733980717056]' derivation='Sum' name='[sum:Calculation_172262733980717056:qk]' pivot='key' type='quantitative' />
            <column caption='Type1' datatype='string' name='[type1]' role='dimension' type='nominal' />
            <column caption='Weight Kg' datatype='real' name='[weight_kg]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3_AE22801D31194B338369A29C2F28C700]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[generation]' />
              <groupfilter function='level-members' level='[type1]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]'>
            <groupfilter function='level-members' level='[type1]' user:ui-action-filter='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' included-values='in-range'>
            <min>0.039062499999999993</min>
            <max>99989.999999999985</max>
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]</column>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' />
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B26CE722-8B12-4001-ADE1-557A19FACE5B}' />
    </worksheet>
    <worksheet name='Sheet 8'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Word Cloud - Number of moves for each Pokemon type</run>
            <run>Æ&#10;</run>
            <run fontcolor='#000000' fontname='Benton Sans Book' fontsize='10'>Size based on move count per Pokemon type</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
          </datasources>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Type]' derivation='Count' name='[cnt:Type:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='917' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:Type:qk]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:Type:qk]' />
              <size column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:Type:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4C57D7FF-77ED-4B74-94AE-A9160F1E6475}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>What moves does a Pokemon of type </run>
            <run>Æ </run>
            <run fontname='Benton Sans Book'>&lt;[Parameters].[Parameter 1]&gt; </run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>have?</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
              <calculation class='tableau' formula='&quot;WATER&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
            <column datatype='string' name='[Cat.]' role='dimension' type='nominal' />
            <column datatype='string' name='[Effect]' role='dimension' type='nominal' />
            <column caption='Name1' datatype='string' name='[Name]' role='dimension' type='nominal' />
            <column datatype='integer' name='[PP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Power]' role='measure' type='quantitative' />
            <column datatype='string' name='[Type]' role='dimension' type='nominal' />
            <column-instance column='[Cat.]' derivation='None' name='[none:Cat.:nk]' pivot='key' type='nominal' />
            <column-instance column='[Effect]' derivation='None' name='[none:Effect:nk]' pivot='key' type='nominal' />
            <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Type]' derivation='None' name='[none:Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[PP]' derivation='Sum' name='[sum:PP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Power]' derivation='Sum' name='[sum:Power:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Name:nk]' direction='DESC' using='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Power:qk]' />
          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]'>
            <groupfilter expression='[Type]= [Parameters].[Parameter 1]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Effect:nk]' value='496' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]' />
              <text column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Power:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Cat.:nk] / ([federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Name:nk] / [federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Effect:nk]))</rows>
        <cols />
      </table>
      <simple-id uuid='{6990F2F0-553E-4232-9737-B81025020A1B}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book' fontsize='14'>The distribution of Pokemon by type and generation, along with an analysis of the Body Mass Index</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
      </datasources>
      <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
        <column aggregation='Sum' caption='Generation' datatype='integer' name='[generation]' role='dimension' type='ordinal' />
        <column-instance column='[generation]' derivation='None' name='[none:generation:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='16' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='9' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='4000' id='10' type-v2='title' w='98400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='94000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='5000'>
                <zone h='94000' id='5' type-v2='layout-basic' w='98400' x='800' y='5000'>
                  <zone h='94000' id='18' name='Sheet 12' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]' type-v2='filter' w='98400' x='800' y='5000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='35250' id='3' name='Sheet 6' show-title='false' w='99500' x='0' y='64375' />
        <zone h='53875' id='11' name='Sheet 7' show-title='false' w='33300' x='64200' y='6375' />
        <zone h='53750' id='14' name='Sheet 12' show-title='false' w='54100' x='7100' y='7750' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontcolor='#000000' fontname='Benton Sans Book' fontsize='14'>The distribution of Pokemon by type and generation, along with an analysis of the Body Mass Index</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='50' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='49' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='4000' id='10' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='53875' id='11' is-fixed='true' name='Sheet 7' show-title='false' w='33300' x='64200' y='6375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='94000' id='18' mode='checkdropdown' name='Sheet 12' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]' type-v2='filter' w='98400' x='800' y='5000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='53750' id='14' is-fixed='true' name='Sheet 12' show-title='false' w='54100' x='7100' y='7750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='35250' id='3' is-fixed='true' name='Sheet 6' show-title='false' w='99500' x='0' y='64375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{D2126DA6-C40F-4D45-B035-E8B1C4847D36}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 2 '>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Finding the most effective Pokemon against a type </run>
            <run> &lt;[Parameters].[Parameter 1]&gt;</run>
            <run fontcolor='#000000' fontname='Benton Sans Book'> opponent.</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='PokemonKaggle+ (pokemon)' name='federated.0kbxp751cs8c4p1ffmsgr1b12q5g' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Parameter -tip ' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;WATER&quot;'>
          <calculation class='tableau' formula='&quot;WATER&quot;' />
          <members>
            <member value='&quot;BUG&quot;' />
            <member value='&quot;DARK&quot;' />
            <member value='&quot;DRAGON&quot;' />
            <member value='&quot;ELECTRIC&quot;' />
            <member value='&quot;FAIRY&quot;' />
            <member value='&quot;FIGHTING&quot;' />
            <member value='&quot;FIRE&quot;' />
            <member value='&quot;FLYING&quot;' />
            <member value='&quot;GHOST&quot;' />
            <member value='&quot;GRASS&quot;' />
            <member value='&quot;GROUND&quot;' />
            <member value='&quot;ICE&quot;' />
            <member value='&quot;NORMAL&quot;' />
            <member value='&quot;POISON&quot;' />
            <member value='&quot;PSYCHIC&quot;' />
            <member value='&quot;ROCK&quot;' />
            <member value='&quot;STEEL&quot;' />
            <member value='&quot;WATER&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.0kbxp751cs8c4p1ffmsgr1b12q5g'>
        <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
        <column-instance column='[name]' derivation='None' name='[none:name:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='36' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='12' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='5250' id='13' type-v2='title' w='98400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='92750' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
                <zone h='92750' id='5' type-v2='layout-basic' w='98400' x='800' y='6250' />
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='37750' id='10' name='Sheet 2' show-title='false' w='62200' x='2800' y='7000' />
        <zone h='52375' id='24' name='Sheet 10 (2)' w='98500' x='600' y='46250' />
        <zone h='5125' id='25' mode='typeinlist' name='Sheet 2' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' type-v2='filter' values='database' w='16000' x='83600' y='5625' />
        <zone h='5500' id='9' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='18000' x='65200' y='5500' />
        <zone h='32625' id='26' name='Sheet 10 (3)' show-title='false' w='33300' x='66400' y='11750' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontcolor='#000000' fontname='Benton Sans Book'>Finding the most effective Pokemon against a type </run>
                <run> &lt;[Parameters].[Parameter 1]&gt;</run>
                <run fontcolor='#000000' fontname='Benton Sans Book'> opponent.</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1050' minheight='1050' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='52' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='51' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='5250' id='13' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5500' id='9' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='18000' x='65200' y='5500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5125' id='25' mode='checkdropdown' name='Sheet 2' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' type-v2='filter' values='database' w='16000' x='83600' y='5625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='37750' id='10' is-fixed='true' name='Sheet 2' show-title='false' w='62200' x='2800' y='7000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='261' h='32625' id='26' is-fixed='true' name='Sheet 10 (3)' show-title='false' w='33300' x='66400' y='11750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='52375' id='24' is-fixed='true' name='Sheet 10 (2)' w='98500' x='600' y='46250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{A8E11FF7-87BB-4E55-980F-CB06F7E5348E}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>The moves that a Pokemon of type </run>
            <run>Æ </run>
            <run fontname='Benton Sans Book'>&lt;[Parameters].[Parameter 1]&gt;</run>
            <run>Æ </run>
            <run fontcolor='#000000' fontname='Benton Sans Book'>can learn</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='6' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='15' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5250' id='16' type-v2='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92750' id='12' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
              <zone h='92750' id='7' type-v2='layout-basic' w='98400' x='800' y='6250' />
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='36375' id='5' name='Sheet 8' show-title='false' w='92700' x='3000' y='8375' />
        <zone h='50375' id='10' name='Sheet 9' show-title='false' w='85000' x='4600' y='47750' />
        <zone h='9500' id='13' name='Sheet 9' pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]' type-v2='color' w='14000' x='83000' y='48125' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontcolor='#000000' fontname='Benton Sans Book'>The moves that a Pokemon of type </run>
                <run>Æ </run>
                <run fontname='Benton Sans Book'>&lt;[Parameters].[Parameter 1]&gt;</run>
                <run>Æ </run>
                <run fontcolor='#000000' fontname='Benton Sans Book'>can learn</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='750' minheight='750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='42' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='41' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='5250' id='16' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='36375' id='5' is-fixed='true' name='Sheet 8' show-title='false' w='92700' x='3000' y='8375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50375' id='10' is-fixed='true' name='Sheet 9' show-title='false' w='85000' x='4600' y='47750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9500' id='13' name='Sheet 9' pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]' type-v2='color' w='14000' x='83000' y='48125'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{90BA283B-7744-48A7-B8EB-2B8F0FC6EAFD}' />
    </dashboard>
    <dashboard name='Story 1 ' type='storyboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Analysis of types, generations, and BMI (Body Mass Index)</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='270' />
        </style-rule>
      </style>
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98340' id='7' param='vert' removable='false' type-v2='layout-flow' w='98426' x='787' y='830'>
            <zone h='4046' id='8' type-v2='title' w='98426' x='787' y='830'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='94294' id='1' param='vert' removable='false' type-v2='layout-flow' w='98426' x='787' y='4876'>
              <zone fixed-size='95' h='9855' id='4' is-fixed='true' paired-zone-id='5' removable='false' type-v2='flipboard-nav' w='98426' x='787' y='4876' />
              <zone h='84439' id='5' paired-zone-id='4' removable='false' type-v2='flipboard' w='98426' x='787' y='14731'>
                <flipboard active-id='3' nav-type='caption' show-nav-arrows='true'>
                  <story-points>
                    <story-point caption='The distribution of Pokémon by types.' captured-sheet='Sheet 6' id='4' />
                    <story-point caption='The majority of Pokémon belong to the Water type, with 135, while the fewest belong to the Flying type, with 8 pokemoni.' captured-sheet='Sheet 6' id='5'>
                      <capturedDeltas>
                        <worksheet name='Sheet 6'>
                          <selection-collection>
                            <tuple-selection>
                              <tuple-reference>
                                <tuple-descriptor>
                                  <pane-descriptor>
                                    <x-fields />
                                    <y-fields />
                                  </pane-descriptor>
                                  <columns>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]</field>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  </columns>
                                </tuple-descriptor>
                                <tuple>
                                  <value>135</value>
                                  <value>&quot;WATER&quot;</value>
                                </tuple>
                              </tuple-reference>
                              <tuple-reference>
                                <tuple-descriptor>
                                  <pane-descriptor>
                                    <x-fields />
                                    <y-fields />
                                  </pane-descriptor>
                                  <columns>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]</field>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  </columns>
                                </tuple-descriptor>
                                <tuple>
                                  <value>8</value>
                                  <value>&quot;FLYING&quot;</value>
                                </tuple>
                              </tuple-reference>
                            </tuple-selection>
                          </selection-collection>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='On average, the Dragon type has the highest Base Total value, contrasting with the Bug type which displays the lowest.' captured-sheet='Sheet 4' id='6' />
                    <story-point caption='The distribution of Pokémon by generations and types, along with the visualization of BMI.' captured-sheet='Dashboard 1' id='1' />
                    <story-point caption='The distribution of Water-type Pokémon by generations.' captured-sheet='Dashboard 1' id='2'>
                      <capturedDeltas>
                        <worksheet name='Sheet 12'>
                          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]'>
                            <groupfilter function='member' level='[type1]' member='&quot;WATER&quot;' user:ui-action-filter='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                        </worksheet>
                        <worksheet name='Sheet 6'>
                          <selection-collection>
                            <tuple-selection>
                              <tuple-reference>
                                <tuple-descriptor>
                                  <pane-descriptor>
                                    <x-fields />
                                    <y-fields />
                                  </pane-descriptor>
                                  <columns>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]</field>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  </columns>
                                </tuple-descriptor>
                                <tuple>
                                  <value>135</value>
                                  <value>&quot;WATER&quot;</value>
                                </tuple>
                              </tuple-reference>
                            </tuple-selection>
                          </selection-collection>
                        </worksheet>
                        <worksheet name='Sheet 7'>
                          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]'>
                            <groupfilter function='member' level='[type1]' member='&quot;WATER&quot;' user:ui-action-filter='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                    <story-point caption='The Water-type Pokémon from Generation 6 and their BMI.' captured-sheet='Dashboard 1' id='3'>
                      <capturedDeltas>
                        <worksheet name='Sheet 12'>
                          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Type1)]'>
                            <groupfilter function='member' level='[type1]' member='&quot;WATER&quot;' user:ui-action-filter='[Action2_257C6D8FB76742EE8EAE5AEA8D725BB0]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
                          </filter>
                          <selection-collection>
                            <node-selection select-tuples='false'>
                              <oriented-node-reference orientation='horizontal'>
                                <node-reference>
                                  <fields>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</field>
                                  </fields>
                                  <multibucket>
                                    <bucket>6</bucket>
                                  </multibucket>
                                </node-reference>
                                <page-reference />
                              </oriented-node-reference>
                            </node-selection>
                          </selection-collection>
                        </worksheet>
                        <worksheet name='Sheet 6'>
                          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]'>
                            <groupfilter function='crossjoin' user:ui-action-filter='[Action3_AE22801D31194B338369A29C2F28C700]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                              <groupfilter function='member' level='[generation]' member='6' />
                              <groupfilter function='member' level='[type1]' member='&quot;WATER&quot;' />
                            </groupfilter>
                          </filter>
                          <selection-collection>
                            <tuple-selection>
                              <tuple-reference>
                                <tuple-descriptor>
                                  <pane-descriptor>
                                    <x-fields />
                                    <y-fields />
                                  </pane-descriptor>
                                  <columns>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:type1:qk]</field>
                                    <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  </columns>
                                </tuple-descriptor>
                                <tuple>
                                  <value>5</value>
                                  <value>&quot;WATER&quot;</value>
                                </tuple>
                              </tuple-reference>
                            </tuple-selection>
                          </selection-collection>
                        </worksheet>
                        <worksheet name='Sheet 7'>
                          <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Generation,Type1)]'>
                            <groupfilter function='crossjoin' user:ui-action-filter='[Action3_AE22801D31194B338369A29C2F28C700]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                              <groupfilter function='member' level='[generation]' member='6' />
                              <groupfilter function='member' level='[type1]' member='&quot;WATER&quot;' />
                            </groupfilter>
                          </filter>
                        </worksheet>
                      </capturedDeltas>
                    </story-point>
                  </story-points>
                </flipboard>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{EE076CA5-C966-428E-BBF3-BC85014FCF0F}' />
    </dashboard>
    <dashboard name='Story 2' type='storyboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontname='Benton Sans Book'>Finding the most effective Pokemon for a battle</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='298' />
        </style-rule>
      </style>
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98340' id='1' param='vert' removable='false' type-v2='layout-flow' w='98426' x='787' y='830'>
            <zone h='3216' id='3' type-v2='title' w='98426' x='787' y='830' />
            <zone h='10477' id='4' is-fixed='true' paired-zone-id='5' removable='false' type-v2='flipboard-nav' w='98426' x='787' y='4046' />
            <zone h='84647' id='5' paired-zone-id='4' removable='false' type-v2='flipboard' w='98426' x='787' y='14523'>
              <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='The opponent&apos;s Pokémon type is selected, for example Dragon. Pokémon with resistances of 25%, 50%, and 100% to the selected type are identified.' captured-sheet='Dashboard 2 ' id='1'>
                    <capturedDeltas>
                      <worksheet name='Sheet 2'>
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
                          <groupfilter function='member' level='[none:name:nk]' member='&quot;Kommo-o&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate' />
                        </filter>
                      </worksheet>
                      <datasource name='Parameters'>
                        <column name='[Parameter 1]' value='&quot;DRAGON&quot;' />
                      </datasource>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='The desired Pokémon is searched for, tracking battle statistics, for example Sylveon.' captured-sheet='Dashboard 2 ' id='2'>
                    <capturedDeltas>
                      <worksheet name='Sheet 10 (3)'>
                        <selection-collection>
                          <tuple-selection>
                            <tuple-reference>
                              <tuple-descriptor>
                                <pane-descriptor>
                                  <x-fields />
                                  <y-fields />
                                </pane-descriptor>
                                <columns>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
                                </columns>
                              </tuple-descriptor>
                              <tuple>
                                <value>&quot;Sylveon&quot;</value>
                                <value>&quot;FAIRY&quot;</value>
                                <value>0.0</value>
                              </tuple>
                            </tuple-reference>
                          </tuple-selection>
                        </selection-collection>
                      </worksheet>
                      <worksheet name='Sheet 2'>
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name,Type1)]'>
                          <groupfilter function='crossjoin' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                            <groupfilter function='member' level='[name]' member='&quot;Sylveon&quot;' />
                            <groupfilter function='member' level='[type1]' member='&quot;FAIRY&quot;' />
                          </groupfilter>
                        </filter>
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
                          <groupfilter function='level-members' level='[none:name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
                        </filter>
                      </worksheet>
                      <datasource name='Parameters'>
                        <column name='[Parameter 1]' value='&quot;DRAGON&quot;' />
                      </datasource>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='How do I find a Pokémon for a battle against a Gyarados? We search for Gyarados by name, observe its battle statistics; it is most affected by the Electric type.' captured-sheet='Dashboard 2 ' id='4'>
                    <capturedDeltas>
                      <worksheet name='Sheet 10 (3)'>
                        <selection-collection />
                      </worksheet>
                      <worksheet name='Sheet 2'>
                        <filter column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name,Type1)]' delta-type='removed' />
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
                          <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
                            <groupfilter function='member' level='[none:name:nk]' member='&quot;gy&quot;' />
                            <groupfilter function='member' level='[none:name:nk]' member='&quot;Gyarados&quot;' />
                          </groupfilter>
                        </filter>
                      </worksheet>
                      <datasource name='Parameters'>
                        <column name='[Parameter 1]' value='&quot;DRAGON&quot;' />
                      </datasource>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='We search for Gyarados&apos;s type, Water, and look at Electric-type Pokémon. There are Electric-type Pokémon with 100% resistance against the Water type: Helioptile and Heliolisk.' captured-sheet='Dashboard 2 ' id='3'>
                    <capturedDeltas>
                      <worksheet name='Sheet 10 (3)'>
                        <selection-collection>
                          <tuple-selection>
                            <tuple-reference>
                              <tuple-descriptor>
                                <pane-descriptor>
                                  <x-fields />
                                  <y-fields />
                                </pane-descriptor>
                                <columns>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
                                </columns>
                              </tuple-descriptor>
                              <tuple>
                                <value>&quot;Helioptile&quot;</value>
                                <value>&quot;ELECTRIC&quot;</value>
                                <value>0.0</value>
                              </tuple>
                            </tuple-reference>
                            <tuple-reference>
                              <tuple-descriptor>
                                <pane-descriptor>
                                  <x-fields />
                                  <y-fields />
                                </pane-descriptor>
                                <columns>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
                                </columns>
                              </tuple-descriptor>
                              <tuple>
                                <value>&quot;Heliolisk&quot;</value>
                                <value>&quot;ELECTRIC&quot;</value>
                                <value>0.0</value>
                              </tuple>
                            </tuple-reference>
                          </tuple-selection>
                        </selection-collection>
                      </worksheet>
                      <worksheet name='Sheet 2'>
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Action (Name,Type1)]'>
                          <groupfilter function='reorder-dimensionality' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                            <groupfilter function='crossjoin'>
                              <groupfilter function='member' level='[type1]' member='&quot;ELECTRIC&quot;' />
                              <groupfilter function='union'>
                                <groupfilter function='member' level='[name]' member='&quot;Heliolisk&quot;' />
                                <groupfilter function='member' level='[name]' member='&quot;Helioptile&quot;' />
                              </groupfilter>
                            </groupfilter>
                            <order>
                              <hierarchy name='[name]' />
                              <hierarchy name='[type1]' />
                            </order>
                          </groupfilter>
                        </filter>
                        <filter class='categorical' column='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]'>
                          <groupfilter function='level-members' level='[none:name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
                        </filter>
                      </worksheet>
                      <datasource name='Parameters'>
                        <column name='[Parameter 1]' value='&quot;WATER&quot;' />
                      </datasource>
                    </capturedDeltas>
                  </story-point>
                  <story-point caption='It is observed that the two Pokémon have the same statistics, so the choice will be made based on other criteria, such as experience, level, HP value, or the Pokémon&apos;s abilities, or the trainer&apos;s preferences.' captured-sheet='Sheet 2' id='8' />
                  <story-point caption='The moves that Electric-type Pokémon like Heliolisk and Helioptile can learn, sorted by damage and corresponding Power Points.' captured-sheet='Dashboard 3' id='6'>
                    <capturedDeltas>
                      <worksheet name='Sheet 8'>
                        <selection-collection>
                          <tuple-selection>
                            <tuple-reference>
                              <tuple-descriptor>
                                <pane-descriptor>
                                  <x-fields />
                                  <y-fields />
                                </pane-descriptor>
                                <columns>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:Type:qk]</field>
                                  <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]</field>
                                </columns>
                              </tuple-descriptor>
                              <tuple>
                                <value>28</value>
                                <value>&quot;ELECTRIC&quot;</value>
                              </tuple>
                            </tuple-reference>
                          </tuple-selection>
                        </selection-collection>
                      </worksheet>
                      <datasource name='Parameters'>
                        <column name='[Parameter 1]' value='&quot;ELECTRIC&quot;' />
                      </datasource>
                    </capturedDeltas>
                  </story-point>
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{D2FA89B6-00ED-4328-9132-2E607DC261CE}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Attack:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Defense:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Effectiveness:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D472D123-309A-40C4-96DC-A3849BAE5DBD}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type2:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5DB8957E-38F1-4D22-89E3-ECB3E620BF66}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='typeinlist' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[Multiple Values]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{636B3B7A-798B-4508-B103-A3CB47DEAF6C}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[avg:base_total:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ED04F000-A832-4D71-8743-5B931815C825}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_1842816719799775248:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1EF6F21D-B21E-4559-8A5F-94EB3A66ACFE}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8EF7DC3C-3FDB-4B52-B936-EB78260FD747}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262733980717056:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C7E7346F-11B3-4ED8-B4AB-13E845EEC2BE}' />
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[cnt:Type:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E49A2516-83B9-485D-B68E-7744EE041079}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:PP:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Acc.:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Cat.:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Effect:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F449B009-DC6D-4A5C-8670-6FD6A1F91566}' />
    </window>
    <window class='worksheet' name='Sheet 11'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='slider' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 2-HP (copy)_172262734001377281]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3-Base total (copy)_172262734001582082]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3-Base total (copy) (copy)_172262734001598467]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6509E212-CC36-4186-9B08-F5F121D7BB9B}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Defense:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FACC4684-5530-4775-8B4E-B34CC2B035B0}' />
    </window>
    <window class='worksheet' name='Sheet 10 (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Defense:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C5CF32F4-6A9E-43FD-991E-65BFC7CC355E}' />
    </window>
    <window class='worksheet' name='Sheet 10 (3)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[:Measure Names]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:Defense:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[sum:Calculation_172262734025482244:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4C3196F8-54C0-4F8F-8A0D-AC1FBAF4386F}' />
    </window>
    <window class='worksheet' name='Sheet 12'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='filter' />
            <card param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:generation:ok]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:name:nk]</field>
            <field>[federated.0kbxp751cs8c4p1ffmsgr1b12q5g].[none:type1:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2C214B72-2989-4ED5-9705-C99EB5718767}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 12'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 6' />
        <viewpoint name='Sheet 7' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{80C1F01A-9B17-41E7-8F84-4D4D6BC45A6B}' />
    </window>
    <window class='dashboard' name='Dashboard 2 '>
      <viewpoints>
        <viewpoint name='Sheet 10 (2)' />
        <viewpoint name='Sheet 10 (3)'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 2'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='13' />
      <simple-id uuid='{4E2C464D-8EB4-4A23-9147-282D17E142B3}' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Sheet 8' />
        <viewpoint name='Sheet 9' />
      </viewpoints>
      <active id='16' />
      <simple-id uuid='{12BD2691-8FD9-400E-AD08-60A66BB0173F}' />
    </window>
    <window class='dashboard' name='Story 1 '>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{A0D1F766-3A28-47CB-95F2-F6063CF2985D}' />
    </window>
    <window class='dashboard' maximized='true' name='Story 2'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{FA0DD0BC-E87B-4EA1-A67E-2253EBB9E1FD}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2 ' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29eXBdx5no9zt333fsG0EQ3EmJpDZr86LFm+yxLMkje2yPM36uVL1KVVLv
      j1QqqaT8Ki9VyUteUi959VwZzz4exR6PdlKyqZ0SRVLcd4IAsQMXwL24+3bu2fLHBUGC91wA
      BEACJM+vSiXwdPfpPn376+37+mtB0zQNA4N7FNNqF8DAYDUxBMDgnsYQAIN7GkMADO5pzL/8
      5S9/ef2DX/63/w29gyNcGoxCOoG3rRWrTsJ3f/PXOLs3c+HYRVrbGubNRIxd5qNz0wTyZ/nD
      OZEt6yIr9gFv732bTRs36YQU+Xf/47+jKezgV69/xpMP7qj5jn1797Jx40YOHTlMW2vrvPn9
      h//lf+J8Tx+HPnkP2dtOW71/NqxSJ7vx6VXYLSQT7aV/WqMu4NKPIMbY99E5NnbV/ra9e/ex
      cePGm888F+X/23eQYiZGqqAgpia41DfAyMAofr+ZkxfHaW2KcODAAdo72jl+6DPGJ+NImplL
      F87S2toGlDl0+DQNrjKnh4s0Bu189umnxOMxzA4fHqf95su1SCw3PmjesI1f/OIXALy3by+b
      xBj/63/4R9a1hwitu482R44vLo1w+egZdrzwErF4in/57d+imT1E4xn+9b96mVd+8zsEQSXY
      sYPnvvowxw99yttHEnS//CDHPv+I/JWP2fTIN/GIo5y+NEiweT3f+MojQIb/7d/+irb1EZJ5
      gZDPQrhtO+sDEgdP9WFx+XnxqV38/e/34/AG+OpDm9i7by+bdjzIxo5Ghi+f4bPj57F569jZ
      YWFkqsC7b7yGqe0Jov0X+ODwaayuIC98/WH+4Z9eQ8XEV77yKHv37qVz6/3EYzHefOMNvvu9
      7/HeO+/w0EPbefvdz1BMNn76Zy9iAnz1HfziFz9n/OIBProyTnHoKNFkkbbunQBoapnf/8s+
      vvftr/K7379NWdZ4+ad/yq/+9/+DlrYWYpky9UEX3sZu7m9z8YeDpzBZXPz0xSf599fV87OP
      76KYivLPb75HPpvlhz//L/n4zVcQFYGyLcie9SHO9A5R1px8a08TGQL81f/zHwg0tZGXbXx5
      ewufnO4jGGmm05tm79tHeOiR+6nz2jmw/23G4im8DV0899SjDF0+y969e9nQ2Uh/TOBbX97G
      3nc+ITV5GYsrjGzx8qPvfoXf/u51SmWFF3/8U3z2mcmDXMJX385DD29l3759KGWRb/7J81hN
      AgAT/QeJ1YPqjBDrPYYW2siDmyod5vlTx2ZanUoikUQtO0jmVI59+jEbH/gqDZ5rPUnf2SOz
      beDPnrmPf/ur1+lscLPlwaeIXfyMtGQhk5f5+c9/xJuv/B1FRWDno19n8MQHlAUHYxMJ/vV/
      9XP2/u63ZItlvvrdl/njK7+qngKN953n17/+Nb0jcSYnoqiqSLC5m5d//DOGLh7nk2Pn+fMf
      /4jHHtgOSESjcWKpIi+89BItJpnBgRO4Oh/hW1/aRNkcAGDX7l089PhTeG1w/0NP8JO/eJGT
      B4/x2utvYLXZ+OLwoZncJfz1XfzoJz/CLJj54Y9+ytClE3xw6DR//pM/o0mZ5EI0jdUT4Mkn
      HqNt/Vb27N7Dxo5GAF597TVsVitnvjhC+44d7NnzJb7+5S/x6GOP8ftXX8Nhs3Lp2Be8+epr
      fOUHf85PXn6ehtYuHtizh63rW4lGo3T5Nb7oTzCZSPDmP7+KxWEjPXSGy1MlADJTQ/z6r/6a
      sxMWfvjNLVyJyvz4xz/m4qlDgMqv/uf/jpb7nuDTt35PWrBjLk1y6OwAnnAbL//4Z1gFmT/9
      4Y8Z6TvFvg8O8bM//wkPNCkc6onOqWcAuyfCA7u2YStEOT04SDzn4gc/+BblYpnubTtpqY9w
      /vwpxFyCRE5Esbh48cUfUM7GyWSzhOobeeyRB9mxazcPPPQ4dd5KT3r/Aw8RDtVx9uRRADo2
      7mDPngfYvG0P430n6T30IcHu+ykoNl5++Yc4M+O8u+9VJkQLdi3Np8cvz2kzA72XOHrkMMH6
      Vp5+6st8+vGHfPzZF2jAM19+kL/+/QGefHArY6MxWq6bLUjFLMePH+f48ZOI6rX3xfLSnMYP
      zGkDvVNZGrp28NOf/QUnPtvPWKLAyz98mSe7nbz7h3eR6/fw45/+jEPv72ViOsf3X3yJjUEz
      p48e4MhAGpfLzCefHEKxuKoF4OoI0N12bZpisVwdKASUsoikaiSTqdlws9mCCRAEgUDbZo7s
      e4UDPTm+8/i1qclVdYPFYgEBBCAQaeH5F17k5Reem41nMleKZLaYZ/M0qWVERSOZF/H763np
      +9/l4sev0jctcb0aw+MN8s0/+T4/+clL3Dhoer0Bnnnuef7sz1+mo87L1FSK5OQYBUlDve4d
      25/8Bkd/++9p3PgoAa+HR776TV56+Se0hSpv9NV38It/9XO+/tVHMZnsSGIONBVZVgCJ53/+
      bzj+3hsEQ362736CF176AVs7G659l9ky81UCNpNKXlSIJfMEvPY59Qxw+uO3mdTC3L+1G0wB
      ogNHePWtA7z44nf4zd//HTsffpKGkEf3d2resJ1vP/Ukr/zj3wLM+ca//4dX+MpTX8NpEa77
      fSotsD3o4I+Xkzy6sZ58Jo2iQUFSaIwE2HzfI3z/hZfY2d02p247uzfz4MOP8OiD92Gxe/ja
      154iosUZSMq4Ix3s6G7BBGzY0s3FM+dn24PV6WXPnj3s2bML+3UtsbvJx/nh+Jx2c30b8NpN
      ZDIZNKWMigW1mCcvKiTTBeqaGsklplClAopgxWyxUBmMBFyBIBs3buf5773Ao3u2YrFYqtcA
      AM3NzbN/NzQ1YzLbaWoIA/Dlx3bz+hv7cIfq2bhxC06Lleamutk009FRLP4IJjHL+f4o2zd3
      YXUFuHD0Y1o2bMPnD83MVa18+ZFtvP7mOwQaOmiqC87kaKW5OQKYaW6q9BZfe/IR3nzjLZq2
      PMD2jhB733oTydnIl3ZtIj89Tl5wUx/ysXVTF2+9/iYmd4SOlnrASlNzHa5AhEd3b2Xvm6+j
      2gI8+uWvcvbTdxnOaOze1kUxOUFKttEQDtDc0k4mL/OVJx9k87atfPzOW8RFE9s2dFxXP00z
      7cxC2K3xzv5PeOrbzxPweujo3kTIJtP9yFP0HdlPz1iWPTs3IVz3PVfr6umvPcnbb76Bo2kL
      j2xdB9fVc3NzE26vm+OHP8fs9BGwSaTKNvwuE4dPnufBbV0cO3WGhpb1bNqwDrs3TMhjp2nm
      3WG3hbfe2U/7hm10bdjI8IWjBFq68Dpt5BKTnL88xPrujXS0tQCQnBhGtgW4vzvIoQtZHt2z
      mYsXTzB0ZYjWbQ/wyCOPM3jyY84NxNmzaxvma7IDFidhvxuA8eF+Ll8ZAE89Wzuu9fbhcBi7
      J4ypOE3fwDCyYCHgdRMOh2dimAiHg5hsLjZs3MT08CWGR0axuPy4nTa2bOiYbQPb6i28f+gS
      4yNX+Pb3XmB8uI/JsSFK7la++ugjaOkhPjl0mudffAmHzTxbJ83du1FjFzl8sodde/ZgMwsI
      K60JHus9zQdHe/A6zbSs385D9+ktUA1ullJyjFfe+IBg0Is31MLTTz604nkko0O8+vYf+e6P
      /gvqPVbe+/A9nvnaMyuez7LJjPDexSLPPFxZtH/43nt87ZmllXPFBcDA4E7C0AMYrBk++2g/
      nx89uai4wyOjOk9lRkfGSSaTi86zahvUwGC1yGTSBL1hfvPr/xOXsw7/1keIHn8bl7OOuOjE
      5TfjNRdQrCEyiRRhr4riqqMcT/O9l75FX28vJ88N0dUeITo2TLi5mycffWDePFdcALLZLF6v
      d6Vfa3CXk81m2bn7YVrbmrHKJRw2Jy1bO7lSfhiHzckOTz1mJ0iFNILNRzERw+GxI9hcuLba
      sdncbN22k5KoUV8XZnRkgI51HQvmu+JrAEMArpGLDTOSt+M2S7S3za9hvtdZrXZjTIFuIbnY
      COejdpqcBT599y0aNu9BKSbw+jz0nDrNI996mS0dK2cWcqdTSsY42dtPc1Mz06kcbY2Vuinl
      kkhmLyGvA1mRsZitJGPjmL11tDfVLStPYxF8C7G5fezoCJPPFwg0tlCUBFrbWgm4bbR2baE+
      WMN25x6llEpRFiSiY3E0TUPKxRmL5yhIsL69iRNfHORcTx+pVAoJ87IbPxhTIIM1QjabRcjl
      oKmJ0sQIPcMxHrt/HdGch/T4BWy+BlxWKEtlbFY78clRfA0dyxYCQwBuI0bd1Ga16uaumQLl
      sllSqWv2SalUkkKhNPN3ikKhAIBSyFJQVqWIq4BCNluYrZdyNkUyW0C9IZZYFikUCnPq717h
      rlkEjwxdIZmXCDkFUoqTxpAdShp5uYRsdtEYcNPfc56Q30+0HGfXps4ZI6m7GYWe8xewehyc
      PHKQhvpmCDdTTE2RKirYKaOZLMSm03Ssa0UqFTlz7BBtWx6gs2X58+s7gbtGABqa2gjKEmI+
      i8fpx2IqUyoVAXA4HAAEQ0FyORGfx4WiaZiEu10CBDq7NyJLWSyKSijgJWMCZia9YqmEO9RI
      yC8D4LA7iDQ0E/DeO4tzYw1wG1lrdSOKInb7rTttdTOsST1ANpu96RdenWsbVLMW66ZcLq92
      EVaVeQVgsRJZymdI5CSaZ2zZV1qSE6UYk8UomwLbMQnLX7eXzp0DwLF9+7LfdbOsZN2omkpP
      6hwNziZCjuXP2dVcnsLRL3A9+BAmj3sFSrh4ltLZrgQrsgZQMVPMxVHrgqiqiizLK/HaWc5M
      H2e9dxMXE2fY5F9eo1USCUr9AwAI9fWYQ6GVKOLi8laUFa2bnvQ5vFY/Z6aP83jD08t+X/ad
      d3A98QTpd97B+/3nV6CEa58VEYCxoV5kewiTyYTJZLruaN7K4LF5GcxfZntw97LfbQ4GKcz0
      NrZgEGGFyzpv3mbzitZNk7uFc8kTeGy+FXmvfd06ip9+ir1z3Yr/hmsVYxF8GzHqpjZrchFs
      YHC3ocoKyf4YxUQeq8O6eAHI5/K4b/PCyMBgJVEkhaGPL1GM52afLXpLZaT3LJ8cPIZ0S4pm
      YHDrSV6ZmtP44SYEwOq0ICaL3DNmNAZ3HTc2fli0ACjIMoxPTxmLBoM7FrOj2mnrogRAkURE
      0cT6zhYMHyoGdyKaphFcH0Ewz23yi+rQJVEinY4zOFng0VtSPAODW4OmaqhjcdSJJBZFpaXe
      xVSyhFRWkM2mxQmAw+PHYjLjlHL0jU6yuXV+d+gGBmsBTdNQBibRRmKzz1zAumYP6tZ23h/O
      L3ZKX8brC9Owzk2X0fgN7hRkBW0sXv28WGZiNEW8aFrsIthMURTx2CxrYhcolxpgvG8fmroW
      SrN20FSF8d595FIDq12UtUFZBlV/1ZrNVk4LLkoACqk4x44dpWd4HPPC0W85o5dex+lpIdr/
      x9UuypoieuUPOL0tjPa8vtpFWRvYrWDRb+LBGY8cixIAV6CBF1/4Li1NdayFM1R2V4TJoQ/x
      RbasdlHWFL66rUwOfYjdee/4GtJUDVVRudGkTdM0NAGEVp268DqpXxeh1We7uW19MV9AYfUN
      iDp3/nSVS7A28QQ62fzwv1ntYtwWNFVj+vIEyStTqJKKM+Kh8b42bF4Hcr7E5LuHyV0aAZOA
      tylCZHsXgtlEymbntMlB8kICi0lYXFtOjPTxxvuH2NjVffe4kTC4Y9E0jalzo8TPj88+y44k
      KCVydD69lZG/fZfCQHQ2LDGdQTZB8AdP88GlBKJybe2oe0PMjdhcbiyqyMh4nM1bN1WtA9LJ
      OMlMAa/HRblcJpYRee3ARQYnU2xuj5AuypybyJMsytR7bEh9HyBf2ocm5jCH1lfld3T4MJ/3
      f0JBKtDiX55PTVlV+LjvMgOJOG3BYPWJMkWBY0dhbAwam5AVhT/u20tfTw+d67soFgoM9l0m
      l0kTCIURp5LEPzxJKTqNa10jWqGEOhxDy5cw+ec3FiyXy7x7dIDD50eJBFz43HbOT+QZToq4
      bWbsgoT42X9EHjqEuWUPgmlu/yQpZX538h85Gz3F5oatmE3LW5H1TE1wYWKckiwTcXuqIwwN
      wpU+kMoQCHD+zBlOHz9GqViivqGBob7LTEXHcThd2Ox24h+fInO2H2vQg8XtRBmJocUzCA4b
      gnX+vrZcLi/6fLIqq4x81gs3THtUSUEcnyJ/sqcqjTiVYrihkZg2txyL6tDLpSJN6zby9FNP
      6C6C/cEIqNfM5BKZIgGPg9TMSrsgqTitJopSxSONlhnH5G9Dy4zrvA3iuSnqvU3EczHd8JtB
      UpTKfFDTkBSdXSNZqlSkpoEsUS6XUVUVVVUpl8uIpSJ2ux1RFCvvS+exeF3I2cr5Xk2UwWap
      7DgsglS2RMDjIJGpeKwoztRNQVJBLoGmVP6TS1VpRVmcLZsoi0uskWtkSiUCTheZGe8ZVeSy
      4PNV/g+kkglCkQipZKJSnplD9eJMejlbwOJ1IaXzlfTlSt1o4sqaUCqihKbc6N2oQnE8oZ9I
      00gl8lWPF3UgJjEywInBCbrbW2ntaKsSgkRsgumsSPf6jtmDDfF0AZ/bjm3msrt8WcFhMWE2
      CZUGmR5F8Lci6Lgm0TSNqdwk9Z4G3fCbpShVDn47rTb9COJMY7NX3KcU8pWKcrkrPXqpWMBq
      s2M2V75FSuUwux2YZno1rVQGmwXBNH9/ks1msTtdZPIiEX9lF0JRNUqyittmnnlXGgDB4dd9
      R06sNEaPffmHRzRNI1UsEnA69etZ0yCbBa8XhMrvlpieJhQOIwgCiqIglUUczsq3qJKMki9h
      DVRGE01VoSwjOGrU+3XczIEYVVG5/OZJFLG60wk0uEju+7Q6kdlE8Sff4YI4dwRY3IkwTeXU
      FwfpnyryJ995dt6tUOPUU22MuqnNzdZNom+S6LHBWR9HGhr4BcKPN5N97Tjls9dmF5oA9oe3
      4/n6wxwcyFRG2xkWt6EjmJAUcGgKZcC56GIaGNwagl31WJw2klemkMtlTltPMBQYRB1UsOyy
      sCEQZku0FVETuNS+jkxDPVxOYRYg4DBjs5golpXFnwnWNIViUcLlcswbz+jlamPUTW2WUzfH
      Ygf5JFqtFP166/NMxNcxlpnr+8hiEnimO8BHV9KL39U8c+wjfv+P+1h7rp0M7mU0TeV88pRu
      2MnYqarGDyCrGoeHM5RkdfEC4PMEKZhKLLycMTC4fWiArOrvMolK7Z05UZ65gX6xGXn8dTSH
      fbfGGC4Xhf4PIDexpORS6gRi9C00uXqb63aTjia4+P5J0tEa23E3g6bByKHKf0vwXqPJecTo
      W0ipE8svyzLRNI0rBy9w5eCFKrOF5SAg0Obp1A3bGOjEZ9ffstne6MIkLNoYLsbFvkGCkbpb
      owmeugDrn4Kp80tKrhSHsYYeRUqv/g89fn6ILU/vYvz80PJfVkqCxVH5r7T4u2+vIqVPYA09
      ilIcXn5ZlkkhkcPqtGF12igkqs/mLhVBEHis4SnqHE1znjc62+n2PsyWeifW6/zgC8CGsIOw
      28qGsGNxu0CuQB1NkUGOHh+/NUci67dVRoD6bUtKbna2IyU+x1b31AoX7OZp3tbBxfdP0rxt
      4Ss6F8QRBLnn2t83idW/m3LsA8zO9uWXZZm4Qh4mLo3M/r2SuK0eXu76OVcyF0mVkyhSgGii
      kf09lRWrwyKwPuzAZTWTKsoMpUT6pksILFIPIMsS8fgUF05d5PFvPD3vOsDY6aiNUTe1Wam6
      EWWVN8/FKcpzm7XfYeaBVg8f9qXndOKLmtHIpTwD/UPkiqWq63UMDNYS4xmxqvEDpEsKx0dz
      VTOYRQmAKstogsD9jzzM/FoAA4PVRZ6nhy4r1YKxyDVAhEe/dO8csjC4c2n0WDEJ1Sch7WaB
      rQ0ujo3OXYCv9tkWA4MVQZZlYtFxioU86ywWBiQv2nXnF0MuC5Ki4bObyIg3awtkYLCGEUsl
      Th7+jGw6PfusxROkbtNukiIMJkWiWYlotqIwC7sstAftDCfFlRGA6OgQ6aLC5u7qwy2rwWun
      T5EsFnh28xbaAje/fbiSZEYSFJN5nCE3gr/aNd/tZCSZZH/PRYIuF9/fef+qlkVVVKbOjAJQ
      v3Pph540TePKpQtzGj+AmkviSI+SUBur0kwXZDaEHSSL8soIgIwZt8M0e1ijUChgNptRZg6g
      3O6/Y5k0D7S2cSkaJWyzr0oZrv5dTOaxN3nIDCdxOHyzZwpWozyXJsbZ09TCocH+Vf+NynkR
      1aQiCAL5dA6sSz33oZGIT+mGjE5MkfHr3512dqKAqq3QFMjjsJIuqbNXJLlcq3vP7Ld27KQv
      FuOpTZsxLXBI5VZj32wjM5KgaUc7BbG4qnXz1KYtfHKlj+fuu3/VfyO73Y4gVVaqnpBvGZfk
      CbOdyo1cPYylm79FoCAZVyTdVoy6qc1y6maw7zK9589WPd+66wEulnzzmkPf8nuCVVWd0wuv
      pX/f7ryXUzdrqd5uxb+XQ/v6DYjFIqOD/aiqimAyYbXaiI4M4VTAbq5HtAcAAbMAHpuJ42M5
      rKbbMAJomoYgqGTTeURFJRz0zzl/WgmXicfygEw4Eq4KV8QCQ2MTuP0hGsKBmw4vFotk0hka
      mhpB02bDtZm/h3t7sYXDNASDOmUTmI5NopntNcq+0LcpJKbzhMJ+3brJ5XLIoogvEsF0Xdmu
      hk/H41gRcEbC2HTKNhUdJVso09qxDvt1XtAWFw6JWAzB7iLgdVflLZdyjE5MEQi3EvDaqsJV
      qUg0liZSV4fdaq4KX+jbkokEoXBYt93cLJqmURZFSsUCfRfPk4hdWxdoQLh1PU3dW6uORN7y
      CbIgCMSnpjh79gyYLFWHryv/NpPPTaNg1g3PxadQTTKnzvQtKXx6Ksro0Cjl2fyuzxuSU1NE
      Y4kaZYOR4WEkWdYNX/jbBHp7zjM+We3hQhaLTE+OcKk/Oie/69ObUInn8lhqlC0+naKQGWdo
      JLGEcIlLl4fJpZK6eYv5POMT4xRFSTc8HR0jVSqjqlpV+GK+rZyNc+TEhRUxsRcEAbvDUTm4
      H5u7KBaA5NgAw5OpOY0fboMAAETqQ5hNNsw1FvqiWECRBWx2/W1Cu8eHxeLmK4/vWlK4YLYh
      l2u4/gCCrW2EnbV90jQ0NiBJ+ocuIvVhWts2UMjUMldWiE0lSSZSVSFWhwu5rNDQUGurVqFY
      LGO3Wmta4Xo9Lhrat7GxU19TP3+4hhlV10QAQC6X2b7rPhRJ/2CJt64eJzKSjvmB1eHCZPXQ
      2Rio2cDzUoHJ/lFW8lr1XCat+1zTNKKJ6in9bdoiseLzOsjn9Q+s2O0Ostk0tX5lRSpSkhTU
      Gp5+Fwr3OEyYXH5dbxZlsYRJUMFce4++WChSLNQSIBu51AgWR63hW+BLjz9OS1O9bmhdYx2J
      WK3DM2Y0pUS5hg8cgGKxOLu9ePPhNjxeK1ar3rermN0eRvtGiNTpf1u5UERBoVioPnYI4HNa
      GElma1oPR+o6+fJX9qxoI3S6ajsnC3qr3TncJgGQyWRFpLK+M6dcJkapbGZ6WseXO4Ddg9dm
      pqZnXpt73vB4KklibKKmJas/GCYc1PfDA4CUI5nT/5GhjKTaSSX0nXjlMglGRsaQajTiXLGE
      lM/X6CUVopMJCsmkbrgkigQjEUw1fCdVwsM1w0FkeDhOPqe/2SGYrLR3tGOpkbwsypSkInKN
      ESKWSGFXJfRrTmFoYJBENr+iHseDkToCoXDV8/qmFnavb8B+wzTktgjAQN8g7euasdj0pxke
      X5CWliYCXv2DEtEr/RSVAtMJ/SP5NruNdCpBfFp/GuJxBfjac/rnGKw2G+lUmsT0tG5aSRQp
      C3YiQf2eZWoiRqguRH29vsLF4wsw3H+F8Wj1cU8xM02+bCJYH6rRCMw0tTTT1tJUQ7YV+q8M
      Eo/rl91qtyMoEhPRcXIlvUZqYcd929m0qVsnzISYziBYFWLT+ie4zA4LmggOd/XvqpQLCBYb
      wbqGmt/m8cDxQ6dqCMjSMJlM3Pfwl2jp6MThdFVGhHA7E94uPhvIUOexUue24LKa8NnNt0cA
      VE1DMJmRpVqfakORMyg1qqq+qQGzxUtdWK8RKkTHxtDMdtzOamNtpVxAUWQOHzmu24sqUplk
      YoqCqN8HW+12/D4fthq+LacmY4wMDGCu4XUuNpmgo6uVpqamqrBCroTDacOsqjXvX3Y5bMRz
      +r2k1e4iHPLT0KA/vcplkoxNTFPf2IBJ5zKRfL7I1Pggg6OTuumLhQy9faP4/Podk9PpxOPx
      YNVROMVHxjG5TQz2j+sKryQWUAQP3du7WJxH0MVjs9nZct8uHnv66wS2P8a4o52JvEosLzGa
      rrTB72wN4XOYb48xXFd3N+WyCjUnITIXLgyyoVuloe7GBaHCdDyG6ArWmOMrePxhvCY7oWD1
      D5WZiFI2+2gMlpChqiFZbA5Mkoik1VbFFwtFpBpLte33zW9Tk0okCIbrMOm8PtjcgrtcRgjV
      GgEgnRrnSk+W1s6OqoaSSyfJ5Yu4A/plE8sqbe3thEIh3fCR4TG6Nm4iOhkHqm1mvD4fqUyC
      ZCKLpzlQFX79GsDvmruOaOjaAMD6arkHKrtEoqzi93pvySErQRCQVI2zE9Vrt1he5thojtF0
      +faMALnMBMePnSM6pT/Hn44liUSc2NzVlQxmQqEwKDmOn7qoE64yNTlBNBqlpOOgNti+HpdQ
      JljfULOnsXkCNIZ9umETYyOUJNhQw9Avl4ly5PAZ+voHdcND4SBTE+MUSnp9vMLJY8e50tdf
      Y45fQMWJK+jU7ak8/iAOq5nRgUtEY9XTlEI+QzQaJa6zAwWwrr2ZVCbH+g0bdMNBw+mKUBfR
      GwFkRiYTOJ1+GiP6I/PRw0c4d+qs7hTH5vRg1cpMxqZv2dW7hXLtHa6xdGU9eltGAI8vjEkb
      rblYUlSBjnUbqLUN5PJ7seRLNDXp/RAOuru7MVnNyFKN7TxFw5zPUQ4Hq9YBmhORskcAAB1+
      SURBVKZhtZopifrTM0mWsWoyk4kUzaFqAfX4QrgciVlHujcSCDfwQH0zoKdZN9PS1srowCAq
      m6vSFlI5vL4QXl8IierRS9M0vH4/DrcTm7W6L2vr6KRcrj3DtjktmE0upiaitLa26ITbKU9m
      UHQX8DIaVjLJOKVIGIftxqZkprm1lWwqpdvLCiYLGzdvZwV8H9fEaTVhNoFe8evcVkZu1wgA
      NlweW00DrGwmSSweI1/S2yVSyOZFrBY7rU36C83+s6fpGxkkmal2KQ4aqWSSWDaH3mafIkmA
      WnMB3dbRSX1LK269OQwAFmwOO7YaSo5ifmreEcJqUvBEGnV7IlWRiMVjxGoscrPpDILJjMdf
      RzhQXbeSWOD4seMMjYzppi8VikRHBzDb9YVXEyxkpid1R1Zw0N5Sz8at3YhFfSGzWwUsdv3f
      3GSGY0dqjxArgc0ssKW+On+fzcRDIYGI/bYdiBEp5CUcDv0TxfOvEUoMDY2g4qSxupMCoK6x
      iZHsNC6rnrLHhM/nYnIiSRmqpkEWm43J/kHk+jbdd0tigYGBASINTfgDelulCtlMhqbWZt30
      C40QyVQGv6962w5m1giRyr1semuEiegYmVyBdV36Uxir3UVDwMZURkRvn8fl8SKpAnIxC1SP
      bsXENJIgkcqWCfurG1JsfBQl46Yuov/t09MJfKH6Gr3s/CPESiAIArtaPDgsJvqmi8iKhn+4
      j3Xvv0YiPslmp/v2CIAoarS1N9Xcp89lJjh7borm9no6qhqSm90PPjDv+z0BFyRSuDz6s3xV
      hZZ17bojAEBjVxfpbJZUvkzAPXeSZLW78NkVRieTtDZX35EsimU0ucR0MoPPo9fbzTdCKNTV
      N1GseYFEZY3gDwTp2rq5qqFs3LK1Rrrr3iA4aIzor28A/D4Xfp19cwCnP0BELCMWM+gJiN/v
      ZyQ7jT0dxOe6cXKpYLdaGRwYJtKoLwR2q0CxxgixUpgEgW2NbrY0uCgPDhH75/8XbWZaaM3e
      hHPc5WC320knE+Rz+prgyhqhXHON0HvyBL1DlxmJ6qu5s/FpTC4vDqv+XorT5UCWpJqLLVUT
      cNjN5NL6eob5GpHd7sLj9WCtZecxM0LYHHo/tBmLWWFiooYCcGaNkIrHdMdGSSxw5PARzl+8
      XCM95AsF7PZaulgzNpu5xhy/cu+wxWYjn9OvF0/ABZK5RsdjJhj2Y7Xaajay6ekEbq/7tjRC
      kyBQ+Pjj2cY/+/w25M1CmuCF1gh1DQ0IghmXU/+HtAXrCNhraYIVzGZblTHWVXLpJBabgKT6
      aNXZ6oOFGtH836ZpJiKRAOUawj2/Jnj+NYLV7qK5zo9g0Z9aSqJIS3t7TU2wKJZxu9016k0l
      UyyTTWbZtrVLN/1CHc/836bR0NBAqVi8ZbtAN6KkM1XPbpMAaNhsVgavDNRQ+My/RrC7nVgF
      c02nqoJUZnjoComMXiM0k06NcfjAMd28NWbulK1R8oUa0ULfJkky2XSCTI1eVCqVsbssDA2N
      6oYnUxn83trTBEUV8Pv0w612OxP9/YxM6Ztp2O0mjh05yfDwiE6oNnO3Ws2sF+h4Fvo2jXKp
      RDQ6dducrdm7q9dKt2kRbKOuzo/d6dCVuIXWCGImQV510eDW74VNFguNLa04a/REXm8dTe05
      xFwRh2euQZTXH8Trr31w/mojEj1BGur05srzf5vNBqNjSdY5fRCoXgj7/X4UbHg9evfuLLRG
      gEw+T3O4em1ylbrGerI13ZlZaW+vq2zJVGGmua2d5rbafkWvdjzYA7jqqldY83+biUwhTSaW
      vG0jgOepr1E4coTy5d7rSnEbuNLbQ3w0SrCt+oI9WHiNoNmdpMYGydfYbssnYmQLGT79/Lhu
      eCadwev2MTqu19MtTF1jPX6PvkXkQt8GFjo7mykUxaqerpCOE53OEovFiYT1hGv+NYIkilgt
      AqNR/UPhAONTMcavnKZ/RM/iVMJs9RLt60NvA3kh5ut4Fv428LoDtKxvYrqmNezKYnI4qP8f
      /nuCf/EzXF9+Eu+ffPf2jADr1nUyoGhY1NqmEJmsiMOrP4/2eHx4XI4aPRWEO7qInTvPww/v
      0A+PRChPJdm4ceNSis/4VIxsNoHZ5GR921yzgoW/DUxmC3I+WWVM4fJHaJQUTPNMwa6fR9/4
      9Va7HbfDhWCqbU2zvms90Uk/jfXVi3hVMeGym9j95BNLcnmZT8TIFgucuRDle996fE7YYr5N
      kWWsZhulUgFPjVsxVxqT3Y732We52p3dlhHAbLWzYfMW6gK1bObnn0cXMhmwmSjm9QRE4sSR
      I4wnizSFqyuxkI4zFkuSTmeW/LHru9ZT39Sp24gW+rbp2DRKsUDH9m261qihSAObN3fXtAVa
      aI1QyGRqTpGiwwP09PcgmAK47NV9XX9fH+npBKplaf1guKMLm2yq2fHM922SWEDGTKlcpr1t
      eZehL4c14hlu/nm0pqpYrVYGBgdpbdx5Q6iVPV96jGR8ioIo4brhVJnLH2GbP1Jx8EvtIwW1
      iA4PMDw1it+7QbcRLYimoS7j2PX882jAZkfOTBCNNdJUN9dUpKm9k/rmFmLT+tvHGzZtgU0V
      t4I3j8SJI1+QKpvZsvPme29N00DQVvS2mKWwJtyiXOm9RHYqQcOO+2jyVS8U5WKGkYlpZMFO
      9zp9reOtRJHLxKbTNDbom2Islputm0I6zuBEikwyxUOPPKDbOUyMjyGWC3gCLbrmELeaZHwK
      uzdY1fHcLKvlMmZNjADzz6MlLvcNk8pk2f3QQ7e9bABmi23ZjX8pLDSPjo4MUlRKpJJmOtat
      jqOrYET/LMKdwpoQgKvzaH2sdHa2MTgSRVVV9K1i7l5CkQZCEf1tzsbWdibGR9CCa+JnvCNZ
      8SmQLMtYlrioutsx6qY2q1U3Ky4ABgZ3EqvrOdbAYJUxBMDgnsYQAIN7GkMADO5pzL/85S9/
      Ges9yqAYoPfA6yh1G7lw7BAjo4O0t1ffdn6x5yJ1kcqe+F/+p/+LgeFRxqfzrO+4dl7x4IGD
      tHes/u3kAJloLwnNh9c+d/v08Mf7KaHxx/2fs2Objo2QlKGnP4EgF7F63DU3X6cmJ3F75r/5
      /ODBA/p1ebGHujoXPRfHGL14AnNjJ+6b2giRmJpM4dY5iVbru2810d4eNF+EG7M9cfhjEiUL
      9SHfnDa0EPv+5RXOXOjhxPleOkI2Xn/nA85e6KXRp9IzIeGRJzgzlKf/9AGOnTpHIq/Qd+EM
      nV1diLHLfN5bYOzyaSI+K//8+j7Onj5Dx7pW3n5rHydPnasIgNvv4eCBozjdAslYgVwuQTo2
      wthEnAu9I0i5SY59cYR0AV597bd0du8g4HVxsXeIP33p+3zyyUfI+QQnT51CsvgZG7jCxOgA
      4fowb735DqMTCcYHT3OhZ4CPP/iQyfF+MrKPSycOcOrUafzNrfzub/6G3p7zRDq347HDh+/u
      5cDhk0Scef75D19QF7Dzx/c/YSKRYX17C0c+2c/Ji70c+PgDpqLDTBetXD51sPK+xmb2v/UW
      0WSeeM9nHB5W2L2pnSsXTnDwyHGKKuz7l1fxCHmOjsrUmdMcPXkKkyPC0U//wMmTZzFpOX73
      +hG8FonB8UFCzes4dugg8bF+jp88idXXTNDr4MihQ5w7c4Kh4WEGomnWdzRz/tQRjn1xhKzq
      panOz3v7XmViKkZasjBy6RRHPj8AzgC//adXCEecvPq7D/C7TfiaG3lv3x8Yj6foWtdGfHyQ
      Tz77nL6hCdKTg5w5c4q+8SzTwz0c+fwA3rZ2Lp28woGP32G0vwfJFebTP75T9d0jfef5/Mgx
      RmNZTn72R4ZHBonlzbQ1hjl68MPZ3+2DN3/L4PAAsjXIu6+9wshQP5q7gZMH93Pq5BnqOhr5
      p//8T/T0nKW5q4t33nyLwfE4+bF+Dl/q5cy5y4yf/pxhxc2m9gYunz3KoaMniWcl/vjua+zc
      /QgBh8Z/+su/pN5jYShjZ/TiMfquXOZsz2UuXR7BqWY5cOgoOclEc32IEydP84OX/5TzRw5h
      tpvxtG/lqw9swxVu5ejB9xmbSPH4/U0c7RN56XvfQBJz9F7qYfvOnUjJIc6MC4jTQ1y63M/3
      //Rltnc1EitY+NKDuxg8d3JmCmTxYyUDlhBaOYrVEcDi8vP0089QLiew2x14gn6uDAxx/677
      WddcOXw+NtDDex9+wne/9xKDowme++7z9Jw8Qs/pI1yMZhj+4n1SuOjpvchkXuKb3/gGDU0R
      vvXdr9F78hCJrJnnv/91jnz0CfWtnTz94DoujVfsVhxuN8rkKKOxBDsfe4bLRz4Hl4veixXf
      QIl0iae/+Q3CjXV887lv0nfx4LX3ffI5KDIlUaRzXSe7du8G4KOPD2K32eg538OmHTt49iuP
      sWXzFj797DNsNifnTu4nL0d44cUX2Ny9nl27d5GdnGLz9g4+3P8eybzAwU8PYnM4OXfuFABT
      U5NImoNnv/5NCrFxgNn66r14DoC6lnV869vfZeTCCRwuB367wlDGwv3372Lnjs3sun8XDjMc
      //A9RJubnp7KN9ptNmwON31DvQyORnnkwa1oijD7jnP9Y0xNJvAGm3ju209y5cKw7ndb7XZc
      Lg+Dl3uxuH18/VvfIzpSuVHl+t/N7W/gO3/yAhdOHMYbauY7z7/I2cOvkhEDfP97T3Dwg4M0
      tXfz5I4GPvnju4yLNvp7epiI53ni68/iUCXWdW5g9+6KvdbJnkGee+45xod76Ny0g43rmjE7
      fNy/63627XmUofOHiE6nKeZKPP2Nb1IWp/noo09x2G30zNSdmE2wf/977PrKM9z/0JNs8At8
      fuAjpvMST25ppBzagCbmEKyVUTjgDyAX0uzfv5/3Pzk8O5JIGlhNYHH78VgFzn/8Hl1f/c61
      NYAlO467bTvTg7103LdnzjD0xeFDSGUZRVMppaYZilbs01s6N/HsM08T8btw2xX2vv0GobYu
      Nmx/gPsarGjNW7DJBTZu3KwzhfCgiJO88erbdO24wcCtMMmhE/3IioSqgsViYeee+5ALJTZu
      rvafc+P71m/dhtPjY3DgCjZvgBNfVCpi5/bNyIrGxs2b5qTcsm0rqqqyecfjFBI9vP7a6+Rw
      0HfuBBJgC67n8qH3ePiJR9i8bQuaBps2bdIpQ3V9AUSH+/jDO3tx1rVx6MghZFlGVVWmx/uJ
      Z6C/9wwlBTbv2oUgFtm0qfKNX3xxCFmRURSVYnKC//svX2fz1nVz3jEHVdH97iOff4GkSCg6
      7hGv/93GBnt4Z++b1LV1MXzlAu+89RpNXY8jZvp57dX9bNy9bTZd8+Zd+ASR9Zs2zfG04Q04
      +OLwSQBag2727t2LzTXXhLzShpK4lRjepk0gF/hg/37yBbhv5xYkRWXjTB3YvSGeffZZNq9v
      pe/MYd47eILR0WGKZQWX247d4cYa3oQy+QWvvf46H31+AovLz7PPPsvTX35kNs/H7t/I3/zm
      t7zyd39HQgR7OEJ7JACawR3Bb/72L7UPPvhAe3Pve7csjzdffXP271dffeuW5aNpmpaYGNF+
      /Vf/oImqpr3z5pta4ZbmVhtDE2xwT2Nsgxrc0xgCYHBPYwiAwT3NHLXLwH9+Y8kvcjRHKI3X
      8nC2/LRrLc5aLFPgwc1kzRaGT1yZN56/KUQ6urAnhpWMt9J57vj2gxTGs5RS+p5EABwB94Lh
      cwQgf2V8wYznYznpF5N2rcVZa2Vyd7VQsNiYHtC/8eV6FhNnpeOt5LukYplSKk9hav7L3BcK
      N6ZABvc0ugLg3bYOs8eJd8d6TA4bFr8bZ1s9rNDV9gYGa4XqFi0ImN0OHM0RpEQG3/ZOUDVs
      YR/OFv3LmA0M7lSqbQ9NAukTvQhmE/b6IJmz/aiihDiVpDxd7V3XwOBOploAFLXiMVlWKI5c
      8zlZGte/psfA4E7GmNQb3NMYAmBwTzNnCuTuWrrbQUfz0hfIJudK3xVuYLA41oQibDmCZ2Cw
      HIwpkME9zYoLgLOtHnu9/mVzBgZrjRV3xqhpGlIqj2/HejRNw+J2IKXzmJ12VEkGTaso25x2
      UkcvrXT2BgY3xYoLgFqWsAY9KEURKZlDdjsoz1zQIFjM2BuCaGXZ0CrfIlxBN+HO2pfmQcXi
      cjGsZLyVztNa48rcm2XFBaA8lQJAnExWHtxwO4mcrpinFgYnZp9Zg94FF8K14picdtSiuOw4
      18dbTJyVeNfVeGaHbdlxAKwhL4lk/p6xBl0J1oSvbimZXdYO0sJmwgvHWY13XY2XPTew7DiV
      eC1gWZme8U7AoXPt7PWYrRZc9ddunbG57ZSvu2fObLWsDQEwMFgKizkPMIf66vMBhiLM4J7G
      UIQZ3NMYijCDexpdAbA3hkCYe6OuxefG2Xb7b0o0MLiV6C6CzU479oYgjsYQalnCZLMiZwtY
      fG6KI7HbXUYDg1tGlQAIFjNmlx0EAU0DpShSTmTRVJVy4iZW3AYGdwBVAqDJCtnzg6tQFAOD
      28+a0AMsRhNsYHArWBMCsFxNsIHBUjEUYQZ3LAuZQiwmvqEIu8u4l6xBswOJmzOFYAFTiDuR
      xYw8ix2dbve7VjrPxVqD1goPdzbMCdOLd2OcG+PphS82ztV484Vf5a6yBl0OpfH4giNPrfAb
      LTb14i0lzo3x5rMMvfp8oTiLs1S9t6xBVwLDFOIuxWw1Y7Fbsdiv9XHuiA+z9fbeG7zWueNH
      AAN9/E0hEECV1dnbJN0hLw6vE6lYJjORXOUSrg2MEeAuRSqVEQQBBGjc3IbFZiU7mcId9q7Y
      ccK7gTUxAhiKsJUnO3XtKGpq9Jpf11zccHB8PWtCAAxFmMFqYSjCDO5pDEXYXcZiFGG18DeF
      Fu25YS0Q6KzDXe9bdHyr214Vf01MgZbDckYeR3Nk2UK/1igs0i3K3UDQOQpC6uYSeQBHAEqV
      dLoCYIv4UfIllKKIyW5FFaXllvWWsRhFmMFdysRJSA3efLrAutl01QdizCbMThtKUcTV2YQm
      K0jpHAC2SAClUEKTFQSTgBhPg6ot4wsMbhU2tx2zxYymachlGbkkYbFbUWUFVVFXu3hrhuoD
      MaqGxefG5LDh3dJB+vQVrH4PallCyRfxbG6nHEshWMyUpzNoGAKwFvGEfSAIqLKCLEq4OxpQ
      ZQUEgVifMWJepXoKpGmzJ8LyvWMA2BuCs64OZ10eGqxpipkCVrsVdWaEzkwmsbsdCIKAYBLQ
      jJEbWOQi2Gj0dx7FVJ6izjODuayJXSBDE2ywWqwJATA0wWuHxegQ9OL4m0Kko4lFvWMxh16u
      vuP6916P1WmDdNXjm2ZNCMBaZj7BvGqjv5g487FYT9KLYbmKsP7PLy4575vRPyw3rnEgZgZD
      ETaXlVKEObxOFElBVRQUScFisyCX5RUo4QriaVx2ujteAAxF2K0h0tVIKVNELkuYzCZURcMT
      8ZEYnsLqsCEIAookz7E6ve3kJpamCIPZdMZ5AANdpGIZk9mEJ+Insr4JQQAxW8Qb8dOwsQVF
      WmOjwRK540cAg1vDZM9Y7bDLtcPuNIwRwOCexhAAg3uaNTEFMhRhBqvFmhAAQxG2cixXD7BU
      7rTDNFe5549E3m0CtFw9wJ3YiJfDHX8kcrmKsOlPzyw5/d0mPHcchiLMUITVwmw1o0jKbc1z
      oamXK+ChkMphddjmjXs1HlAzrtVpY9LzOCX55k8rOizW2XR3vACsFP7d3ZRj17SaJoeV8nQG
      s9NOaSy+iiVbGq6gh+xUmlBHPbIooUgyJosZh9dJKVMEAbKTN3medgEWnD51LnKKtYh4UrHM
      ++O9DKeqDeUWoj0Qmk1312yDeja1Y3bZcXU21Yxjctgwux26YWaHHU1VsUX82BtCKAURVZSw
      Br23qsi3FKvDhr85RH13M/6mEFaHDVmUMFvMlQtANeNADNxFI4Amyzg7GtAkhfpvPERpNAYm
      AVQNpVjG7LYjZwrYIn5SJy5XnWVOHr2EYDGBBnK2gCrJmF0OpOSdeTFgYrhym2d6fG4PaRyK
      mctdIwCliQQWj7PiwUIQkNN5BIsJW9hPOZlBHS8jWC1oioreMWZNktEkKBWvTXfUUpn5ZpiL
      XYBfv1h2NEcojVdPqa7GqRUOEH5iZ80wqNwPQEZcVJkMKtw1AqDkSyj5EgDSzAIKoDR+zS8m
      RRE5s3I94FIX4Eu9z2ChMON+gJtnTQiAoQleOQxF2M2xJhRhSqm8aprglRA8Z1s9almanX6Z
      bBbkXAk0FU1RMTsrF4/fjvWEoQi7OQxF2AoowgSzCZPNislqQVNVTA4btogfBAFBACmZQ1OU
      edcTdwO383I+q9MGK+CsZE1MgZbDWlCElaczCBYzcq7iiMQW8lIciWGyVapXXWtHCW8Rixk9
      FjvCLEYPUO9d2hb19emqBUAQ8G7toDQWx+S0Y5r5YVVJxtXZRHFoctY9okEFOVuY8++rfpTu
      llNTa5WpbHZJijCgtiJMMAnImXxFIVQfAJOAe30ztogfKZHB092CYFl7F60F9mzCGvLi3dKB
      ozk8q/QSbHf8IGdwC6n2DaqoKMUy5WQOW9CLOJVEzhbQFBWrz03m3ADqGuzZxKkkztY6lKKI
      s70Ba8ADJhNypkBx+N5a2BksHt3usRyv2MQUZ+a0V92jy+m1q0UsTSQoT6crAlwQKcfTCGYT
      IKx20QzWMHfN/ECT5Nk59+0yXlvKDtTd6IvoTmZNCMCdqghbCztQNxLpbICv3bektK6gm0jn
      0mzsF5N2se9f3Ls8K78NaijC7nxOJ4t82D+9cMQb6GwKMNA/vKQ8F592brk6mwIMRPVMsqcX
      CIefb2m/yVLqYyjCVkARZqsLVG7SSWbBJGCyWFDLq6P2mkrlOTcwtaS0S023nLQLpasVni+t
      TP2uiSnQVcxuB5pSMR/QFrnTtBamIWaHDU1WsHW1IBeKOBpC2MI+Yh+eNOzu1zhrSgDsdQGs
      AQ9SKoecLWINuFFECavfjVKoXNhXGJxALa2MZ+BZTCY8G1sRJ5NI6TzMmDNYfC7KU9eGYGvQ
      q2vPo0oygtmEOJVEsFoojsVnlGOr1/g3t0fwumz0jiZwO6y01vkoywqxVAGf2850pkBZUiiJ
      MsU7VFP99MYtd9eRSCmdpzydBpMJe0MQk8WMUhQpjU9j8bluXcaqiiYr2Ov8WP1ubHUBxImK
      ptDZXo/Z5cBkrVSVszVC5uzAnORX415PObayxw1vlnypTL5UZlNbmFyxzGQyhwZMJfM8sKmZ
      wUkzkqRwfjC2quVcDt4//Ne4Ro8uKe3V1rS2BGCmd7V4nOSvjCOYTLNToVtqSWkSQNOQUgVM
      diu2kJdczwhQEYDS+DSOxiDFsfgdYwKSL0o47RZOX5kk7HMiSgqSrBDyOfn0zBAuh5Wp5NrV
      69wu1pQAXOWqUZl2u67zVLU564jiyLWFV/ZcpbeXEpkVy26+Rf+NW8Impx21KM4Ju/7ZnLQh
      L2QqHUYiW4SZPmMsfq3zSOcr6aYzN94gdm+yJgXgbudmFu16t8fUulGmciLMuezy3UsYArAM
      DE3wnc+aUITdiWlhmVuwJgGL2wkCyJlC5cD+ChgZ1gfcbO+sv+l0nU2BJee51LSdTYFl6R5W
      gjWhCLtT0y5Li6xquLtbyF0apu7pPZQmEsjpPHKuiCbLyNmlzdHvNEXYamNMgVaAq1u0allG
      LV1zvyKYK7tYJoetSnchmE2UxuLYG8OIU8nKLpeq4WyrozAQXY3PuOMw1W1a9jsMAZjB3dVM
      aSKBki9h8bnnuE8x2a2zJuF6WHxu0CoWqdaORsxOG6XoNGaXA7PTTnk6jXiDAGiKOnNybK5F
      Vyl683Y8ejSFPQQ9Di4M6VvGCoDVYqZ8h2zr6qHGelCWqAe4iiEAACYBwWbFGvTibG9ALZWx
      Bj0AOBpCFEamMDvtqCVxrp+hGVSxjKZomCxmQKso86g08uJ4HLPdeju/BgCL2cREMs+O9fUk
      skX8bgeSrLChJUTfWAKHzYLDZuHopXt7QW4IwAxaWZptqKpYmcZA5byv2WlHzuRr+gm93qmu
      OFVto7sahgYWs4mOBj/pvEhLxMdgNIXTbiGeLjCZzOOyW4n4b6F2/Q7h/wfaOzGmZnINGwAA
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      pFfcnbuGQf8/jBhtZWWHAaIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='144'>
      iVBORw0KGgoAAAANSUhEUgAAAJAAAADACAYAAADryOpPAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dfVzN5//HnyqVotwkTCv35q5JB4WOEhFho2/8ZIxMy5i7tbHNmM3dGHOT
      zU1uRjYZGwtjRR3kphJJ5p7I3GUqjm7P5/fH0XFOJzdfn/hi1/PxOI+Hz+e6Ptd1nc7LdV2f
      z+d9va5ykiRJCARPicn/ugGClxshIIEshIAEshACEshCCEggCyEggSyEgASyEAISyEIISCAL
      ISCBLISABLIQAhLIQghIIAshIIEshIAEshACEshCCEggCyEggSyEgASyEAISyEIISCALISCB
      LISABLIQAhLIQghIIAshIIEshIAEsjB7XIbExMTn0Q7BS0o5Ya4gkIMYwgSyEAISyEIISCAL
      ISCBLGQI6CKrAxUoFMUfd7z8R/DDoWyD9Mkq42v0zxXeiueHEf54uStQKDzwGfoF61OyETxA
      o9GwadMmlEol7u7uzJkzh/z8/FLzpqam4u/vT58+fThw4AAA169fp3v37nq/lfYzbNgw1Go1
      Go2GLVu24Ovri0KhwM/Pj3379unqjo+Px9/fnzZt2tCpUyc2bdqERqPRVig9NRekVQNcpS/i
      io/zpPR170tuXt9IiaWml3IuK076wsdNGrQoQbqWpy3j2rEt0tSl+56+Wa8gR48elUaMGCFl
      ZGRI2dnZUmhoqLR582ajfDdu3JBGjhwpHTt2TDp37pwUEhIiXbx4sdQyt2/fLkVEREiSJEm7
      d++WJk2aJGVkZEhFRUVSSkqKFBISImVmZkqpqalSaGiodPLkSamoqEi6ePGiNGLECOnUqVOS
      JEnSY58DPTnmvN7OjXrfnuPuE16RtGQKO5tPYscHCmzul2HfvCeTmpddq14FYmNjCQgI4LXX
      XgNg6NChrFu3ju7du2Nm9uAnvHLlCi4uLjRvrv0DvvXWWyQnJ+Po6GhQ3r1790hKSmL48OEA
      KJVKlEolJibaAalZs2bUq1ePwsJCmjRpwsyZM3Vpjo6OtG3blnv37gFlOAcqVJ/n97B13Ozd
      FdcnuuIiqUeyadmu7X3xCB5Gbm4udevW1R3Xrl2bihUr6n7EYipXrsz+/fs5e/YseXl55OXl
      cfnyZaPyEhISqFq1KtWrVwfAxMREJxCA+Ph4TExMqFq1qlHaqVOnOHPmDPXr1wee4En049g6
      TsFWACpS962PCf+4HdZPdGUeuffAvno17aFqMopx2pLoMZfEL5Vym/ZKUFRUhEajwdLSUnfO
      xMSEW7duce/ePSpVqqQ77+joyIABAxg5ciR5eXk0atSIGjVqGJSXn5/P3r17GThwoFFdubm5
      rFixAoCRI0ca9G7F87Djx48zYcIErKysgDIQUI+5iXypBPKzObPja4J6Hmf61lBcH1uyBZYV
      4PqNTKAaKL8kMfFLLq4OpO85ua16dTA1NcXExITc3FzdOY1GQ9WqValQoYJRfi8vL7y8vADY
      tWsXZ8+eNUg/duwYlpaWODg4GJy/ffs2c+bMwc/PDzc3N4O03Nxc5s+fT7NmzZg0aZJBj1R2
      t/HmNjTo6Ydb5n4SzwGYYWYGd+7oz4gySD9XC3s7ACeat7ThSPxBxD3Xo7G0tOT8+fO644yM
      DO7cuVOqgIrRaDQcOHCARo0a6c4VFhYSExND9+7dDURw7949vv/+e4YNG2YkHo1Gw7Jly+jc
      uTN+fn4G10GZPgfK5/qfMRwoX5ua1QBq06FTY+IilpN8qxAK1ZxYsYRtNkrc7n8n10Ef0DL+
      K0aFJXI9X1uG+m5h2TXpFcHT05PIyEiuXLlCTk4OK1asQKFQGAwxoB3uTp06RV5eHhs2bODy
      5csoFApd+pkzZzA3NzcQFUBSUhJOTk7UqVPHqO6zZ88iSRIuLi6lN+7pby61t+Surg8+HboM
      kebuy5QKirMUZEr75g6RunRwlVxd3STPgdOlmCsFBqUUXImRpg/pInVwdZVcXTtIXfqFSHPj
      rj19s15BioqKpI0bN0oeHh6Sm5ubFBYWJuXl5UmSJEnXrl2ThgwZIl27pv2bff/991K7du2k
      IUOGSFeuXDEoY9asWVJiYqJR+eHh4Qa/o6urq6RUKqWjR49KMTExUuvWrY3S//zzT0mSJEm8
      jRfIQrzKEMhCCEggCyEggSyEgASyeOzjPrVa/TzaIXhJET2QQBZCQAJZCAEJZCEEJJCFEJBA
      FjIElE5EkFIXzab06U3InDiuFpXMp2bnp9o8YzZnGqTsm6Z3vdKH3iFhHPynyCA9KCJdd5y9
      81O835pPslEdrzYajYbk5GQ+/fRTxowZw927D4/5VKvVTJ06lV69eqFSPQg+v3PnDnPmzKFL
      ly54enoyZswYbty4AcDkyZP1fgftp3v37pw4cQKNRsPu3bvp06cPSqWSAQMGkJCQoCtXdg/U
      dYYKlUpFdMRkWp+fRuCI9aTrZ1DvJXZvB4KDW3H4YBIlHwo0DF6LSqVCFR3Bxw33EjrpN66X
      +pc5wPeL0/CZ8B4upnJb/XKxd+9eNm/ezODBg2nQoMEj80ZGRmJnZ8fs2bP5+eefdRGJP/zw
      A3Xq1GHz5s38+eeftGvXjjVr1gDw5Zdfan+D+5/169ejVCqpW7cu58+fJyoqigULFhAbG8vn
      n3/OypUrdeWW2RBmXr0VQ2d8RNsza/gl6UEXUZScwMFWbenm0ZqGBxMe3nuYV6e9vx8NU5I4
      YvToqYi/1i5gj8tYQtysyqrJLw1KpZIpU6YYBYGVJDs7m7NnzxIQEEDjxo3x8PDgyJEjAIwZ
      MwZ/f3+srKwoX748SqWS8uXLl1rO3r176dChA5aWlmRkZNCiRQscHBwwMTGhadOmuLm5kZWV
      BZT1HMjGm67KbI4ev3T/RBFHDu7HodWbVHNsinOFXcQeeIrxJ/1nZq+3572QjiJ++hHk5eVh
      a2tL5cqVAW1wfPEPrR87VFBQQFRUlC74Xp/MzExOnDiBs7OzrowTJ05w/vx5NBoNaWlpXLp0
      SRc7VIarMgBMMTOD85cygDpACnt3Qauv6gCvo3CHGYkp0L6U4KT8DLYt28CFDiPQ72ROLxmI
      cglYvz2P3vZl29pXjfz8fMqXL68Ti6mpqVFQ/dWrV1m4cCE9e/Y0ij4E2L9/P61bt8bGRvtf
      tVq1aowZM4aPPvqIS5cu0ahRI7766iusrbWR72V8F1ZEYSHUfb229vCvBPbdc0fhDGCKS+u2
      ZO9L4C+9K04vGaiduHUewhrNOyyZ4mPQyzQMXsvupQOpErWU9QaTK0FJzM3NKSgooLBQG9VZ
      VFRkMOwdOXKEpUuXMmbMmFLFk52dzeHDh2nTpo3uXEZGBsuWLWPWrFnExsYSGhrKokWLuHr1
      KlDWAlLHEq2y4c1mrwPwlyqaqwU7mOilndl3+3ovXI1GpaeghsFrUUXNo68T2Dg1xt7cuFjT
      N4II7XWNpXM3lz7BFgBgYWFBVlYWt2/fBuD48ePY2toCcPr0aVQqFR9//LFuOU9JDh06RJMm
      TahWrZruXExMDB4eHro5UOPGjWnQoAEnTpwAylBA+TcOE/HFQuJbvMdAV1MgnaSDV+nw+R96
      M/xfGO18lYNJJboSG1dGh02m3s5xhC5NLSXI3hSX9ybgc2EB0zcLCT0MGxsb6tevT2RkJCdP
      nmTPnj20bNkS0AqhW7duBsuD9MnNzSU5OVm3oqOY+vXrEx0dzbVr1wC4fPkyR48e1c2zZAto
      x0Rt79I5cDZJdccS8W1v7AGuJ7D/dAc8O+jfNdnj4eXM6f0Jxj2JTXs+WTEZx22jCf3xDEYr
      v63cCBmr5MyC6Wz8+9/1IGjlypUolUp8fX2JjIzE19cXX19fjh8/zo0bNwgJCdE90wkICODm
      zZtMmDCBQYMG4eDggFqtJjU1lWHDhhk86wkJCdE9U0pMTKRy5crY2dkZ1O3u7o5CoeC9995D
      qVTy4Ycf0q1bN958803gCRzKRDiH4FGIVxkCWQgBCWQhBCSQhRCQQBZiYaFAFqIHEshCCEgg
      CyEggSyEgASyEAISyKLsfKI9fBg6Yxd/6/lDXVwdWMJH+iPWnyr5liuNsJ4KFIpOzE4yriX/
      1Ba+GOqDh0KBwt0L/xHz2KVfSXYKqz+67zPt7oX/R6vRt5kubsOw9df0SlUxWRHI6otP/+2f
      J/8Kn+i8awnSD0M7SG6D1koXinOsGiC5FmcouCulrX1f8vKaIR3U95g6vkjy81skrfrGS/Jb
      dNyghoKzq6RBbj5S6JZz0t0CbRnnVD9Ic3/T1SCtHeQm+YRukdLzJEnKS5e2hPoYtyEoSAoy
      qDdO+sJ1gLTqgvRS8CL7RJddTLS9guB5E2l3KpyfDpViU2dmRZPA/8Mjex8Jpx6cvpgQz12l
      G4FtPbgZn8CDTiGTzbMXkjNwHtN71sXKTFtGXY9gxvZ20mZJiiT8lAfjJvfkdXPA/HV6Tv+K
      3pdKtKH2AIb77Gb9zpfTjVHfJ7pSpUoMHTqUxMREXeBYMfo+0XXr1tX5RJek2Ce6S5cuwIOY
      69deew0TE5NSfaIbNWqEiYnJs/OJBsDGhx6dsklOfdLQwWsc2HMSd9c3MWvmTMuTO4nVKeg4
      KQk2uLs1fWjc7cXUI2S386SDvq+wWTOcXbI5diJD/yRt+vTh/PKfOFWykJeAF9knuown0Vpn
      1rMXjRtN4S2Sw8LZ6dgNr2KPx8y9xB5pTas3zaCaArfGJzmQeH/tWO497lHs6Go4nwq8P3nJ
      vaeGihVL+FJbU7EinDxXYoLTaCDBDTYRoXpSH/0Xg8f5ROuj7xPt6+vL1q1buX7dMPKq2Ce6
      R48eRnXl5uayePFiUlJSSvWJ/uWXX/jpp5+YMGHCs4qJLqSwEOo76S0/2TpO+8O79WDcgZZ8
      uzyYpvfbdfdgPAmN3VBUA3CidbtaJMQf1G6VYFmBCvzN9ZvavE6DI0hMTGSu3ve2rGAFd+6U
      2FrhLnfuQON6TiXaZo13v84c+DGKa7w8PI1P9Pbt29m1axcBAQFGS4Ee5RP99ddf06pVK0aM
      GIG5+YPY4tzcXGbPno2lpSWTJk3SmYxDWQvobgx/7LLBpbne3gw95pJ4IJKJ7jaY12pMXZti
      Vd8lLiYOTi6k7/2eZdDKvyEuhri7AM1wbp3N/gNpPMz416l5S2ziY9mrr6DC46Qk29CiSW2j
      /GaugxjKCn5MermshP8VPtH51xNZPWEue1p+wJA2JWYtZvXoO+97BmXO4N1Pt2lv9QuTOBhf
      iyE/JpKYeP9zYDH+NvEcTCoEqtF7WD/urhzLp7+fR10IFKq5m6dXrmsAQY32MPfL37mUD+Rf
      4vdPJ7H59SD+r2QbAKiB33/eZMu6rdwuqy/+HHiRfaJlC2jrOG3v0a7v1xys9wmbFvalRmkZ
      zeoRuGQ1A659xbtf7eJGQjx77Lrh1VQ/Tys6+VRgT/xhCgEz11A2rBiAZvVQvN0UKDx6sOh6
      d/q0Lo7bdSJw4RIGaFYzqKMCRcdBrNYMYMnCQEoOYMVYdx3GwPNx7JP7xZ8jzZs3x9vbm/79
      ++Pj40OdOnXo1q0boH3GM3ToUK5fv46pqSm7du2iU6dO7Nixg0mTJunmKsXPejw8PIx6kVOn
      TjF37lyDZ0QdO3YkJSWFS5cusXbtWtq0aWOQHh0dDYhwDoFMxKsMgSyEgASyEAISyEIISCAL
      4RMtkIXogQSyEAISyEIISCALISCBLISABLKQ4ZGYTkTQQJacNjzbMHgt4YGO7JumZEUd7b/1
      2TdNycQdJYrqOgPVZ+21/85OJWLWTNYdSCeHSji6jWD6tMqsUU6k5GXQkOC14QRemoZSr1DL
      Ks3o/el03m9bBVOA9AiCBu6i09pwiptTdDWOeV/OZefxf8i1rEKzvlP4NtiFF9EDVqPREBUV
      xeLFiykoKKB3796EhISU6rKalpbGjBkzKCoqYuzYsbRu3ZobN27w/vvv6zyEinF2duabb77B
      0tKS7du3Ex4ezs2bN6lRowbjx4/Hzc0NjUbDoUOHCAsL49KlS1SsWJHhw4fr3szLNtnsOkNF
      8W//pBSLzIiiC0SEjmaD/XiWbu9ObVM1F3fsJ4v2fKZS8RmQHhHEwAtDHwgO4BLQMJi14YE4
      ks+NfYv4MHQSNX9ZRN/SjDmz9zHz/amkd5/H+kXOVCm6weHYs9yGF1JAJ06cIC4ujlWrVlGx
      YkVmzZrFn3/+Sffu3Q3yZWZmsmLFCiZOnIi1tTXz58+nVq1aODg4sHHjRoO80dHR/PPPP1hZ
      WbFnzx6OHDlCWFgYNWrU4MSJEyxfvpxGjRpx7do1oqKimDx5MvXq1ePKlSvMmzePZs2aUb9+
      /RdrCMv8YxErcvoxc0p3apsDplY4dfemxX9VijnV2/vj1zCFJGPDaQCOrZnNrqafMHu4M1VM
      AfPqtPJx4zX5X+GZoFKpePvtt6lZsyYVK1bknXfeITk52Sgm+urVqzg7O9O0aVOcnJzw8/Pj
      6NGjRuWVtLNr3749EydOpFatWpiYmNCkSRPq1q1LUVERjRs3ZurUqTRo0AATExMcHBxwdXXV
      Bbi9UAL668ghKrRtzRvP1Ik+nZTDt2jR1vWl8ZzOy8vDyelBgMprr72GlZWVQZQigK2tLYcO
      HeL8+fO6mOiMjIySxZGUlESVKlV0dnYl454PHjxIuXLlqFKlilHamTNnOH/+fNn5RO+YqDSY
      mzzJkFbs/VyMdkiz5949qFGn2sMvfCLyydi2jA0XOjCiVFf7PHLVUN1Obj3Ph9JiosuVK8ft
      27e5d+8eFStW1J13cHAgICCA8ePHk5+fT4MGDYwcWQsKCti/fz/9+/c3qis3N5c1a9ZQrlw5
      3n//faOY6C1btnDixAnGjh2rC2t9oeZAFSrAtZuZQCnzo8dxegkD76vSsrYHwUum4FNqF2OB
      pRXcuJkJvPgiKi0mWpIkKleuXGpIa7GBJmiHvnPnzhmkp6amYmFhwWuvGQ7YWVlZzJ8/H19f
      X1q3bm2Qlpuby/fff0+TJk345JNPDHqkF2oIe6N5K7IPJvDX05iwNgxmrSqKeVrDaRqXZjgN
      gCNNnW04djCpFDvhFxMLCwsuXnywyuTKlSuo1eqHWvYCursn/c1ZCgsLiYuLo2vXrgYiyM3N
      Zfny5bz77rtG4tFoNKxevRpPT0+6dev27GKiy4Jqfu8zkPVMm7OLjHygSM3FbTEce+ISbHAd
      HcbkejsZF7qU1IcoxGXIh7Q9uJipESn8UwTk3+DwzgNcKZNvUfYolUp+/fVXrl69yp07d1iz
      Zg0uLi6lxkSfPn2avLw8fv31V91Cw2LOnTuHubm50Y4/ycnJODo64uho3PMX75FRbOtbkjLz
      iS7+6O/vpdvGQKlEOW1f6ef100zfYPgP8+mWvYLhvkqUPv/hs3252P5XLbKh/ScrmOy4jdGh
      P3KmtCXkNj58FTGWmnsn0c9LidJvGMvOW1D5af4Az4EmTZrQsWNH3n33XXr37o2jo6NuVam+
      T7SpqSkqlQo/Pz9iYmL4+OOPDWKit23bhru7u1Evcvr0aRYuXGjwmxT7UGdkZLB+/Xo8PT0N
      0nfv3g0In2iBTF6oIUzw8iEEJJCFEJBAFkJAAlmIhYUCWYgeSCALISCBLISABLIQAhLIQghI
      IIuy84lWKFAoJqPSy3F323jt+ZCNZBpcuppAfZ9m1WSDcjx8hjIv/haFQOG5FQQq+rBE3x2z
      8BAzO3Vl9kvmNPa0aDQaEhMTGT9+vME+p6WhVqv5/PPP6dKli+59FWgt7EJDQ3F3d8fd3Z1p
      06bpXlNdvHiRkJAQ3N3dadOmDf7+/qSmpgLaMNkvvviC9u3bo1Ao8PX1NShXdg/UY66ew1ji
      lyh1KVoLu46jRtE6IZ6Dj/O2bDyKjYmJJCbGs3FSI1QffszGa2BWbxCj/W+zPkKl80K8tnEp
      m11GE+wqO5zppSA2NpZNmzYxbNgwGjZs+Mi8ERERVK9enQULFrBmzRrS07Uvt3/44QdcXFxQ
      qVTExMRgZWVFeHg4ALdu3WLAgAHExsZy4MABxo8fz+LFi8nOziYrK4v27duzc+dODh06xPz5
      81m3bp2u3Gc3hBUmcTC+Ne38PHFrXGxb9ySYY+/xf7zV+AiHku4CZrQZ8gGNd/5I1DVtuT+u
      uMXAIJ+XJiRVLp06dWL69Omlhlvok5WVxenTpxkwYABNmjTB09OTw4cPo1aryc7OpnPnzpQv
      Xx4rKysCAgLIy9P6Bbq4uODh4YGFhQUmJiY0b94cOzs7CgsLqVevHl27dsXa2hoTExMaNGhA
      nTp1dNc+MwEVHo5nj2NrXKo50bxlBXbGxD/ULPOx1OjNsD6XWLLyEBmbl7PlzWDebfrv6H3+
      G/Ly8qhcuTJVqlQBtMt2srKysLKyonnz5mzcuJGCggLUajW//fabbk/5YjQaDZcuXeK7777j
      jTfeoGrVqgbpN27cICwsDGtra51vdZl5JCoUChSBq3VO80fjdoLiTeoBb7b1gD0HMV4fUBr5
      XPo9jHXnOuKtcxA3wzV4NC5bpxK8NJthH3Qt4Q0tAK2Aypcvrws0MzEx0Q01/fv3x9zcnA4d
      OtC5c2dsbGzo1KmT7tro6GjatGnDu+++S6tWrQxiplNSUujYsSO9e/emYsWKjBgx4kEdchtt
      MAeKGHzf3DKNA6p7eLTVRrGZubalXbaKA2mPKEhn99uOAeEahq6eQXf9McrGh8H+5bjaPBD/
      hzlo/suxsLCgoKBAt9xHo9Hg6OioC0utWLEie/fuJTo6GrVazdq1a3XXdu7cmcTERDZs2EBO
      Tg7ffPONbkMXZ2dn4uLi+PPPP6lVqxZTpkwhO1sb7vlshrC03fzxdwFbx7lpe6aOXxDH3/yx
      +xEKajyKjYm7WNyvLtjWpUnNkjHNZthWtinFmV5QjIWFBbdv3+aff/4BtD2Hra0tN2/e5PTp
      0/j5+enmQG+//TZpaWlGd3RVq1alf//+uvBYfaytrenWrRt169YlMTEReEYCupgQz98dpxKX
      +KB32hrakr8NNlMpDRvahIYzrcF2PhgVZrBtk+Dx2Nra0rBhQ9atW8eJEyeIjY2lVatWVKpU
      icLCQlQqFQUFBRQUFLBr1y7KlSuHhYUFmzZtIi0tjYKCAjQaDampqZw9e5ZKlSoRExPDoUOH
      dJPm9PR0kpKSsLXVBho/AwFpN1Dp6N3RoKeo4dmFlif3cOCx+wzYoJy0jml1thA8agVG24v9
      C1m6dKnOu3ndunV07NhR5+Os7xMNEBgYyI0bNxg7dixBQUE4OjpSoUIFxo4dS1RUFB06dECp
      VHLo0CHGjh2LmZkZdnZ2zJgxgw4dOuDm5saUKVMYPnw4jo6O1KxZk5UrV+Lp6YlCoSA4OBg/
      Pz9dsL4I5xDIQrzKEMhCCEggCyEggSyEgASyED7RAlmIHkggCyEggSyEgASyEAISyEIISCAL
      GQJKJyLI0BtIqZx2fy/SfUxTKpmmvzFp/hm2fR1Cbx8lSqU3PQaOIyzuKkV6ZRnkv38uKCJd
      6/OsLFmXXn37punVrbUCViqVjNyov2f6PqYpg9CzLyL/zDa+DumNj1KJ0rsHA8eFEXf1aezR
      ni0ajYbk5GQ+/fRTxowZ89iY6KlTp9KrVy9UqgcR6llZWXz++ed4e3vj7e3N7NmzdXfY6enp
      jBkzBm9vbzw9PXnnnXdIS9NGTty6dYuvv/6aLl26oFQq6dOnj0G5snugrjNUqFTFn88o1S6x
      6AIRo4JZmteTBb/tRqXayYZp/lRITcLYQ7QUHAMJv1/HjK5aj8VH1gfg7Awr15L0ED0UXYhg
      VPBS8nou4LfdKlQ7NzDNvwKpSU/UoufK3r172bx5M4MHDzZyFytJZGQkdnZ2zJ49m59//pnL
      ly8DEB4ejrOzM3/88Qe///47VlZWrFmzBtAG3AcEBLBt2zZ27drFqFGjWLZsmS4m2s3Njd9+
      +43Y2Fi++eYbIiMjdeU+l7jQzKjvWJLTj6WLu+N038LXyqkdQz94hpXW+g9D6s1jY8wwXI3c
      NjOJ+m4JOf2Wsri7k9bNHiuc2g3lWTbpaSnucR/V8wBkZ2dz9uxZRo8ejZ2dHR4eHhw5coSq
      VauSk5ODl5cX5cuXp3z58rz99tv88ssvgDZgTJ+mTZtSrVo1CgsLqVu3ri58FaBevXo4OTk9
      +5hoff5KPYzNM/d/LokZrj17cWHVL5w2SvuL1MM2tG39Bs+1Sc+YvLw8bG1tqVxZa9bXrFkz
      XUx006ZN2bx5sy4mOioqihYtDC3cNRoNGRkZhIWF0ahRI6OY6Js3b7Js2TKsra11vtVl65EY
      FEG6UY5ccnOhRrEvs/58pkR+Q79F4304/msa9ieo/hYi95V4mp6bSy41eNCkoFI9Hl828vPz
      DWKiTU1NdUNN3759MTc3x8fHh169emFjY0PHjh111+7evRtPT0+Cg4Np2bIl/v7+urTjx4/j
      6+tL//79sba2ZtiwYWUXE20wBwoPLMXh2RJLy2L/Zx7MZ2Z0fXRZqrUEP3oJ1BNghWcfLxJ+
      2o7+dBpLSyy5xoMmhevmVy8z5ubmBjHRRUVFODg4oNFoWLduHdbW1uzcuZMtW7agVqv5+eef
      ddd6eXmhUqlYs2YNOTk5fPfddxQUFADanmz79u1s3ryZmjVrMn36dHJycoDnNITJ8n+WianL
      //EOa/gpWX9R0Rs0b5XNwYS/ePHuuZ4eCwsLsrKyuH37NqDtOWxtbcnMzOTs2bN069ZNFxPd
      s2dPTp48aTSvqlKlCv7+/hQVFXHmzBmDNGtrazp37kydOnVITk4GnpOAqvkNpq96LROmbOOi
      uggoQq3Oex5VA/b4vt2CrRt2kPWgRfgN7ot67QSmbLuItklqnluTnhE2NjbUr1+fyMhITp48
      yZ49e2jZsiWVKlWioKCA+Ph4XUx0XFwcoBXdli1b+Ouvv3Qx0WlpaZw/f55KlSoRGxtLYmKi
      btJ8+fJljhw5QqVKlYDndBeGqQujf1yM3ayZjOg5k5yC8lSq3gifQQOwew7VW/P5K1kAAAUp
      SURBVHkPon94EKtoSLFdtqnLaH5cbMesmSPoOTOHgvKVqN7Ih0EDnkeL/jtWrlzJypUrdceR
      kZFYW1szZ84c7O3t+eKLL5g6dSrVq1cnICCAOXPmMGHCBD755BMcHBwAGDlyJLNnz2batGmY
      mprSpk0bxo0bh5mZGdWqVePbb7/VrcJ4/fXX+fDDD3FwcCAnJ4clS5Zw7NgxCgoKsLOzY/jw
      4TrjceETLZCFeJUhkIUQkEAWQkACWQgBCWQhFhYKZCF6IIEshIAEshACEshCCEggCyEggSye
      kU+0iskKBZOLQ2cf4QNdWnppntP/Zv5bn+hff/2V5cuXG5wvKCggOjqa4OBgPv/8c6PyT506
      xZQpU+jXr5/Oa6iYK1euMHfuXPz9/UlJSTFIk/0ytcfcRL5UPj4fjUexMWIwTuRzfc9cgj/8
      mNe2LqdfjZLpgpLExsYSHR3NsGHD2L59+yPzzps3j9q1axvtKf/TTz9x9epVxo4dy7Zt2wzS
      0tLSCA8PZ/jw4UblX79+nZkzZ9K/f3/s7IxfNP8PvHKLfaD7cijpLv26C8fDx9GpUyc6der0
      2JhogM8++wzQGo7rM2jQIACj3gWgefPmzJs3D8BIQPb29ixYsADQbgFeEjEHEshCdg+0dZyC
      rcUHTzQMPfCBHt1Br/c5uZC+ioUPjsWQ9lLw/OZAegKp4ODJyJI+0EIwLyXPbwh7rA+04GXk
      Oc+BhA/0q8b/4C7svg/05P8QPKoCq5cNpREYz4HowVyD7aP+vSxdupSlS5fqjouX6CxcuJCa
      NWsyYcIEZs6cibW1NSNHjuTYsWOA9pa+RYsWLFq0iK+++oro6GiDMuzt7Vm1ahUpKSlMmDDB
      IA1g5syZ2NvbM2rUKKM7wOHDhzN8+HARziGQh7iNF8hCCEggCyEggSyEgASyED7RAlmIHkgg
      CyEggSyEgASyEAISyEIISCCLZ+MTnR5BkJ5vMwBFF/gxSMmAFfrGh0UkzfXjrfnJFAH7pilR
      6syii8sfiaHd87QS3or5nNn2NSG9fVAqlXj3GMi4sDheQLvnp0b4RAOY1iFwxFtkb4pE53l5
      /TdWbnVmxBCXh7qlau2ekx5iRVfEhYhRBC/No+eC39itUrFzwzT8K6TyAto9PzUvsk/0cx3C
      TF0H8l6DXfy0/TpQRPJPa7jVbxDeJW2c9aj1nyF0Um0kprTQj8wovluSQ7+ZU+juZIUpYGrl
      RLuhH9DD2O3zpUWpVDJlyhSd29jDKPaJDggIoHHjxjqfaLVabeATXbxvfLFtnbOzM+3atcPC
      wgITExMjn+jOnTtjbW2NiYnJ/8Yn+gH2+A3uxeWVa0n6O4rVW1sQNPAxXs1mrvTsdYFVv5Ti
      +ftXKodt2tL6+RpQv7C8oj7Rhpi6DGGE8x/MGLWSnMHv4W31+Doa9g+i/ha9oe8+uVoDarR2
      z/pzMsM9Mf4tvKI+0SWxwXvAW5hcb0q/t59wnLHypI9Xwv2h7wGWWgNqtHbPjgSGq1CpZvCS
      2z0/Na+sT3RJTG1sqYQ11k/Q+9y/Apf/ewfW/ISh3XNzWmUfJOF/YUD9AvLK+kSXCfa+vN1i
      Kxt2PHB7ppofg/uqWTthCtsuqtHaPat5ye2en5pXzCd6BxOVO+7/uyHBa8MJlHVnZIX3oP6E
      B62Chjq3Z1xG/8hiu1nMHNGTmTkFlK9UnUY+g3gB7Z6fGuETLXhleXmGMMELiRCQQBZCQAJZ
      CAEJZCEWFgpkIXoggSyEgASyEAISyOL/AdBWE6M2fF/nAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 10' width='192'>
      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
      e3cW+ea770fBcVWSiTj1RoMvPv1kMnvyGoX1Ddq1GrMPH7D0z39AVlXMfh89GKDf6XL/UNjH
      h8CNMIAvPvsUy7LAhUQ8TiY1hSCKbO/somsas7lpdF3HsiwEQWCvUDxTT6TrGl6vh36/z3Qm
      w9LKKvfvLLK6vkFqKolt3+y5/3eCC5nF29imRSSdorixSXJ2hna1hn5Faw03gRsVDKdrr4pz
      Hy7j+caAeBTHc9aBcqVaQ1VVfLqPaq3G4wf32NreZfHWPKVyBVm+mX7pu0QQwKjVCcSiKKrK
      49/8msrOLnOfPMKon78a/E3l1DKpHwKHJd4fjaIu92PzJ8n34zlcCNs7yjPYDytWU1cXdHdT
      +KDf/ytra7x4uYzrusMi4K/Vqi2VK+/oyG4uS7//BqPRYOXb77Eta5i0Y5o4to3zAWo0fdBv
      gEazhWVZfPPd9/j0YcRks9UmGPDTHwzQvF7+/nf/yBeffTpRnxuhal62nj1H8Xj47f/+f5C+
      tcCg10Pz+ei0Wkdq8n4IfNAGkM2kScbjfPfjj0iSNKr2Pkz9NC0Ln09nJjd9ZYFkHwKJ3DSd
      ZguPpiGIIgICxfUN0r/6mmD8w3MbP2h59P36w59/8gkAA9NEHgWV7TMzPf3mBj5ifKEQvv1a
      yqMHfv7TN1M0PxQ+Knl09ZxVxCd8+HzQg+AJE07jnY8B9uXRo9EIiiyzur5BLBql0+0ijeTR
      F28tnGubbyMYLhA6fzCgP3j+bLPz7ucixyUKH28/+M4NYJjT6iMWibKbz5PLZqnWa+iadpAP
      cF7eVjDcefdx3XKNF/2+4zrXHg0qixIBz9nWEXRVxad63hDTPY7kOTu8Y8Vx34Uwlu041Ot1
      fLpOLBZje3eH9NQUbaODKAhXqngw4XhukjjuRbgScdx3IYwlSxJffv7Zwe/3pySvolh8sVTG
      ti1SU1OsbWySnkqyvZsnk05RLleYyV0+onQoNLXK3OwMju1QKJUI+H3Ytk1/MCASDo9VbjsP
      ruuym9/D41GJRaMsr66Ry2bY2c2TiMdpGW2y6fSRNvYos25+dgbLsilVyvh0H67r0Gi2mJ+d
      OSK/+LHyzl0ggOdLL/H7ffh0nUg4TLVWJxq5fMKN1+MhX6gTDoURBIF//uZb5mZy/PDkKbFo
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 10 (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 10 (3)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 11' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 12' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      eGrCkwMI51kAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
      TQIQWvt/BI6PcdHv49oAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 8' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy915fcWHan+8G7AMJHpHcky3S3VK1udWvUmjvSmrlP90++L2PWLEm3JU11
      l6NPps/wDgh44NyHINllyCJZZLLIqvyeSAQCBxGRB2fvffb+bUkIIbjmmp8hkiRJ8o99E9dc
      82NyPQGuea/xff+13n89Aa55r3ldC/56Alzzs+Z6Alzzs+Z6Alzzs0Z98g/f91/bnrrmmrdN
      GIav9f6nE8B1XdJwxh//43PW17u0Nm9QtZSnJ+ZpRFIoOJYOgCgLLnp9Njc2vncAfzZhGsRs
      bW4gS385nqYpugKJUDHUby5EaZogSTKapr30Bwl8H6fi4PtLPM996fc9IQzmpEKj5trfOJ5l
      KaqqI0nPeeM1Pzqe573UedkiRJIkRF6g2AbwtQkAkARj/GVE79/+Gfn2I9rdLu2qxeD8mO5a
      lzCTiVOBkg7JtCYyyQsngOU49EdTRr0zUE0WswnNtS388SVqFuBbW6hZQM0xiEsVKfWZBQlp
      smRjfQvHszk+PkNRFGazgN/+7W9Qn2G4nT26R627ydHZkO12Bc2wqXgVhGTgj8+RdZvF3KfZ
      bqFIEC6m6E6V6XjE1t4+X3z2GZX2NvHSQBQpuWQiZUvCKKVUdTzHRiEjLlS0MgbDY6PbfMmf
      6Jp3gfhsBIBi6mSzAPjWBJAVjfbGHp/cbDMMCjTb5suHAzbMnMOjY9xqC1SL8XCK4eo0Wy9+
      0vZOjzEqde7e/pR6a41au0u4jJAVlYphc+/oiDxLWPMMhkHMerOFrikoqs3g9BBsC2E0adUc
      ZORvrCJfx2u0OD+5oNmscn52guK0KY9P+Zu//S1ni4CKnfHgwX3mYYxCga3kRJeXXMyW1Lrb
      bO3dACTiOEbVNGSRsVhGWJaDZWlMghjP1NBI8cMUohlpw0N/hVXqmh8ZIRCloMxyZH31u0nf
      lwox6Z+B3aLhmj94zDDwibMCS1cpJQXD0J/ejCpDWgiWyxDz8esUGbKqk8Yhjuuy9APsSoUk
      SaEssCvuMydBnueUZYkkyyRRiKrI9CY+u1vrJOGSUpLJsgxDU0kLUClQdJNoGeBWa4iyePIt
      AasB0jhCUg10TaYseWwGCR7c+RKrsclGu/ZKZto1b57FYvHSJlARJYAEQiDpKoqmSt87AV6H
      PM9f20F5GYQQlGV55eNc824SRRGWZf2g9zYaDUl98Wk/DFVV8TyPsiwoS4GiqN9yJAVCgPS1
      g0IIiqJAUVVe1ufMsowsy74WwZKejiOE+Mb1vxcheHqFa4/3vSHPcwzDeLmTixyQVgv84zS4
      K5sATzg/OmTsR3Q7bRTdpOZVyLOE4WRONJ/S2donWoxor28zOHtEisHaWhOymC/vPOKT3/4N
      +vMM/6/R7/cxSAjwaLkK40VCFoxxWxs0qzbnFwOqrkmwzJn7Q1rNNormEPgzTFVCtwxmgUAT
      IaWs45g6F2fH7N76FXIeEiUZUVawnA6oN5pYXoPZdMbWRvd6wrwnSJMx0mwMqoowV9G+K58A
      Qgh0yyYOA0gzhufHFLLOjVs3GeYFQe8eibXO6ek5ioCt7S5nZ6fkRc7aWhftJf+2gvmYS99H
      q0kUcYkoBappk0YBo2hGpdah3zvD0nRst07Nkfn0qyM++uUt+sf3CfoJ9dYOAglRFvh+QK3V
      wTFVHh0Oqdgmp4fnrO9vYSsZ948u6FiCIBe4L3uT1/yoCMtCmJtI4RIem81X5gM8IYljdNNk
      OrikVE3GoxE39rY4609Ya7eAkmG/R3tjB6VMOO9PcXQoNRsRL2mub6J9zwrwxARK4hhJKkly
      ienFIeeLkt/88hYC0DWFs4sB7XYTqRSUZUqUFlimxXA8wVRBsxxM00amBCREWZJEPppTR6GA
      ImE4Dam5BmkusG2bwWhKu1nDsu2XNtmuebMsl0scx3m5k5MYdANpOkY4FZxG8/13gouioCiK
      F594zU+SOI4xzR8WpWy321c3Aa655m3wKmHQbyNJ0tVFgZ4wGgzwbIlJ5uCZMpoiUSCjIBhP
      xtTqLca9U4IUvIpFo9kkzwsMTSHNcmRZQaJEUjR07fm3e/vzP7G9f4Pb94/5q48OkFUNVVUQ
      QqLIEoQkk+cF5uN9iCLPkBSVLE2xLIsHtz+nNOtstGsYhkYpZCRRMJtOsat1KHIMQ6cUEjIl
      QlIw9Os9gPeJ/PILJNOj9PtIVg14C05w6M+4PBsRljYLf85Gq8pwkdL2TErAtD1q9Rqz0x6D
      gQ95wqd/vs3ehzfJliG65SCXMUKx+OiDG88dx604HB4e4TgWn3/6R2Szjmmo7Nz8iPOH9/Hc
      Cn/+4g6b+x/gGhLhbIhA43Q44vd/+CfSQmDKMB6PSOOIUtYp0hBDNxhOp6iGg1rE5CWrkKms
      8/GHz7+fa949ymiGlIZIldbjkOhbmADNzjqbWxuMFzHTmYtr6VieRKdRQxQxYZYBGbpp03Y0
      CiFz4+YBrc4ahiwhgKOHd+lsbX7vOLXWGqq1xDQNZqrAsCpcDidUdIWq6yIUjYODAyoVgyDK
      aHbWkVQDxbSxdYXd/QOEkCjLHFlpATAb9tGcOhuOTpSWGKoClPz53/4Fp3uTMAyxbft77+ua
      dwelsQdFhigyZLsOfC0KFATBdTr0Ne8dr/MQ8jzvLz7A+/oky/OcLMt+7Nu45kdCkiRk+YfX
      dT2dALIss+gf8T//4wG/++0n5EVBu15htsww5ZwwjFEshyzNOTt+wN/9pz+81ACD8xP6syUf
      ffQhmvL1GxVMJjMajfrTIxenj5guYj74+GO0b32mJA6RVRPtW7nQkiQhSRJnx4cIzaJi2dTr
      1e/cRxH7zDOVhrvKGxkOh7Tb7Zf6DM9GMBgM6XQ6j+/9iEwy2N1a/86ZT55SeRzipyWepXB0
      Pma9U8cyVMJUwbH+Yo3OplNq9fp3rnPNd3ny+38f58M5kiRRsXSOelOKoqTurR743wiDZvGS
      P/7L/2Y4CKh3XQ4vFrTqDUw1Y7fR4CwIufflI259coP/9g//10vd4MnDe0yWKaRLzFobW5MJ
      lhG67RBNRximTpBCu9MlDUYEyxS7YuMvE2y1BN2if/SI1uYahtPl5m73G9d/shHWOzsmEgrL
      8Qi7Vufk/pe0N25iVV3C8QWWaSL0Croi0ehuML58hD+PMAwVFJVC0kgWI4JCpWGpQIlkN6jb
      KgoSk9mYqFSYX57Q3twiFza39tf407/9Mx/+5j+Tzfv4mUQejJEMm5P79+nu7GPaDpYq0zt9
      gO52aK+vIYVTzmYJrppjGCrj0ERLe2Sqh6kpKBRY1Ta7m91nf6nXPOVlNsLyouR8OOditCDL
      C7Y6VbK85Dcf730zDCrKAsNtsaMa+FaT/+efPmawSKjIKagON1slNa9Jd6P10jdYbbTZulFn
      dHFCkCvMJgN2drYYLWK29g6giMn7Y0zTRC0skgws0yQrZSylQOgWa+td3EaHLH/BYAK29g4o
      i5B0ax/DsNjaXOP24BTbraE7LuenZ2zvqMSORxrnVNtdQj9AQ1DtdKhLq+IXkUeMgxzb1Dk6
      7dHpNBH+EmdrF6/uYVXamKZKd22NMs+fJtLlRUHVcdne26NarxFEGYZpUGuto+kGlqGT5BZb
      dZVCM9BUmVzEyFYLSTMo0pRKtY0kCsIwwrZ/WKbjNX/hbDinP/a5sdlkOFuyWCY0nrUCvEme
      ZHZ+82DJMk5xrB9eX/BtXsYHyPMcVVUp85S0kDCNq4vfPxnrmrfDG3OC3zRlWZIkyXeOq7L0
      zOOvw4ucIF1fbX7Junnlcd8nY13zdnhjTvCbRlEUHMdhMrigPwu5dfMG6vckteXxknuPjtjZ
      u0XF0kmS5OXzvFk5jqamINse+hsQexGiJAhCXLcCwHIxJS8FUS5Tdy1IEiTP4+mfe5myiEqK
      NGYxHSA0l+1OlVyxMFSJ5XzMZJlQcz1Mu4ImC5I0/cZn9BcL3Bds65d5ShCleI/v62t3TBjG
      r28yiZIkK96bXe6iKF7oA6SjBZKqUIQxkixRxBmq95bSodMcbqx73L73ANvQOH14l52bH3L/
      3hEff7TLeDLHqlTZa1WJs4w4mPAv//s2zbZHu1bnqzsPuPHBLeyKx0bn+UXos9mcuqNzdnKK
      7dY5u/8F9c4OlufSrhoMRz6900Maa9sIZHQlB83ENXXCIODeozNuHuygyoLLScLf/c3HPLj7
      Ja3uOndv32P/5g7LWUhjZ5e7X36Ga1aYZI+oew6PTgb84x8+4e7t+0iKSkUvKRJIHZlBPGM6
      mqDmCUbdY56VTGZT8jShN5zSdGTmuUrN0JDNCkno0xvOsR2DOIOPb2zyP/77/+KTP/wTvQef
      UetsEy5G/MvRGZtbm0z9jPW6AbqNLcs8nE+o1hosZkM6+39N2D8kU3Qyf4Hl1gmCMRWnxjL0
      MW2PMAzRygi/1HEVgaZrDPyU//S3n/xkRKO0ukM6WiCKkjIpkA2NIoiBtyCMJfKYe8cDmtUK
      6902br2JyFKqtgVWhc3NTZrVCpKioMgy0TLCcy28eouiKGh1uxiGzVq78b3jyGQc92fUPYf5
      bIbj1bAMg63tDYSQ2droYrk1HFNDAEVRUhYS88kU27Fpd7oYdoX1tTXKeEmOxNbeDUSyxPMq
      FCh01jbptOq02i0U3eTm3iZJIdHttJGQ2Tu4yUanQa3Z5sMPbiDKgkJW2d5ap93ZoNtuIomS
      oixRDYe6ayOrOq2aS1YIdF2jKAvKssRwPNoNjyyKqFQrxGmO4zjMFwGyJNHsrqPKCp1WnThO
      AEFZFGxsb0OeUqQRUbbyw8oiJ45TRJGTZhlFka82PRWDrfU2KAbNepXW2hbVapWqbbyVTN63
      RTJckPRnlHEGpSCfh0iPrZHrbNCfAN+uiy3SiMPjC/ZvHDw2O0uiKMXQVDIhMH5Chfyvmw16
      XQ9wzXvN6xTFt9vtqy+KX0yGDOcxB/vbSAjKUjzTaxdlwfHREe31LUxDR5EloijCtCxEWT7X
      03+yETbqnZPJJmud5huuzhL0zk8xvTaeYyBJ8veqxIXhEtt2EGJV9C+/RD3zNT8cIcQLw6BR
      kIAEWZIjyRJZnGO5z1CGuwpm0ymoDpPJhDwJeHTUZ//mDTRZEMwnyLpFEKYcbDaZ+iEVb8Z8
      IhgPR5iuRlGoBLMBt37xN1Qrz98/yFGQU5+Ly5Q4LdDKiGVcUGs2WIyGNLtrDAcDGo0GsyDi
      1u469x88ot5o4ocxGimqZlFxTfxlCnnKIin56MYOtlPBD3z83iGpWafluWThnHkuI8ULDLuC
      v4y5efMGo9GQIj1DMRTGU4mWJ5BViygv2N/dQbmeD28dSZYI/YQ0ziiLElVXmI+WwFtwgg2r
      wv7uJucnh1yOfSq2zrh/zoNHpyi6zXLS46I/BFXHUksGowmT2Zxo4SNZLnXPolqr8aLHejAf
      M15EzEd9Hh2dolsV6vUaZTjl9OSIo7M+cbzk5PSUy/6IIvYJM0G/d7EKefpL4uWCe3fvMY9K
      Ok2Pk6MTSkru3L6Lqut41SqiyHn44B6j4ZBaex3brSEVKRdnpyRZgSgyzk6OWcQ5mgxHhw+Y
      jMd4jTZJ9NNxLN8nlouY8eWcJMrIs5JgFj197Z10giN/xtHFmA8/vPHCGfrEBHoRyXLByeWI
      vYP97y2yv+b94pWK4r+F4zjvvxN8rQz38+adV4aLw4Agymk2at/rPJZFgZAklB+4rZ1l2VOd
      zmWwQFJNbPP5aQlfP/9F5FmGomnPtcK+71oveu/zSNP0aVqFP58gFBOvsnL2wmCBalbQnyWT
      /aLrxiFBnNOoPT90KIQgz3NEkTFfJrQaNSRJIk9j4gwqzpvL5XpdFEV5YRg0S1dZlEVerD5H
      VmCYq9/ryp3gyXjMMooJlwsM08atOITLBcskZ3R+wu7NDymykOWywHZtLE1hEWVsb7xaKvBw
      NESlJCkVjh7eYW37Jp6jU6YR49kCu9KAImV7d4/Z8IL+PKRqKri1Jv3BEFVRaDfrjBYhNUvB
      T8CUUnSvxXJ0SSLr1G2NuFQpogVeo8VoPKNVtXhw0uc3f/Uhj46OaTYa9EcT9g72+fzf/4hX
      a4Ju0q5ahLmMQcDlWFB3BE61znwRYakFKTqkIQUZfqjRqOokYcDG3i2m0xlZmpE0GiRpwdGD
      rzi49THIOnk4wXIbLBYLOs0a0yBhZ3ONIl7y4OSc9fU1BqMp0WLC+s4Npr0TNLdJtpxRaA5S
      6mO5DSbjMaZtoZYZkm4TRhG6XCJRcnqRk2ch/riH29pgOJJwLYVlJqEWEU61yWQyYXd3F+Ud
      NC+jZUIaZUTLhLJcyWUq6luSRszTBDSLPA6IspLhxQleo8lg4tPudIiCOe1OneGoz2AywZRT
      Ysl65QkAkOQgyyU3bn0IAqIwJIkjmo0GmmZy+PCc5to6Mz/E0lV6F6cMen2a63vImuDi8oLj
      0yF7BxuUecnRxQkb+7/AUVREvOR8kTJdRNQtmYvLHnEmkxZNvIpN6M8oheDk6JTuRoN5otDs
      dFFkFU1XuHP3LnqlyS9urlFLMnqX95FGfWrdj1kEPbJ4wHl/ys7BLlXXZX29xqd/fIjb2eWJ
      nuXD+/dQ7ToHtz6id3IIdpN23SHyxwwGUybDHplis9FtkQcz6nWHO4/61MwS3ari2Bba2hoP
      Ty6puxZpGHPx6CHVdpdWd4s4DAjnI4JcZn1tDSQJCYnh2RGLtGBnawuiCWejmM29DQxJZjGb
      0Ov1mMeCRrtLtWK9cyJhmq7iT1fmuATfsESu3Al+YgIsFzOErDIaTdhab+NH2eoJo1nYpkqS
      FCgy5HnGMs5oNWqvNM6zHGEhBEm0RNFNkiSlyFLqzRZRMEcoOlkcYdkWqqqDJCiylGWUsRid
      EwiLvW4NSXfQpJxlUmAoghyVMo2wXZfZzKdaMQnTkkbVZTwe43oeiiwhZI1kOQfVxNBksjQh
      zgQ112Y295FEgWHbqKrB0d3PKK0WnaqJ6bjEUUStVmU8GlJvtlkupqvrKIJlUuA6FkWWEGYC
      1zZBlMzmPlXXYbGMKMuSVr2KkCSKomQRLPFsg6SQUUVKXMqE8xG11jp5HKCaDvEywHE90miJ
      rJsrCZo8ZR6mNGsuo8mUWrWGKgtGU5/6YxNq6c8xHZfFfJXIZ5rGW50AL7MTHMxDsiTHdAxk
      +S8mkGZo107wNe8377wTfNW8bBj0mp8mrySP/gyu3Ac4fXiPwXzJ9vYmqmaulu88YzL3Wc4m
      dLa2KdOcJIlod9d+sBP15Z/+g639G9x+cMyt7S665WI7BkUh0bs4x6tYqFYFXYZCkiHPWCYF
      jiEhFJM89pF1m3Axx63XmI0mtLptxqMpVc9msUxwTZUMlTwOQJIYTkMcS8XSVSr1NqcPvkJx
      mjQqGpLuUMQBjldnOplgGAZlnmAYJrMwpYzmLMOI9d2bJOGS4fnK3rcMHUeXiQsZkYVUqnXm
      8wWddvu6Ud9rcvjFJZqukKU59uOsgiv3AU4e3sPPJUwpB80iDRZkksru/h7jXh9VEywGU6rb
      +2y266+cO/NkBbg8O2I49rFch2w5J0eHsuSDX/6KwfkhSSKBSIiTHBDkZQmKjmuq7B3c5Ojw
      AYgc1fBI0zmWWuWif8n2eoNBJNG0NIajCyynhmVZyFIBks32Voe7X35KY/MDbDnl6HxItWKS
      pAmDy0tMu8LuzQ8JpiMif0YqZBqddVQKPKPkq8MhhSRoN+oU0YJFBPWmiyqrLOdD8kJimQo+
      +eSvsXTlhd/Hz41X2Qgb9xYMz2Y01lzKQnDjF9tXrw3a2dhm27KYDC4pZYNhkvDx/jZn/Qnr
      G+tAQaPeZjgaU4r6D87NqDe7WJVVz675VMW0HQaTBYYi0WytEcwnmN46ZbYqhDBUieE8otOs
      oSoyNa+CrBtcnPfZ3l3j5HDEJ7/+FZe9Ibd22igSVByduFSoeS6IkvF4Akh41QaOZZAGSxqt
      FstJj+b6LrahY3l1FvMpzVYbX1Mw7AqmuYqKDYOMv/7lTc56Y7qdNioNLoZzuo8T+hSR49Wb
      DEcTijRG6M47F2F5n5Ak2P6gQxKmWPWV2fTeO8HX6dA/b143HfqdzAW65pqX5Z2XR788OcTP
      JG7s7UKZMgtS6lWHsnySLw8gI8oCWVFWTfLkVZ8WRIksK5RCID/2AJ9XF3Dny8/Y3jvgzoNj
      PvnFB0iyjCzLCHjcAlWiLEsUZWVHi7IEWaYsClRV5fjhXXLVZa1VxbJMxON2mrPJmEqtSZEm
      mJa5auyHAElGUX4qVbM/D9J7f141x8tSZO8tyaNnWb6SIX94F6HrjGcpAz3H0DQ+vXvCx1s1
      SsXi+PSE3e1d8iJFkjVKWUXJYmytZKY0aZo5qu6y/Ry1tIptcnh4hGmZ/Pu//i80u4ltG2zu
      3+L8wZe4boU/fX6H3Vsf4Royi9ElkmJxdHnJH/7x/2a+CLBrNqPRkDgMKGWDMl2i6yZnvT6m
      46FkS9JSQhYlQjH5xUc3r/rru+ZNkueIskCpdxDFKnR+5ROg4laI/YRqZw1Rloh8QaPbQs5j
      PshkWnWLHA1VVWk021QcndkiJC8hD6e4Xo1Otcvlg89pbew9d5xqcw3JCLAtk5lcolsV+qMJ
      rqHieS4oOjduHODYOssopbO2iVA0ZMPEUmUObn2waqZR5DSaTRAwHfXRnRqbjkGYFJhaEyj5
      /P/8Eau9fy2P/p4hVTwkSUakMbL3LXn0N01RFMRx/MauV35PWeRz3/M10+lNUhTFqnPNdUjm
      R+d1HkKVSuXqfABZll9rh+5leZE0YnkF81uSJIQouQ4f/PiUZflaqTBXNgEkSUJVVYYXp/Rm
      Sz768IPvyKNPp3Pq9W8mvU2ns+8c+z6e5ALN5jNq1dX7zk+PUE0P1zGxbZskiVFV/RtO69fP
      fxHz2Qy3VnvuHsVsNqdW+64kexiG5GlK5WvvLYqUPJdXqtTP4MnrC39Gu7USIT47ekhcqhzs
      7yJLq8/X7G5jvsLG2BOh3cHlGctMYn/nux13njxNRZkzmfnIRUJ/PGf34CaWrjAfD8gVm2bt
      26p0Px6yLD8NbLyI3vEESYI8K7HdK94HeMLJw3tMggTyEKfexdJkgsWcRa7iEKE7LlEQops6
      RSlTpktam/ust19OH/+pPHqvR7iYkaKyXExodjfRFfBnE3IBtu1xdn7O7/7u91wcPSQRCv7g
      hGpjHT9OUDWFpufw1YMLPtzvEiQCf3BMbftjPCVltkzQpZzRskRNfRqdDvcenPHxx3tMFwm/
      uLHJg8NjTF0niCL2PvorHv7533FrdeKsQMoC/MLkg22P3gSS2TF2o02cGbh6SpKV9M9PqXa7
      GHqd/Z0Wn/7bH/n13/8j/mSAJuWcnPcIMhlbyVEkQYhNTc+xbJfT3oj1hsPpOOK//uffk8z6
      3D6+wHabJGFAlkbsHnyAiOfMIoGUBeSywfD4Hu7aDoZm4NgG/uiCRPVo1T0MVabZrPDlZw85
      H49Za9UxNZmTyxk3D9ZJC4V41qPa7HD3wTH/5Z/+Cec5E/uqeJWd4OM7fYQQuDWLIi/Z/2jr
      6sOgXr3F1o0Gw/Nj/ExhOh6ys79LfNpnfWMfREY/TrBshyhKaK5tIIoX6aB/F8M0MIw1QEBn
      5cTmeY6u69QqVZKspFX3yPICRZExVRO52cXUVVprG0iKYDmfsbnWIsszklTQXt+iWveQEh81
      FeiqTlOT0YVBLikcHOyjKjKWZaEoCoqiYNkVuusdShTanRaqVaVjKMxmM6q6TbVWYR6M0ett
      DFOnu77N8OwOWQ7rWzu0um0W8xjLsui0G6RpThoF+KVKp92iKZu4jkG4mFGqNhVLpyxSGmGE
      brnsbdcZj8d4us7NG/uMZjF5qtKud1nVFciUZYrIcwy3Sndzm0qtThBEaJqOValiqiaWaSIX
      MfcfnNPd7KJ7Ls1abaWeYVapNarISARqQVLK7O/vk6cxwqi8s7vV2uMVM1qmV78CPOuyoszx
      l/EzhF1/OFeRDTqfjkCzqVbeToRnOhqg2VUq9hvwmYQgKwq0F0i0v0pJ6LvM6xTFVyqVq60H
      iKLoxSdec81r8M72B1BVFdd1WQYBduWby+LXC76fMBv16E0Cbr5ARv15XJ6f0l5b4/xiyO72
      xjdem8/mVJ/hpL4OQpTkeckyCKjWa0jAeHDBIoH9b40PED9RuSsy/CgljxYMZxG3bu4jSxKz
      8QChV6i71/sKr4IQAtd1X+rcrx71yPICTVVoVlerxpU7wb2LCzobTUb9JUk4pT8N0eSERr3J
      g8Nj9m8cYFguZTjDjyM0o4ZrKwSzCYphMV0EuBrMMpXf/tVHzx3n8M7nSEaFSZBgFgtUu069
      XsWsNJj0TkjjCM10MBTIJJkkjBguItZrJq2NfUbnh8iGzdL3cese8/4Mt1ElCHxsxyGKMzQR
      EgkTnQxFU5n5JR/e3OLR/dvc+OVvmfWOyNUKIp4hNIfJxSPc1gaSrOLaFvPhGWqlgWE5qBS0
      PZm7p0tGowEVU6ZWrXIx9Nler5EJjeW0x9rmNnfuH/GHP/w9xg9Qgfip8yq5QGmW8/B8jKrI
      ZHnBLw/WpSv/Rsss4ui0x8XZI4I4J1nOcWtNsjTBtB0k2WCtVUPTDTa395GzBWeXQ5xqA00S
      q8L2LMcyv1+Ko1JvE/hLOjWLJCsp0Tg9OcM1FTR1VQRRyjKj+RJ/OkeVSxzbwvHqeI5BlqWk
      aUwUp+R5TJwUxHGEKHIKxaTbqJHmBZah0ehuUPVq2IaC51VRZZgtluiGge8viKKIosgphYyE
      eNwuKiVJC5I4QlUVyizi3qMBjgGW47C+tYelKziOjVmpUq3YaLJgOJxg2w5RGHK97fB69CY+
      e+sNhtPgad3JO50NGszGDBcxe9ubr7zrKrKYoZ/QabyC6VPmq5QHQyJNZUzzh1mI1ykSb49r
      efTreoCfNXEcY77AOngeb0Ue3Z9OMLwai+mERqOxSlF+POekIuH2g2N29w+wDauT5qUAACAA
      SURBVI0kCslKsB37pSvDnoRBZ9MJXq3KdOrT/JakyusUTTyPJ58hiiIs20YClosJ86hko/vd
      NrJPcplEWRBnOaauM58vqFb/8vT6esPnV+2R9nPlZeTRn3DneIAsS5i6turzxlvIBg0WYybL
      iKOjcz64kZCES2RNYjJX+PWeySQssPt94ijE0RXCQmH/5t4rl0aOemdEcczFaE6ynKGoBrZX
      AcViOhhAmaGaLpYmkUkyIhdEaYZOittcZzG6WDnB8xluo8GsP6LRaTOezKhVbfwwo17RSUuZ
      2J8j6wrjacruVpvB5RntzX36vT661+Ls+BD0CqQBhl1h7kfYloFUJCi6SVrKNM2S415IpXeC
      bNmMRwlb6x6SZhEupqAaeK5Do964Trp7Q9zabnHvdEQYp/jhW+oRJmkO82GPVqdJkiSMB5ck
      pYKhrXblVFVhNhly9/OvmIY/PHu0UmvSvxzS8EyOHj3kfORz/84DHEMBcnw/JgwDjs56XJ6c
      Mewdc3x6gZA1KpaO7/v4swlRkhP4E5K05OLyAikPmYQlVdvgwf07XPYH2NU6hmZgGSrNZovx
      8JKZH1Kt1RiPRoRhSLhc8NUXX3BydomsKKRJzPGjQ45PzwG4GEwo/SGS5WFXPBxT5/zkEfcf
      PCRKMtLIZzpfvtGM2p87F8MFm22Pqf8W5dFXnVL+MkRZFsiySlkWqIpCmmWoqkpRlE+T1SRZ
      funt9Ccm0NfHKcsSqczoT5esd1urOoSyRJIVeBxLkYDicYWYJEkURYEkCuZBgltRWS7B88xV
      hdrXqshKeCrgu3pNpShyZEWBskQAvr/A86qPx5S/Zv6s/i9JEuLxPTy5byHE6jM/Pu/rqd+v
      0wf3p86r7ASvuhNJ5EWJLEm47hXvBL8NJ7gsy2emXVzz8+B1leGufAUospRlnOFWnO/YsnmR
      oypvxg0p8vxxrpfKy2wkCyGYzybYbg1dVVZPcVkFVtLgL8qTyfMCVX12Gm5erFa3q+BJ+veT
      VaksCpDlKyn8eR94lTBotgiRJAlJkZF0FUVTrz4b9PjwAcL0kGWQKRkNhriNNtPRiKKIsLw2
      BikoOnFWYsk5qWRAElBp1gmnMVGe0qhaRLnC2nPSpM/PT5HyiMxoEY7P6Gxs4y9jDna3OHn0
      kFq7y6g/oNHuYGoKhmHQ7/eQRhNUWcGxdBS7ipTMmScyShFRCIlmq81oNKLdqDGa+uxstfj0
      06+oVl3MSg1TShGKwcnpKb/+9SecnZ6AJFEKhYZrkAgNtYxAMUhygZQtcVsbiGiOn0nU9ZTb
      ZyEfHmxAkTEYDuisbTAcjNjd2yZeBiS5IE8iJsMBqtsgmI/Yv/kxl4/uYKgOvlRysLnBcDxj
      Z3ONKEkpi5TeYMZa0yVIQSsT7HoH+y2nK79TFCXR5QRJkZH1t9QfoLuxwYPDE+QiQlZ1JN1i
      8Og+1voN5HQORcoijhHlElEIcsdGLX2iNGd5eUK+NAiKiOFlgFltP3cC5GlKEkekeUiz0cJS
      Sh6Opxxstej3L7mYhOyvd1iMh5ylgl/e2iNYLGjUGsiaytnlCMkMyRd9nGobr+ohi4LD25/T
      7HQ4PB/R9SwKzaTT6YAsoYic0XhIkOt0Ww3kMmc6GWNWGlRsncl4xMU0YqNdJ1yck8gOrpIh
      dI/MH3PcX/Bffv8hzbrF8OIYSXFQNJmv/vQpiaTQ2tzl+P59SlnG9qpYdgWnVsXQJPzFDLda
      x1Y0TLnkq9u3yUuJTrvB5eUFWRIxW6RMxxfodgPX0qh35Ke+x88RIQTmZpNs7D89duUmUBjM
      8eOSfDmjsb616pJYCsbjMY3WX1qaiiJlEeVPU5D9+RS7WoM0ZxosqTkGQSroNJ9dxZWmKTKC
      tAC5TImygihOWe+2GfR7OG4VQ9dYzifEmHSb3srUURUue32azSZlWZImEWkh4z1JSitzxpM5
      zWZjpdam68xGA8xKDVWGYDFDNV2yyKfaaDLs96k1WygSJKFPJulULAORp0yDBFWkOPU2RewT
      FzLNustoMCZcLmi31zjv99jb3aHfG7C+uUkcLpEAVdNAlCyCiKpXWbnyRYofZlQ9h6LIGY1n
      rK+vMer3cDyP2cyn4dks4oK651AWJYZl/qQmwKuYQGWSIRsa2TRAsQ0UU3//neBvR5mu+Xnx
      Omkn9Xr9Wh79mvebLMu+k1r/Kly5D3D26D6DWcju7jaqpuNYJsOLC3AqNJ1VdxXyGMOusPQD
      JFnCq9W/VUD/Yr767FO29g+48+CED3Y30E0bw9QpS4ks8hGKThxFVByLZZQwPDvEau2w3vJI
      4whUgzRa4tUaZPGSTMiUaYRuVwgXPm6thr+Y41Yqq44rjkmcr9I5SmA0WrB/sPtSEahrfhyk
      0yNwKkjTEWVrDXgLE6AsBYZlMelfwGPNfGQTMwn41/tLbMNCF0sKIWE4dSQJCkmh84otkur1
      GsePTqlVHc5OHlEqFjKCg49+wUWvj6nKpELmrDfAsUxMt04WLbi8WJDEMUJI9Ecjbv3i1ywn
      lxQlaJpKOe1DbnN2doxXrXN23sOzLI7OpqiKg2epyIoEqD8p2/qniBSHiCxF6CZSMAfewgRo
      r2+xbdtM+hcrFYI44mCrzcVwzl9/0GIeFiiFg2E72LYLEj9Ic7PW7GI4MbquMdcUTMuhP55j
      qTI1zwHVJF0EHOztoEiPd4KzmME0oFarI2kWuq7j2gZmWSUqFaaDCzZ2Nzm+3+Pgw48Y9Qfs
      7+9iKDLV2GWZCJrVVX3zdDxmGYZUnOs06HeVsruBlOeQZQjniivC3mY6dJ6/uorENT8NXicd
      utPpXMujX/N+87oFMVeeZTUZXHLn/iFF+bV5Jgru3r3H1wXt4mhJ8RrNHu999QVRtORPn99+
      qfN758dM/Te1QhX4i+UbutY1V0V2+TnF5Ijs7P+Qjw+Bt1EPEGV8ePOAO1/+mVzWKKMI3TKY
      +gna8QlyEXPv9kP2P7y5klKJcwy1QKgOv/ro1kuPY5kaDx8eoeoG//w//l90t4NbsVjbucH5
      /c/RDZNFmCDJEnkJepnCdEngWYwHPRSzyvHhPf7mH/4by8ERUa4g5RGGa+EPY3RbYpV2o5Cl
      GSgpQaLTsAUoGmFY8Lvf/YbrlgHvLpKsUkZzZKuOKFdm85VPgGatwt0Hh1Rcl1IxqW9ug8jZ
      kFXG/Qsk02bvYJdKpYokMhQ9p9uq8aob9tXmGmgLbNvCkncxLJfBaIxnKvieh6ybpKVPq9PF
      0BQkIciTkIvRnO76JrlQUG99gGvpKK6HWij445Bq1WM+iOmubzEejWi2OlQMlUkwp1mqNKoV
      ECWj4ZAwXOJWfphI0zVvAUVDUjREFiHZb0Ee/cfcoBKiJC8E2nMyNl+GVR6/xKqZzHWQ810k
      CAIqlR+mNGhZ1tXtBEuS9FYKOV4kj578AJ3Ra94fsiwjSZIf/P4r7Q+g6zrj/gWTIGVzo4v9
      nMIFfzbDrrk8+PI2dqPD9nrnpcd5Ukh+fvKIMJe5ebD7vcbTm5AsWczneNVXkFsRJePJjGaz
      8fRQFkVIloUKlFlKJikYj1erbxfLf50yzwiSDO9l9huKlDCXv5UCXTCfR1Sr747E+eugqupL
      a5wOz2eUhaDIC2x3FTq9ch9AiJJSlHz12Z9otbsslksMw8SQSz776g4f/OKvWc7mfPK3vyIM
      I3JpyOeDS3TDRFUEpeHhXzwgM6tYqHz0q4/Rn6GQFkUhSSFz/85tFN1AEyW5JIjjjIvBlL3N
      Fq21HSJ/zvnJIbJZIQ2W6JaJLAnu3X3IrQ8PODwbs1FV8VpdvvjsC3Z298hlg5sbdXrDCZKs
      kOUpp5cD0tklcrWFHOc0N3eQihCBxGxwTqXW4ssvb3PwwUc4tomlyfzrH//E7/72V/zH//dH
      ak4FpdPl8qtPaba3SU2bdHTBh5/8jlH/nMvBaHV9p0G9WiPwp5xcjPnHf/gdjx7exbMd7tx/
      yM7ODv2xz85aDaFa7DRNHo5zot4Dqq0OQnOYTheYwidVXFxTQrMaP5kJ8CpUqhbLRYyqyaTx
      W+oRJskKRZ7T7nSQFQVZlnG8Gi1bxk8/wFSgsCwkJHYObuFVNO7dPaTWrDNfhIgopNbsoLse
      luY+848foNlep96ocXj/PophkYQhssRK596qUPUq1FyLNPRpdTYQomAURZiOR6OiEqcliqzS
      btapezphnLC1s0+rVac3nGE5DuVoBkVJu9lCADOlwK7V0BUbECRpymge0240CaKE7f0DvEqF
      TrdNmYbY+iV5KdOoexiWS1Gk1LtbuJUaYVlQqVeJ4pR6aw0oGRUxulMlDn3qtSqK7qxWVlVD
      0wx29m/gWgZWpUrVdZAQSApsb7S4SGYYqoRkVwgXcxynSdN2CfwZhq4QRQmW9fOSXRmcTrFd
      kyhKn64A7/1G2HU26M+b15FHdxzn6pzgt5UKcc3Pm9dNhbnyFWA66GE2Oox7F7Tb7eeqnRVZ
      zKOjM7b39586g/DyjRwWiwVxFOE6DikS1WfE4588LZIkQZYVNE197hMkT0IOj87YvXELQ/2m
      W52nCZJmoEh/2Yof9Ho0Ox3KUoAov3HPeRxTqCrGC5pWPEGIgqKQUFWZNElI85zKt+5RCEEY
      ht+694LlMsVxvhlsSJIIWdFJkxjHccjTiMNHJ+wc3MLU3u+du3e+U3yShMxOjzntTVAVhTCY
      I2kGqiwxXwS41RpICqZI2djbZza4YOynVNSMZS4zGU34/d//Hu0FIdXZbII/GTOptJAzn75e
      IfNHOF6NWRCxvXeL6cUjCq2CawiOT3r85u/+ngf3vqJWb+O4LqpuE4xO8QuDrbpJUgrG/XOm
      /hJHFfiZjCWX6KqF7qqcXcxp1iw812Y06JFlMScDHyUP2N3Z4fB8yE6nShoXJJrMjZ09NKlk
      MFlAHnFyMmB9vUZvEtFwFJobe5w/+Aq7VmE8lXCNFM2qUuZLQq/O2dFDao02i0TwyUcH3P3q
      M9a39jl+dMTW7iZZWRLNQrZvHJBGwdM/jsXomMHSpqLFWF6bva0uNc9k0B+i6woNW+fe8RFV
      r8HCX1BrtEmjAM9zOT28j9vcoIQXRtjeR658+iuaTbT0WX/ce8t2q5imSbtqkwvBwo/ZWF/D
      diwO7z9gESxJ4pjZfE4QpdQ9h5fZFdaLBLezSZLEePU2VcfA931EkbK2tU2WFbi1FrWKSSFk
      6p6zqvGVZQpJ4/zkCMsymM/nLBYLVMNATn2GE58sy5nNF4gyJ04ziixjNp/j+3MURWE5mxCX
      Ess4w7EMGvUai8Uc3/eJ4wRJksiSmPlsTgFcnh4xni2JgzH98RwhBEalimev+n1lQsNQJSq1
      JppUIskSYbAgCGMkWWYyHDwV6PJnE6IwYDTzV99TmZOkGUk4JY4TlkmBajjYukKjs45tqESz
      AY8uZqhSxnwRUKQpSZYRBEvyPCVdBqRJzCgI8RcheZaxtr5GGP708p3eeyf4jVBk9MYL1jrN
      77wULpdYjvNGnnxBEOBU3r0mcq9qor1LXMujF8VrNUq+5v3mdZThWq3W1RfFB/Mx40XKztb6
      lagcPwmDfr3v2HwyQjIcPOf5X8yz+pQ9jyT0OR/MWGtVCTOo6BJCswgmPdBdRBri1ev4QYRX
      sb/h6I+HA6rN9nP7nsVxhG5YyBKkcYxqmt+xS9MkRtXN63rjZ1CW5WtJ3199OvQyQS5jHh09
      wrYdHNvGD5aokkCzbRJ/JQVu2xXSOGK2CNg/2F/pB70Ck8kEipRUqPQvTmivbxP6CkUaMfMD
      7EqdMk/Z2d1j3D9jukxxDRmn4tEbrRz0TqvBeL7EMyWCVMKUc/RKg2jSQ7MbjMZTCiHQag5p
      VNDvj9jb1RkVCr2vviCTTeoVm+29PUaXp6DoHB2f8lvXwc8hjkMWy4SapZBJBmkwRbM9RNrH
      rndJxkOUqk20zKl6DiJLGE0XaKrM2vYe+vUEeONc+QRIo4BccyjjEaNMMLw4YW1jnYvBhAKd
      0u+R6jUq8jmGoXLUm7K5s4/1A1rYCllDA7Z39lZjpwnRckm9VgNJ5ej0iNb6BkEQoqk6p8eP
      MC2X9sYeklbSuzzn8HjIjZubpFnJ8cUR6wd/RbdW5/jkDMN2KMUqDDpZRNTqVc4uehSSSb27
      jSaVjAYXTGYNFn6IpJXs7+0gFzHHRxdImsl4OGUoh5jVDVo1h7VOm7tfnBJj4gAnhw9JhEUR
      quSFxOHZBbu7+6RJgmYZ75z/8L5z5U5w+VgSPEtiBNAfjtne3Hja1qjIM2RFAwSqIhPFCZZl
      v7S59MQEepYfIISgyDMkRaUoCkRZYpgmRZYiJJmyyFFV7akce1kWZHnJdHBOjMlWt4GkrMR2
      06xAV2UKISGKjEJIKJJA0QyKLEUzDBCCPM9QNZ0iS0FWUWQJ+f9n7726JLvONL3neBfep3fl
      QBAE2exmN1dLrZk1uhj9AV3rd0oazdJa6p5Wa9gECKBQLr2JyPBxThxvti4yq2AIFMogwQIr
      n5tcmRlx9jGxY+9v7+97X0kiiiJUTSNNM7Tr42jqVWpIEkfIqo6MQIiCJCvQ1Cvn+TAM0a+n
      VIqi3HaAb/G2O8EvOoDneT9LhbWiKG6D4PeYtwmCm83mN1eBiizmiy8esX3nHrZlosgSosjJ
      hPTaQlVfIa6+9b62M/p104kfiyxNyAVoqvqddQhXWalfmVu8LV+/hjSJKZAx9O+etxXfMry4
      5cfjR90JXk76HA9mBJP/nbjxS0rxGSJJOIjr/MODDkXic9qf8du//Xss49U+wMlyyqcHIz6+
      u85Zf0KpYuMvfUqmwuHJkPsffoAuS5iW9VbD+6OHn1PrrOKOhvS2dnAnl7Q6a4RRQLScUXJs
      ZrHCWqcOyITulCgrKCQVXbla6ak2u0wmU6olg0TolCwNRZIIwyVRoUK8xKnWWfohWRIhsoTe
      5i6PH35Oo7eJlC6xqh38+Zhmu8PlaEK75vDo4Jzf/vqXb3F1t9wU3xgBInfCP//LPyNkFa25
      xpP/9n+wtf1LIqeF5p9g2iX2Hz/lP/+v/xvrzVebdx08/oL+aEGz08EAUl1BQ0KiQFEMVHKC
      HPa2N9/qQhbTESf9IdVSFUTI+HJEmpvc/fgX+OM+/mKC0VhlPhzx4ccfcXJwiK4KjvtT1lda
      xL5LHKWEyDSqVWTNQCNHynMSCUSW0B9M6HaqOPVt1toWD//0R3q7H6Nkc84GM6olA28xZTIL
      0BQJWXMoN8vYms7mxvo3XCBv+XF4ZzfCnhNFEboqc9k/44tnA37/+98gIyEhcGczhMhQSh1a
      lTcTN3rOZNhHaA5l2wSRMxyNqFUbOGWHR599yvbdB4g85XKyYHdrjfjaiG6ZSNTKFtPxkHqr
      w/BySLVkkSsWdUfltD+hVjZJ0BCRi1Gq4tglVAVOj49Z2dxmMeojGWVG54es795nMepTbbYZ
      Xo7ptMosgoJ6xb41z74B3tkO8FN6hN0aZb+/vI0y3E+yEwyCIIjQNYVcgHG9+yqKjNFkTrvV
      /M6pgSgycqGg/sCO2PNl0DRNkSXpxbLl65Bn2Su/L8sy1J9hzsxfK+/8TnDkjvnyeMZqVWOR
      Sqx3W0hIBPMhIz9HN0zyJEK3LNzpgPP+nN2dDeJoQX+U8sGH96+9fl9O/6JP1dbxhYyq6GTB
      ArNUI0kTGmWL/til1agSRTGGpjCZnDP3Tbp1lShJiHOVlVaVZZxBElBprSAVKXEcYRg6s8sL
      hkuJspnj1Dp06w5HJxc0G1VmXkjFUgkzGUNKQXMI3QmaVcabXVJprRIHS1ZWV/ny88/Y3N7B
      XYaUDIlCtYkWQ1KhUmvUmY/GSKpKo1HF9RNmw1PWNnbxw4iNtdVb0+wfmRvvAOf9IYnn4ltt
      kFS86ZBItllptJmMH3E5MUjcCVqphqkIWs0Gs9mcbstCMqvMJwHOavkH28mzhJmbIGSJeZwx
      7p9Tq7fY/uAD0nDBeDQmT5YEYUqlVkfWNapSGc+fUrItTEfn8eMnyFYJR0rBrEC8YDpbUq5X
      kFCoV0voao6UJyxGPppWcHA6perALLvyPg6LAkFAuJwigoJurYaULjk6PqFU79JoNBn1Txkv
      M+qOjBfLrPeqyEJmNpngWAaIgqOLCbPxiN2tVaaXZ0z8q7pqS78dfX5MbjwITtIETZaJ0hxZ
      lpiPBjjNVUwlZzpf0qqXSXKBEBKKDKG/RDcM4iyn5DiIAjTt+0eAF8lwcYgfZZgqZKgUSYBq
      OFiWgchS5suQsm0AEsgKEgLf91FlkFQTQ1evLF3jDEWkWKUaskjJkUGSkcXV653yVTqzoshM
      p3PIEyTDIQ1crHIdlQyhGMS+h12uoEoFYVKQRAGVeoM09JEUlaUfYukyqCamfm15WogXdqdJ
      mhCnBaYKhaQQhhHlkvO9FXXvKz/aTvCPzW0QfMtPwdsGwbcFMbf8rHnna4KzYMa/Pxnwq3sb
      zBZLFFXD1CBFgyTArtSYzRaYpo5cpEhG6YVV6uvw+Sd/oNTqkbguva1tlrMx9VaXOA6JAw/b
      UJlEKmudK+HdJPCIkoxC1lClgiwJKVWbzOcLKrZGLDQcU0OWII5C4lyGLMQqV4nCCM9zMVSZ
      ZneNR3/6A5XOBo6aY5abBO6UWrPFeDzFMnSSyMfUDULZIJicE4QJ6zt3iKOYs2d/orXxANu2
      0EgQikUSuFTrdeZuQLfdvA18b5AbHwEOnzzkbDhnbXWVLM9QdR2pyJAkwcnhMa1OlyAtrrxv
      Y495JPG733z02u3MJ5ecDqc4uoksZ4wGA4TksPXgLuF0QLR00WtdlrMZ9z78BcfPnmHqEseD
      OZsrLZaLCUWh4KUZzWoVxbTRpRxVCPw0RYicwcWITreOWV5ja6XMZ3/872w8+FukaML52KNk
      SARLj9HExS6VufvgA+ajc2ajEcgWvd0dRORjqymf7w/RDJ1es4Y7HZJINrWKiSpLzGdT4iQn
      Vwz+/rcfv4gLbvlz3vkRoLO2xeb2Dl6Uo2vfTOdVJQmrXGPhLmm3moSeRlV7s4AmTVLarS7V
      kn2t/a5QqdSpVks8PFywdec+iII0TjFVmc2tTeLAY8eo0qg6KBJUGi1GozG1sk0um9QdlePz
      Ec16jUQoOIaJValRLlWRZKjW2zimwsJNabfajC8OWNu5j+P0qbU6TCZjOu0esqRQKtewSjZh
      HrKIdX770T0uxh7tTpNmrczYjem0akiiAAG1eoPRzCUMQpxb37Eb42cfBAM/yzTuW34c3kbs
      uFar3Rpl3/Lz5nXUob/z/T/iuXwn/ZMDLmc+9x88QFUkFFmiECAJQRTH6LqOoigIId6qRuDo
      2WMUu4KhqjRbTYo8R1FUhCgQRYFIfWaxSrt2NcUSRUEhBEgScXS12yvLCnlRoEgSAgnp2k5V
      CHHlZyYEsixTCMFoOKTdaqGoKkf7T4gLhTt7OwAc7z+lt7mLqV21L8ny9fkoFIVAfQvTjlt+
      XG48CD7Zf8LUi6iUNL7cv2RnvYEk61SqdbzBIU8HU3a2dqh3uqy1Gz98wG/xfAQYX14wDxMS
      z8NwHM4OnlBrblDttvDH52iaimJVKbKM1Y0tTp5+iSzDxTRkb6PL4PSAcr3D2eWItU4DYVQp
      mzKmLDN1pySFwrh/zsr6KkKpcnerzf/7//zffPT7/0S4GKGRcnBy5YVsq4IsCcm0KmUtQ9N1
      TvtjOnWHiS/4n37/2xu40+8n76w47nNK5RLLROCUy+xt66ysdpAElEsOMy0nN6t0Oj2arfpb
      tZOlKYZu0N1uI4oIke9iWVW6Kx0eDo7prGyg6jpnZwMcQ2F9a4c4cFGsjEq1jCQ20e0Sim5S
      K9ukkkbNUjg+G9JqtUlyKBsqpVqdUrmBqsH61jaKJCjSCBed7c11wlyhXnUIvQWx0KhVbESa
      IMk65ZKFnYgfxaTjlh+HG/UIi6LoJg79Z+28egwguJr13C4r/rXwzqZDy7J8m7dyy42jKMob
      m+TBDQbBkiShqirubMTF2OPu3g6KLDEajWi32y9ed7T/jNWtLfafHrC5ufFizVsUBQvPo/aK
      Xlynh0/xc5X7d3aQEAR+iP1a6+eC4XBMp9MGUXC4/xSj3GK1+y29UFHghzGObRHNx6ROAzmc
      swgFtbKFrkCu2Hzdlms2m1Gvf/cUbz6bockFx/0Je3t7GN9K/AvDAMOwkK/vXa1i8ujLY3pb
      W7TrZbLA43Tqs7Pee41r/etBluW3qs+4+SD4+ISNzU0effpvuJRp24LFMkBIsLb5gHTZZ+ln
      hIVMq2bhTqbotkXoJ9TabTbXXu3BPvniU4Jcw1FjLpew1Wvw7PFTNrZWeXoyolvV6Ww+QKRX
      CsfL6QDdqfLwiy/ZvXsP0ynTKhn88bNH/OP/8I+cHT5Bc8qMz/uYjsnTp4fcuX8Xy7KQkXj8
      +b+zvXWf+t49vLN9wlwQezNsQyFzVhnvf0J9dQdNN8iWUzpbd9GSOf/yyQEf7K28qB1I0Nld
      a7F/MsC2dHzPJ449IsmhpoNVqaEWEY/PZtzbXKG3UiUIDBaTA754uM/aygZqxeTk6TPWt+9Q
      pCmmKZCNMgdffM6Hv/snNntvF1+9y7zzO8HVksHjZwdodoWGauEYMrX2KpKUIQFauUmcTqmV
      y0iSYGVjmyJdksT5a83tWr01kiQl8D1adQVdN652VjWHvR0bW8nJ0gRLLjgbuWy02yz8mK2d
      Per1Kq32CkoR0ajapPmVjEmeZ2Rphu2U2N27Q9mxyQpQFUFvcwdN09FlkBUJHZlyp4thaCyC
      nFZvE9NQSIVEb3WNLE3JhcLGSpdKs0MdmI+H2IaN4EqnPk4SFN2gUbZQjTKRO0HVNKSsoNdu
      Yts2sqRwfrJPZ7XD5g6stDsYFQMpF9RrTcqWhp8GLNyQje1dSgZEaY75kpTy95kbGwH+OnZn
      C5KkQP+JilBeR7D3liveZgSQZfnmRoA8zwnD8KYO/4Isy97KI+qWnzdR1/E/HAAAIABJREFU
      FJEkyRu//0ZTIcrlMpG/4KQ/ZW93G+U7qs6jMMKwTCRgMrxgvIi4c2f3ldWhn2+EDc5PiAqN
      7Y0VQBBFCab5eqtQ88WcWrUGwNnxPpJRZbXXQgIuzk9p99ZeSyFvufSxDZWDoxNWNrZxzG9u
      2edpRC4b6IrEwnWpOhZP9w9pdldpVEtAzunJgPXNtVtN0Jfwphth8JMEwcesbWxydvSUVNJx
      xyPWVlc4G01QNYNuo0YSeZjVDqE7Jg4CMByKApoVHTfI0cnZPz5nY3OVUqVJt1V7cfznHeDo
      4ClRCiUTZqFEu2pzftZnbbXN0cWEuqPSXN2hSK9GpWA+xijXOHz2jJX1TWRNo6SrnJxf8tHH
      HzG+HFypS3szMsXBXy6wNQnVqiOyAMe2mfg5dS3BzQ0ebHX47588ZH1jjWUQU3c0RouIB9s9
      np706TSrXI5dHF1i5MV0qya6qoFlc3RwSrfXZnelycDLib0J09EAp15l6Ulk0ZTW2gbhwsO2
      DXLFJJr1sZob7G2+n6s/z3nbneAbF6y0DYWn+4dEcUKapqhSztyNWFlZodVukGUZaXo1hdEN
      k/Wdu2giJc0yJqMpebxE0lUM00bWTTpf+/B/HcMwMXQdP4jI0pg8L5CygKkXYdsWuqowX7ik
      4ZLjsz66rjEdj5DUqyXGXneFWq1MGnnEaYE3GxPEOXlWYDsldra2QAgMXaXTW0VRFZbunDjN
      ME2DKFgiy4IEjXajSpIkaJqGpKhoUs58tiDNC8I4wbZMsiynyHO8pQ/kSLIKkszw4gQhawgk
      KrU6GytthKQhyzJra6uoisJ8NruWmJEIgvimH+FfNT/7ksifSzZoEofImsX3GN3f8oa8s7lA
      P1U9gBDi57HiJCkUWcKbh2u3fBdZlr1VEHzzBhlZwuHxGZvb238WQBZFgSRJP0puzmhwRoLJ
      Wq/10tcJId6ovSAIMA2dJBOYxlfB7MnhU8xSg2qt9me7uM9JkhhF1emfHqCVmnSb3z2N+yGi
      KMIwDIQoSNMC42vnEfkehWYhFxmmYVAIcZXmbZrfuMfflTvz7efw7Xs0G11iVltY+lfXNzg/
      Br3yIh77S+VXvfMbYacnpxiawmwyJkwysnCJU65h2wYz12fSP6a9ukOtbGGWKmhv6ASXFTKh
      P+M4nKObDkGc0axVkETKaDylXC4zni2IQ5+VlR7zZcoHd7d5+ugz0kKm3mgxm85otNtYukrg
      zZENm9loxt6DOwwvhxhaThCr1GoOk6nH3bs7TKdTOpLKWRTTqTrodonByZUf2mA8obeyyvHR
      AR9+9DdMp1PUGGJ3jGrb2EaZZOkyWsxpd1osgxRNJNi1DloRMlkmqHlIoZUQ0YJEMtAjl6xW
      Y3E+ZGNnh/l0xs6dXUajIYVq408HVFo9JEkiC8Ys3ZzULrHdayMh4QceK90ex4fPUK0K1ZLN
      zHUZ989Y29phvvCJvAndtU0Wc4+9O1s8erLP6lqAUAzkNKC5ukn/YsDuBx3OD54QyjqtRpMs
      ill4S1QpRbFKBPMFO/cfoL+u4dtPyI3PSDVVZrlYMHWXNOsVnj15yMR1ebx/CmlCrd7A1iWe
      HfdR3+JbxJuPKdVaKJrBbHDCwfE5i/E58+mczx4+YjLz6LYqmKU6MoKjZwekgFNpUq+VmV1e
      kKUZ0XLBSX/Eoy8+43I85eLkGcv4yoEmjmNGo0vOjw94+vSQFOisblCv2Bi6wpPDMzQy9p8+
      4vDgkLXVJmeXc9TriiVFUUnjENcLmM8n7D95TP9sRG+lxcVoiirlfP7550zm7pWa9sMnKIaN
      Lkd4foosS9TqNRRZZX1rj+Hxlzx6+owwyxgOxwxHI2RFxl8uiZMUihTdLqPrFpenBxSKRhL6
      nJ6f8KdPPidNIh7tn5JlGfV6HXcy4uGnX2DW6yxGfZ483ScqFLZ2tolDH9d1kXUD21Bpd9uc
      np5RrdZQFTh49pSL/pBao4VhlVDI6J8eMJ77FMW7O0W98SmQEIIsy678rSSJPMuQVRWeNysE
      ob8gLDRatR+WQHxZO5IkXcUDQpAVBYosf9XmdfvPY4aiEKja8/MQICDLC1RVuX5NAUgURYGq
      qi/ijKtjFOR5cfXBvv575LssE+kqQS3PkOWv2suvj5tnGZIsAwJJuqoS+/p5Pbd6kmQZSYgr
      R5vraWOe50iyjCxBnourvwtBlufX5wcgvsONRqIoMgb9S9bW1xFFTi4EEgJZVq+u/fo5CKAQ
      4soZSPDi2uEqOVEgIcsS0tfOR5Ik8rwAihfXfH1Asix/8dxvaop0K49+6xH2XvO2HmE3XhQv
      ipyFu6RSrXynvk2e58iyTOAvUXULQ1evpNFRvtdc+ut85RKZk+UCXXu9S8rSBD+MqZRLSJJE
      kWfEaY71GrvIoigokMiTiEzI2Nb3v/eqFhmyNCLNJRzbQpIgTSIKScV4nfMvcnLkFzvsRZ6D
      rLxXhtp5/npJk9/mxoPgi9MT0kJCSBKmJhNFMcs4p6xDhsLh0TG/+fVHPHr4JVt7dzifT6k5
      KvNYw/MWtNsdVrsvX9kBmI8vmfg5a9f5+/PJCKfaJE5iksCl1uoxHvRpdtrMZh4lS0GoNkXs
      kiQZSz8iTyOixRhKTQxFoVY2cMMMQ8rQnSrufMbq+gaTwRlGuY47vqTWXmF4/JTK5n0mx0+p
      dVZZTAYY5QbBYkqz3WY4mmHZBlm4xLJLxIVCFi4o0hi/3iWLEy5Pn9Ja20VRVHQpoVAs4uWc
      ZqfLZOay1m0SxTFZLhF5HhNvQrtkcurKfHB3i8NHf6Jkl/DR2ew1mLkhrYrGl88GV+rTuk0W
      R6iqQpAKLDmjkOC8v+DjX33wXnWar3Pz0ohFgZTGnJyF2JogKVSGozFbq10UWaLVrAMSa2sr
      jPoXmBWH4XAKWgnNqVCvv1pBzOByiB8LLLUgEzlnh+fU6x5rd7e5OBxyMZjSaTV5/OWXCEkj
      qZdRtJySKWPbFifHJyxTWO10kIXPYOCT0sNRJbylRzi8ZOEXVJptJuMx8XhOt9Xl/OAx1VoT
      CVhZXeF8OKFsmfgXTzkdRkznHhvbOyymAxbTCULx6a2uoqgahlzwbP8A0zDobuzhjfsEmHTq
      ZeQ8wJ1PGE8W5LJCr9Pk4NkBkgSGVcUp16iVFGJdZb6IqdbbWAqYssRnX+6j6TrrK3do1mvM
      pmPc4JxmexMp9MiynPPhJZ31dZr12lW8c/NJAe8kNx8E5ynnF0Na7TqzuUfJNglTQa1sI5Nz
      OXFZ7XUYDS6wnRLnwwk7m2vXgZ6Eu4xoNb6/E7yQR08SZOkquC1kFW86wizVcGyTyWiIaWh8
      +ulDfvmbXxMsfRxLQ9IsTKVgPPfptRtcDkfUG000VeLyckKz1USWYOnO0O0K7nxGq9PFm43R
      7RKGpkORMZnOaHS6hO4UoZrMhgO661ssZyMq9SbzuUutVmHpzrGcCrqmkYRLghRqJZ3JIqBR
      r0KeMvVCmrUKQghmkzH1ZoPJ1KXbbROFIUIINFUFkRNECU6pBMhk8ZIkl3FsgyxNmXsBvU6L
      8XiEKkvImollWlwcPWaeGWx3q0i6QxItcZwylvV2Hm1/KW7l0W/l0d9r3iYIvpVHv+Vnzzu/
      Ezy8OGHiRmxsbmJoMmmSEGcCW5fJComT0xPu3t3j0z/8kdWdPZoVh0KSyeOYOAeNFHT7yv70
      JZwcH1O1dXKjhCIriCTAsCtkWYJt6kxmHtWyhRfElEyVk4sx9/a2GY/HlCsl3GVE2dIIkgJL
      gwyNIglQTIfYX1Iql3A9n2A5p95aRZdz4lxg6zqZAIqMZZhQMlWiDKpljX///z6j0VulUTaR
      RMpn+wM+3FvHdsosPI9q2SaIc+QiwSzVIAvx4wJDEWSoSHnM1A3Qi4hpJNhe75HmYCgFQjFJ
      AhchqWiqjJA1ZtMRnZLC56cuq70uhixIgjnjQGK1XaNUslkGEZYmX7nYBB61ZgvlPZaJufER
      4OjwEDWPmCYSdUfFiwouhxNW21U0VSeXYGd7h+H5KX6cEPgBILCcEmf9EdtrHdJccP/e3Ze2
      c7h/gGMozIKIvIDhxSnVSoPuzi4lKeLfPnnIysoGmqagkCNkjZ6jMEhSZoMllZpJXsjIRQ5y
      AUK+2myKXI7HS3rtNpalskxk7u9uMTo/ZFlo5MsZhSRh2SVOT85Y296iSFPu39tieOnj+wOO
      Dy9ZW1tBNnXOjo/p1FpYFYMYjSyNmZ6ds3H/Q4zc59HJkO21NpJ8ZdmkmTa9ZpWnB0cYVoks
      S1hOL7FqdTSljKEWJEnIxEtY7dTpVQ2WapPR0z9y5iZ0e6uU5ZSj/pR2t4Wmaqh5QJ4lHA2W
      /Oo3v6XXePOCkr807/wIsLrS4ej4nM3VFqPxjHa9imWX6DZrSHnC6XCOLEGa5bS6a+TJVcGK
      Jheohk3ijmmsbv9gO816mckyodOoERUqjq5glRs0G1XySGFra5t2u4OuygTejLDQcFo1ODhm
      pVMiyFUsJUI2qpS0ggSDasmCoods9mm0uliWRhiELIOQSrWGkisYtTKSBLqmIisqIouxqw0k
      ScWdD+lt7aHKBpV6G9M2UUVBpdqiVDJYBiFBnFMzdZxqBSVT2Nm26F2r5E2GA6xKlSzLsEs1
      pDzEqjRoVR1y1Sb1Zjj1Nnm0xKlpVMsWqgKjk1N2Pvw16vExrV6Pki6TSRrtbu/F9QvVQtZG
      GEpBVhSo8u0q0I/KrTz6LT8FbxME38qj3/Kz53nl3Zty4+PedDwm9SeM3G+W7vX7FwTjSz79
      8nNOD0+Y+l/9P09TZvP5a7VzfPCULx/v80Njged5f/b7ZDp5rba+i+X1cftnx3ivUaYYBP51
      MtlzBEHw52oa08kEbzrg6OSMRw+/wE8KTg6eEmffvOKnj75gNF0Qe95t8c0rcOMxwHIx5fxk
      TITDv15esr3SZOjl7G20yYVKVhSkaczFyQFHcYQqa1SqVc7Pjvibv/v9KxtDp2mCJFt8+fmn
      5GnKcJlzb2eVInD54tkx29u7xElIVkisd+v86dEZ//M//ZaHDx9TrztcDMYEk1PM9i5tR2I8
      XqA5NmmSoSvX+TuZQDdUomUEckH/csHe3ipRUlCEPnc+/BWj4Zipu8RSFPwiRaQKSRKiaia/
      /GCbz58ck7hjpFKLYHhCfWWTsqHjReFVLYRWxlYK5u4UXTPIkiXNnb8hGA9Yeh5GtXudU5Uz
      Gk3xgi8QqoGULNl58EsURSEMQ9LxjNC30WKDaD4hc0xE6KEaNhenx/zd//ifKOnv57z/69x4
      B6i3uqyu9bicBZRLDo6hYlYkKpUSuiphLDyccoWSCuPxnGa9TJRK3L+zS5rmr9wBuisblCsV
      XNcli32cIKeky6j1HXYLlWazhW1rLJchSBJbax2EZtJrNyg3m6iSxMJW0Zw6jlbghgWalGGW
      qyT+lEqtfWWGXalTWnMIvQmW06DdbaIgEXozQGLnzl0E4BgKTw9Paax1sTTlSpVa0djd2WU5
      tRGaTWLJlGot4jTBKnIq9QbVaoPQW9DotEmWE/746SmdO1fXt7aas8xU2vWrtPF7H3yA782J
      0amXu9iagqrpaLpOq7bKhRsSB1PseoPmSos0DBFFhioJEj+g0Es3PwV4x7lRefSfYm5+pSpx
      M+08z63/8xz7nwhREEbJzzZN4afgbYLgRqNxc0GwJEk/yYdG1/W/ajlB582Vv98LhBBvJYx1
      o/4Auq7jzufYhoRXWNSdrz6ok8kYR5V4ej5gc+suVUdnPJnQajZfctTv5+zoGUGucndv+4WK
      WhyGqKb50p3OxWJO9VoNzl+MSYWCF+W0qg5akRDpFUraV1VOYRi/5Bu5IAxTlkv3GxLwL2tb
      FDnB0mfuR9y7d/eVaiBu+QpVVd/qC/DGY4D5ZMjxYkyu1fjnszPubq1w6eZs9qroukpKzsnh
      Ad12leEiZHh2gFXv8ujTT/jV7/8Da61XW0oNgoAgV/n8D/+NRWZAtKBRb2HVK7hTF91UkdHo
      nzylubLOeBHzH/7xbzl4+ohas8Pjh1+yd3+XNMwwmqs8e/QFzWqZs/k+jmlyfDbgP/7T7/j0
      ky+pVzTGoUzNKLCcMnM3hHhKKHRkDH7xy3t88m//wsqdj8i8Ef3xHMspQzghUqtUdIm17Tv0
      T4+YLiOatRpZkpDm4rYD/MTceAco15qs9FocX3rs7e2iSgXNmoxlWqiaxoMP1onHFxyeXVJr
      dbHtFvMgYn1rl/JLKqu+TbOzQjlOCEKFilkhmAqcao1CAkWW0HSL9W6PPItottpEwRkZsLlz
      l9ifs7K2hqoa1Hsd7HoTDx+RCx7c7dAfuuzt7qDrNs16CWSZuqbSbdUJ3RlxnNBptOmU6/iz
      BY5t02y3CIKAaqnKdqmKBExHCaqqoSsyeV7QXtmgVWRkQqXXaeIHPryhUfgtb8ZtNuhb4s7G
      BJlM7w0cLm95e97ZXKCfKhUiz/O/uDy6Qs5oNPqLnsP7ShRFxPGb66PeeCpE4PsYGoSFQcn8
      qjnXXWAYFobxzQDG9VzCIKTsOKBpWIZBHkXkqorxHV5Qz1Mhjg+ekKsW3WYbx3m1ZcPlYkIq
      W9TLNnESY+hXU64sy17qO+X7AbalkwuFOAp+cBUiyzIUVcWdjhjNfXZ2ruxVfT/EcWw8d4Fd
      qnynfPy3iXwP2Srzsj0s3/exLYM0l9Cv1eouzk/prmygSDmuFyArMqXr8/6uqirP8yiXv5Kp
      8QMfx343p2fv5CrQc8aDcxaLMUp5lcV0zHqvwSwQVEwJwzKYXo6oNtssJmNW9u6znE7xZ2PG
      pTYNx+BkMqBSatBfTLlz9wOq9nfHBbVqFaHb7D95TLPbpn92yp1f/Jos8oCcwfmAbq/D0emA
      XreJVa5zeXxMrdlm/9k+qytt8sgnLiTm4wmNRg2z0qJZkvn04QGr3QZ+XFDWYRpkbDY1DsYK
      WjqmUm8xuuyzde8j4sWAIJXJgxlGuYEsKSznIxrrOxRBhC5i9g+OkGUZKQ2o1Ors7x+wurbG
      wvMwDBtHhwSdLFzg1DrYcoYbZ4z6FzRqNSRrzmS6pO1IZKqNN52zstrk5HzKSqfCxI345Z0V
      zs7mxHnOnc0u5/0hqm4hk+L5KUWyJG72MMtVTg6fYVcbzIYD2qvrnJ9e0Oy2WEwGLBIFW87I
      FIO7O+9mB3gbbnyh3nIq3L97hzTyyYRgPl/guS6KIpOmKa3uJok/J4kioiRFFxlOb5008MnS
      FJGnzNyAnc010peUPsrXIk29tQ2kNCCIcoQomI0GDEYzsnjJ5WhKLgpQDFq1Mp2VdVQyAt8l
      SjIMu0ylVKJasZElwWQ6xfc8loFPLunUKw5hFKGqKqVqHV2Bdm8NVSQEUYoQBarhUHEMvKVP
      Xgh836NaqyFxtS9Sba9hSAlRHCEh8BYLsgJyodJut6lVHOIoIo4iqo02qlSQFxLNmkMUpyDJ
      +J6HEALX9fDcJWm4YDieIxAEYfSiZlggM52MkXWbrc0NJpdnjKcuiqJgVeqcnp5gaTLNzgoG
      OX4UEywWRL5HIhSWnocQBVEUo8oSQfjXJ8X+TgTBWRJycHTG1u4uhvp6Zm632aBvRpGGTLyU
      duPmM3Zvkve+KP5nI49+y43wNqkQ9Xr95ovikzhGVSRSoXy/fHi4ZDDx2Fhb4U3LU73ZmCBX
      v2Gf9HWyNEFStFcKNH8sijQmV/Q/V7wWgjhNMZ7vYOYpcSF/7/255ft5Z5dBn3N5cUroz5Fr
      mxD71MoWYSYhpwEXwxGbO/eIF0NyzWHhLojCEMsymYwuqVSajKYT9u7eRf8Bc7rz83PKjQ7/
      +q+P2NvdYRnnTC4Ouf+rv8Of9vHDkGUIm2sdJgufki4IcwVNRKA7ZMESu1zGCzN2N7oc7D+j
      3ujhRz55FNLobRC7IzJZx1IkUgmKFPwoxlIzEgxIPDSnTuovKNfqnD97ysqvfoeezAmCFJWU
      8WRIpjbIgwm9zV280Sm6bjBYxOxtrzObTNnc2WFwcoBZqTHtD6l32swmE1qtBpO5T62ksYwF
      jiZQdJPJaIKuKHjIfHz/zk0/0r8qbrwDqJrJSq/Dw4MTZp5Pt2Yz9hLu726x2uug6xpmo8Hh
      0SlJsCBJMkr1GgdP9ylVPOoNAzcqaDkv7wCNZpP+ZE6jXmUy7HPQX3B/p4cqyyzcJZZj0606
      9E9OeXQ+5O9/8yGGCotZQJ7NODodsre3Q3/sstEtsb//lNok4xe/WuO//p+f8LFdp/DmLDKN
      NPBRKChXbR7vX3Bne41cSpHziCAacnSwT3dti/L10Dw4OSYuJMqVOlapTCZ0zMoqeRxSrdUR
      WcbaeoOLowOOhzM6K6t4fkiUh8SxwmjQR1EkDs8GlDTBQmtT0gSPHn5Ka3WNenuNdLbEtlTi
      OMIwbrNHX5Wbd4gpCiSuZLfjOL6SH0e6XqkoSHOBIkGaF+jPA2BZJolj0jAE06JsmT8or53E
      EUJSQORXIrdCQpEEkqIh8pTius0iz0nzAkO/KqM7ePIQs9ajVbVRVI0sy69M76IQTdVRVIU4
      ClF1E5GnCOlafFaAJAmSrCDwFpRrDRazCfVmiyyJUTWdJE4wbetKtJYr2XOEIE0z9Ov2JQRx
      cvW7uL5HpmWRxhGKBuNhSKWsERdQdexvTJ2yNAFJeSHpnqYpmqaiKD+Nsfe7wK08+q08+nvN
      Oy+P/mIEQLqRAPSFNuj1CPD8m/1muDK7UJTvD1aFECRJgmF8tWFXFMWVmcQNntn7yjsvj37Z
      v6BkFFzGJTZbNovFnFRo6CKi0ByyYEGp1mQymeKUbOQ8QbFq1Cv2a7VzcXZKEBds7WxAGvL4
      2Rkf/fpXjC9OKddajCdD2s0mo+mCbrPKxA1xdEFcaChFhGFXmU9HyEVMpDao4TKVypSJqLZX
      EbHHMsmJ/RBVgXrrSueo6uj4Cax0WxRJyPnFOafDJb++s8HJeES93kWOPXyhUrZ1hhfndFbW
      iNKC9ZXODd31W16Vm5dHTyIuZnNwJB4+GdKoOsSJR6bpKPkEP5CZTJ6QyxpJnmOQIGfKa3eA
      LEuwKw3GlwOyPKfb7aIKHz+RmT55TGOtxdHxOdW6zcNn59QdjTzT0dSU44ND6vUO5UaZJEyo
      Nxo4UQqmxfwyIbw4p2TIeHEGccD51OP8/AJZs8k6deQ4oeg0ydMUNIMHd7tE7gy9XKHVqDId
      +FiKYOr61BotFJGxcH3Weu2/mLviLVf8ZPsA3nLJIkgR4QK70aNyndMznwxxqg0mkzntdpPA
      naI59StVtlfg6/Louq4zHvZRzTJp4FHvrDAZnGGZNv35gm7ZZBJJbLTLTBYhzfpV8OTOxihG
      mZJjUBQ584VPp1nlcrxAyiOq7RXy0CXIJMq2yXQ8pNpoMhpNUUgxy02KNKLdapJkGYqsQp5R
      SAXuMqFWvurMaV4gkpAwy0kyqFdsLOv1Ovot3+S93wnO8/w2CH6PuZVHv+W95p3fCR6PBjil
      6pWDi6KhkIOqIxUpUVJgqBKybhKHAbZt4fshlWr1tT2rjg+e4PoxWzt7IAoMVSYtJBQpB0Un
      i0J02yEKfCzLIggjfHdOo9MjjSJUVUJWTRQFEBIiT4myAllkaIrgbBjSqqmkuYmmQaVkcnR8
      wcpKh6wA29AphEAUOX6UYKoyKDqaAstlgCTLmIZKmoOua0iI67oCkzDJMUTMMMgRoUu7t0Yc
      +ih5gic7VEjwhEzqzmivrpNGIU6lQpFfFQLFQYBu2YRBiG2b5LlAEjmpkJiNx9SqZQzbIQwj
      KhWH4WBMvV7BDyPKJQc/iHBsizzPURQZ3/cplas/adrIX4ob7wBFXtC/6BNEIbphIYuULMvJ
      hIRlWsTemEI2MEyNYBlj2hqYVWqvubJVSBrrKyUOD08wyJFskzxJkUSGpAqKREPkIRfDOZ2V
      HooiY0gFdQGT2ZTInWA21iELKAqBVORkQiZcDMkVDdOqcXIakEUpiyDiH/7xd/i+z/HxMXkO
      G90mizBm6c6Z+BlqNMfpbNCu6EymcyRZJ+fKn9cxNYrA40l/xsbqKnEh8cFanTDOIYq4OD9m
      cHJMyalT3r6LU0TEkk4chZzsP+TkdMxHf/s7Qm9CUQgWo3N0s8xg5tFtNdje2WNyccTR5ZLt
      tRaPv/gTmtPENCWEeoeTZ4/I19dw44j9Ux1Hy5AVjdDzqNRrDC9OefDrf6Dm/PXKzTznxjtA
      qVLFKn31jX58+JRmd4OSY5NnKYEhoZhl5pMxWzvbGIbKm4xLjWqJ8SKkVlLJJAfiJXa1cZXr
      Y9iUrRJ5GqGZIxqdLpaukoZXjurNRoNQl1EsG13IXEyWbKyuAjDVJTTTwZsv6G1sIecpw6mL
      qqjUyha6ZRGmYFfK9MdTmp0uqhfiaHUwylQcg3KljhASvu8S5TIVHczVDVLlkEazSRDnmJUa
      mjeks7GFKFIQEo16g3kQUO41mQ+mrG9uI4oURbUo2SZyouJnCu3uCna5jmbP6Ha7lB2TpFpj
      y6jRqDlIosCp1pjNPMqmxgcf/5o4CNjureCHCdPpjNVWlbjdAKEjFRlFGlOg/9Urx/3sg+Bb
      3m+CIMC232wlrVqt3sqj3/LzRlGUl9Zv/xA3PsLNJhMG/T7u0v/O/wd+8IOS5q/UznT6Ixzl
      +1kulywmQ6JrOXIhCh4/fsztGtrPmxuPAbz5BDeTKacx/eMDUmT6JwesbGxzOnT5xe4Gs4en
      VFbvsbv2w3KC30ecJATumGdHfTRNRxIpslNndvIIq96hEAZEExrr9yCaMV0mlK6Lz0mXyIpB
      mmcYUoGXCnRF43w0485akzgXBEuf+x9+yOnjTyjsDlsNhcvLKZZzRpwK8nCOqmiUqzajRUrD
      VvjjH//E7i8+wjJU5CLHsKt02/Uf8e7e8rbceAeoNTs4WUpaQLVSB5GjKxLVepNCqNglB11Z
      JVfebsktT0KmuY6ha3RXOiz9BFHkmGubGE4Z06kTznWEIqE7NpHovKA0AAAGmklEQVTQKGKP
      UqWEO3Gpter47pxyucJKpYI7czFKJdqNGkjgTicYhkGj1cXPFYJM4Te/eYA795ElMB0HWVYZ
      T1xavQ0aJuzd2cFxHIo8x/fmtLo94iTDeEXJ91tunhsLgoui+EkEq95GHv1q3Vt58fMmiaIY
      03x1qcdbXo23CYJv1CNMCPGTpCjIsvyN1ON3lZ/DOf4cSdP0re7tjXUARVFQFAVvsaBUrRIG
      PrbtkERLMslCFSmqaRLMJ5wOZ9zb273y5X1D3MUCRcpQ7CamCpPplGbju/U68zwkDBVKpVfb
      6Dk7OqS9voWh/vn55XHAk4Nj1rf3KFvfPF4WB+SKhaFK3zifIo1IZQORxt/IZQ8WC/Rq9cVD
      Cb0Zs1Cw2vnqOoL5iKNLl/v3d0mj+K1y4f8aSJLk3a4H8H0fp1plNhxw6LmohonrxchZTmt7
      i6qaURSCi7MjCqHgBgHR/BKcBtPTI1Z27yPimHsf/uKldkmD82Ncz6PW7HLcn7C70SFNExJv
      zp8ePmV7dxvFqrHbLfHlwQEVs87/dXDEx/c2mCyWOOUa3uUhdnuTPPRRZIlnR33+8//yHzm9
      GLKMAlTVIAojdMvE9zysUpW9tTZ5XrCcDng2cdFFwvk8YrdXw9IMhGXy2WdPuHN3h0a1xH/9
      L/+FbrdFZrZZjgesdCqcTWN6FR2pEGQzl2x2QWvzA7zhGULS+WxwhmU7mKUKZh5SiAKRxvzh
      D5+wvrWFIYPnzZBkDd+PUdSUSnODzZXWTT/enz03H43lMcenF2iiIM9ShFFi7+4qwXBOASiy
      SpGl5EJBBtY2NpnIBXalhiGgUinTsDvwA4uljc4qvU5CfxbQrJcxDJPUm2NWm2ztFbQaNfrj
      BaKwkZSr2oNep4VdruNU6kBGFrRQRUacZWSyxp27e8iKxt17ewBIeUI/irBKVRq1a/kVWUZV
      YLn0KYSEbpXYrbaRkiVIEMYpvW4DTTPI0oRmZ4VKrURQ6FiNCjlXtQ+SlGHYFVRZoNabeK5L
      s7OKJuUcnw1QDZuVXptgNkaaLkhlg3ajQp749L2YtbUuGtCqwzLxcT2XoGq/8fz4feEnywYV
      Rcbh4TFrm9vvtP5NkSccHp6yubOD9hpTsjSJkFST75gl3XKDvPdF8e+CPPotfzmiKHrjGKDT
      6dx8KkQYBJi2/dKC8OlowCLI2Npcu/bAfXWep0KcHDwhV226rTb29yhIfxvfnZFIBvWyfS0p
      clVQ//Vl0SgK0XUT+Tqb7+tLp1mS/KAH2dffc3L4DKvapt2okscBmWpjyALXW1KplF96jOcs
      l0tKpe93zhN5TpRmqIr84nqSyGfup3SaNcLlkgSoXh8jiSJkXUf9uqGhKFgG4Qv59CSJkGUd
      9R0d3t5pefTFfI5hq0zGAWnkMZnO6fQ6HJ8O2FhtImkl8lTQsGROzk6Zznw6VYMwV9BFjKwZ
      DKcuH//qly/1z6pey6M/e/yI1kqP8eCC7bsfkkVLkHKGF5e0ex3OLka0mhUMp8bl8SH1VofT
      4xNarRpFHBAXErPRmFa7iVmqo4qQ8dil3GxiqzInp0ds7T3g5NkjKuUqXpzRapaYzCIe7K7z
      7GCfWr1BfzBkbWMDKU84PD7jN3/zNwhJZja+ZD7q4+gqnlqmpsQMFwnO5RlRKqjVG3iLOaVS
      ifliyd0P7jM4eoak6iyClLKtMjg7xq40uBwM6K50SPL/v5kzaE4TCoDw90Q0KCgBERPNpT20
      nen//zGtHWttKiKIGEHfAx49mGtPmc5k/8Pu4dvZNdBFSte+55ofGEweMXXFtThiTxa87FbI
      rnOjUc97KrtHoxQdIRCNZB0dCPwxSVbg2V2U6NPRFavv3/DDB6JdxOdPX9+tAd6i/z+KlwU/
      N4rjdk+nd8ficU6a/GL/O+L+IeCjP2b9Iya9SHpdwW67Zxp8waElS4/o85nsJF8PcP9tACE6
      ICB8XFCXCXGSM/9Qk+6ekRio0wGlNflLiet5zF0HLedodSbeRwztIbZlY9LSOBa6lsTJgcVk
      QFNVZIeEbSGZTFxA4LpjWkyeQpd1tOFyNagbTRCGpNEfjqcTflnSYDAa3iZ7lVLMZiHr1QbR
      1JSiRakTEovA87HRyNer9iYvmE99FC09y6HIY84FOAOHXRzj1Zos3dIfeeR5gihSRnTRVYst
      xI2AyQtpljP1A6oWlsslA9O5BYkqyZoevmXyNAvZbNecS4G+KqSwmLl9on2GaQ3BMFDXkv7d
      iDcW9u9OfwGwi2d9cQYmhAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Story 1 ' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 2' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
